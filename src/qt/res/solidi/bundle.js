/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(32);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactRedux = __webpack_require__(183);
	
	var _actions = __webpack_require__(223);
	
	var _App = __webpack_require__(308);
	
	var _App2 = _interopRequireDefault(_App);
	
	var _configureStore = __webpack_require__(314);
	
	var _configureStore2 = _interopRequireDefault(_configureStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var store = (0, _configureStore2.default)();
	
	_reactDom2.default.render(_react2.default.createElement(
	  _reactRedux.Provider,
	  { store: store },
	  _react2.default.createElement(_App2.default, null)
	), document.querySelector('#app-container'));
	
	// store.dispatch((0, _actions.logIn)());

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(3);
	
	var ReactChildren = __webpack_require__(4);
	var ReactComponent = __webpack_require__(17);
	var ReactPureComponent = __webpack_require__(20);
	var ReactClass = __webpack_require__(21);
	var ReactDOMFactories = __webpack_require__(23);
	var ReactElement = __webpack_require__(8);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);
	
	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(10);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (true) {
	  var ReactElementValidator = __webpack_require__(24);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (true) {
	  var warned = false;
	  __spread = function () {
	     true ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(5);
	var ReactElement = __webpack_require__(8);
	
	var emptyFunction = __webpack_require__(11);
	var traverseAllChildren = __webpack_require__(14);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var invariant = __webpack_require__(7);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;

/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(3);
	
	var ReactCurrentOwner = __webpack_require__(9);
	
	var warning = __webpack_require__(10);
	var canDefineProperty = __webpack_require__(12);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(13);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (true) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (true) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (true) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(11);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (true) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactCurrentOwner = __webpack_require__(9);
	var REACT_ELEMENT_TYPE = __webpack_require__(13);
	
	var getIteratorFn = __webpack_require__(15);
	var invariant = __webpack_require__(7);
	var KeyEscapeUtils = __webpack_require__(16);
	var warning = __webpack_require__(10);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (true) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (true) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactNoopUpdateQueue = __webpack_require__(18);
	
	var canDefineProperty = __webpack_require__(12);
	var emptyObject = __webpack_require__(19);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (true) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	           true ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(10);
	
	function warnNoop(publicInstance, callerName) {
	  if (true) {
	    var constructor = publicInstance.constructor;
	     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (true) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(3);
	
	var ReactComponent = __webpack_require__(17);
	var ReactNoopUpdateQueue = __webpack_require__(18);
	
	var emptyObject = __webpack_require__(19);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6),
	    _assign = __webpack_require__(3);
	
	var ReactComponent = __webpack_require__(17);
	var ReactElement = __webpack_require__(8);
	var ReactPropTypeLocationNames = __webpack_require__(22);
	var ReactNoopUpdateQueue = __webpack_require__(18);
	
	var emptyObject = __webpack_require__(19);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (true) {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (true) {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (true) {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	       true ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (true) {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	       true ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ?  true ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (true) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ?  true ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ?  true ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (true) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	         true ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	         true ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (true) {
	         true ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (true) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (true) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ?  true ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (true) {
	       true ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	       true ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(8);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (true) {
	  var ReactElementValidator = __webpack_require__(24);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactComponentTreeHook = __webpack_require__(25);
	var ReactElement = __webpack_require__(8);
	
	var checkReactTypeSpec = __webpack_require__(26);
	
	var canDefineProperty = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(15);
	var warning = __webpack_require__(10);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	       true ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (true) {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	             true ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactCurrentOwner = __webpack_require__(9);
	
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactPropTypeLocationNames = __webpack_require__(22);
	var ReactPropTypesSecret = __webpack_require__(28);
	
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (true) {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(25);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(8);
	var ReactPropTypeLocationNames = __webpack_require__(22);
	var ReactPropTypesSecret = __webpack_require__(28);
	
	var emptyFunction = __webpack_require__(11);
	var getIteratorFn = __webpack_require__(15);
	var warning = __webpack_require__(10);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;
	
	function createChainableTypeChecker(validate) {
	  if (true) {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (true) {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	           true ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	     true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	     true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }
	
	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }
	
	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }
	
	  return false;
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.1';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactElement = __webpack_require__(8);
	
	var invariant = __webpack_require__(7);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(39);
	var ReactMount = __webpack_require__(171);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdates = __webpack_require__(60);
	var ReactVersion = __webpack_require__(176);
	
	var findDOMNode = __webpack_require__(177);
	var getHostComponentFromComposite = __webpack_require__(178);
	var renderSubtreeIntoContainer = __webpack_require__(179);
	var warning = __webpack_require__(47);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (true) {
	  var ExecutionEnvironment = __webpack_require__(51);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	     true ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	     true ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	         true ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (true) {
	  var ReactInstrumentation = __webpack_require__(66);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(180);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(181);
	  var ReactDOMInvalidARIAHook = __webpack_require__(182);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(38);
	
	var invariant = __webpack_require__(37);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ?  true ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ?  true ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (true) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (true) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  true ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(40);
	var BeforeInputEventPlugin = __webpack_require__(41);
	var ChangeEventPlugin = __webpack_require__(59);
	var DefaultEventPluginOrder = __webpack_require__(76);
	var EnterLeaveEventPlugin = __webpack_require__(77);
	var HTMLDOMPropertyConfig = __webpack_require__(82);
	var ReactComponentBrowserEnvironment = __webpack_require__(83);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(142);
	var ReactDOMTreeTraversal = __webpack_require__(143);
	var ReactDOMTextComponent = __webpack_require__(144);
	var ReactDefaultBatchingStrategy = __webpack_require__(145);
	var ReactEventListener = __webpack_require__(146);
	var ReactInjection = __webpack_require__(149);
	var ReactReconcileTransaction = __webpack_require__(150);
	var SVGDOMPropertyConfig = __webpack_require__(158);
	var SelectEventPlugin = __webpack_require__(159);
	var SimpleEventPlugin = __webpack_require__(160);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ },
/* 40 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(51);
	var FallbackCompositionState = __webpack_require__(52);
	var SyntheticCompositionEvent = __webpack_require__(56);
	var SyntheticInputEvent = __webpack_require__(58);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(45);
	
	var accumulateInto = __webpack_require__(49);
	var forEachAccumulated = __webpack_require__(50);
	var warning = __webpack_require__(47);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (true) {
	     true ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var EventPluginRegistry = __webpack_require__(44);
	var EventPluginUtils = __webpack_require__(45);
	var ReactErrorUtils = __webpack_require__(46);
	
	var accumulateInto = __webpack_require__(49);
	var forEachAccumulated = __webpack_require__(50);
	var invariant = __webpack_require__(37);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ?  true ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  true ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ?  true ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  true ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (true) {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames:  true ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (true) {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactErrorUtils = __webpack_require__(46);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (true) {
	       true ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (true) {
	       true ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (true) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	     true ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (true) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (true) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (true) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ?  true ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (true) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(48);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 48 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ?  true ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var PooledClass = __webpack_require__(54);
	
	var getTextContentAccessor = __webpack_require__(55);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var PooledClass = __webpack_require__(54);
	
	var emptyFunction = __webpack_require__(48);
	var warning = __webpack_require__(47);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (true) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (true) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (true) {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (true) {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (true) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	               true ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	     true ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(43);
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);
	var SyntheticEvent = __webpack_require__(57);
	
	var getEventTarget = __webpack_require__(73);
	var isEventSupported = __webpack_require__(74);
	var isTextInputElement = __webpack_require__(75);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactReconciler = __webpack_require__(63);
	var Transaction = __webpack_require__(72);
	
	var invariant = __webpack_require__(37);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  true ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  true ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ?  true ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  true ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  true ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  true ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  true ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(54);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ?  true ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(64);
	var ReactInstrumentation = __webpack_require__(66);
	
	var warning = __webpack_require__(47);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	       true ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(65);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ?  true ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ?  true ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (true) {
	  var ReactDebugTool = __webpack_require__(67);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(68);
	var ReactHostOperationHistoryHook = __webpack_require__(69);
	var ReactComponentTreeHook = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(51);
	
	var performanceNow = __webpack_require__(70);
	var warning = __webpack_require__(47);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	     true ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	     true ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(47);
	
	if (true) {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	     true ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(71);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ?  true ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  true ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(78);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	var ViewportMetrics = __webpack_require__(80);
	
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	var getEventTarget = __webpack_require__(73);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 80 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMIDOperations = __webpack_require__(95);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(85);
	var Danger = __webpack_require__(91);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(66);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setInnerHTML = __webpack_require__(87);
	var setTextContent = __webpack_require__(89);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (true) {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (true) {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (true) {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(87);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setTextContent = __webpack_require__(89);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	var DOMNamespaces = __webpack_require__(86);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var setInnerHTML = __webpack_require__(87);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMLazyTree = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(51);
	
	var createNodesFromMarkup = __webpack_require__(92);
	var emptyFunction = __webpack_require__(48);
	var invariant = __webpack_require__(37);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var createArrayFromMixed = __webpack_require__(93);
	var getMarkupWrap = __webpack_require__(94);
	var invariant = __webpack_require__(37);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMLazyTree = __webpack_require__(85);
	var DOMNamespaces = __webpack_require__(86);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(107);
	var EventPluginHub = __webpack_require__(43);
	var EventPluginRegistry = __webpack_require__(44);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactDOMComponentFlags = __webpack_require__(38);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(112);
	var ReactDOMOption = __webpack_require__(115);
	var ReactDOMSelect = __webpack_require__(116);
	var ReactDOMTextarea = __webpack_require__(117);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMultiChild = __webpack_require__(118);
	var ReactServerRenderingTransaction = __webpack_require__(138);
	
	var emptyFunction = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(37);
	var isEventSupported = __webpack_require__(74);
	var shallowEqual = __webpack_require__(128);
	var validateDOMNesting = __webpack_require__(141);
	var warning = __webpack_require__(47);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	   true ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  true ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  true ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (true) {
	     true ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	     true ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	     true ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  true ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (true) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	     true ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (true) {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  true ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ?  true ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  true ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (true) {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (true) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (true) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (true) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (true) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (true) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (true) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (true) {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (true) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (true) {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  true ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (true) {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var focusNode = __webpack_require__(98);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(66);
	
	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(47);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (true) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	     true ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	     true ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	     true ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	     true ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (true) {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (true) {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;

/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(102);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	var warning = __webpack_require__(47);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (true) {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	           true ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(105);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(66);
	
	var quoteAttributeValueForBrowser = __webpack_require__(108);
	var warning = __webpack_require__(47);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   true ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (true) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (true) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(90);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var EventPluginRegistry = __webpack_require__(44);
	var ReactEventEmitterMixin = __webpack_require__(110);
	var ViewportMetrics = __webpack_require__(80);
	
	var getVendorPrefixedEventName = __webpack_require__(111);
	var isEventSupported = __webpack_require__(74);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(43);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var DOMPropertyOperations = __webpack_require__(107);
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	         true ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	         true ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	         true ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	         true ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	
	    if (true) {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (true) {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	         true ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	         true ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ?  true ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(114);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	         true ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;

/***/ },
/* 114 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(116);
	
	var warning = __webpack_require__(47);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	       true ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (true) {
	       true ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);
	
	var warning = __webpack_require__(47);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	     true ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	       true ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	       true ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	       true ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	         true ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	         true ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (true) {
	           true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ?  true ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ?  true ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactReconciler = __webpack_require__(63);
	var ReactChildReconciler = __webpack_require__(121);
	
	var emptyFunction = __webpack_require__(48);
	var flattenChildren = __webpack_require__(137);
	var invariant = __webpack_require__(37);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (true) {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (true) {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (true) {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (true) {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (true) {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (true) {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  true ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(63);
	
	var instantiateReactComponent = __webpack_require__(122);
	var KeyEscapeUtils = __webpack_require__(133);
	var shouldUpdateReactComponent = __webpack_require__(129);
	var traverseAllChildren = __webpack_require__(134);
	var warning = __webpack_require__(47);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (true) {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(25);
	    }
	    if (!keyUnique) {
	       true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (true) {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var ReactCompositeComponent = __webpack_require__(123);
	var ReactEmptyComponent = __webpack_require__(130);
	var ReactHostComponent = __webpack_require__(131);
	
	var getNextDebugID = __webpack_require__(132);
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ?  true ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ?  true ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (true) {
	     true ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (true) {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (true) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactErrorUtils = __webpack_require__(46);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactNodeTypes = __webpack_require__(124);
	var ReactReconciler = __webpack_require__(63);
	
	if (true) {
	  var checkReactTypeSpec = __webpack_require__(125);
	}
	
	var emptyObject = __webpack_require__(127);
	var invariant = __webpack_require__(37);
	var shallowEqual = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(129);
	var warning = __webpack_require__(47);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (true) {
	     true ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	     true ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (true) {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ?  true ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (true) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	         true ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	       true ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (true) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	       true ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	       true ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	       true ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	       true ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (true) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (true) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (true) {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (true) {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (true) {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (true) {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (true) {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (true) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (true) {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  true ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (true) {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  true ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (true) {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ?  true ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (true) {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (true) {
	       true ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (true) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (true) {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (true) {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (true) {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (true) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (true) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  true ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  true ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (true) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	       true ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var React = __webpack_require__(2);
	
	var invariant = __webpack_require__(37);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ?  true ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactPropTypeLocationNames = __webpack_require__(126);
	var ReactPropTypesSecret = __webpack_require__(114);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (true) {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(25);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (true) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var invariant = __webpack_require__(37);
	
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  true ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(9);
	var REACT_ELEMENT_TYPE = __webpack_require__(135);
	
	var getIteratorFn = __webpack_require__(136);
	var invariant = __webpack_require__(37);
	var KeyEscapeUtils = __webpack_require__(133);
	var warning = __webpack_require__(47);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (true) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (true) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 135 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(133);
	var traverseAllChildren = __webpack_require__(134);
	var warning = __webpack_require__(47);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(25);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (true) {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(25);
	      }
	      if (!keyUnique) {
	         true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (true) {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var PooledClass = __webpack_require__(54);
	var Transaction = __webpack_require__(72);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactServerUpdateQueue = __webpack_require__(139);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (true) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(140);
	
	var warning = __webpack_require__(47);
	
	function warnNoop(publicInstance, callerName) {
	  if (true) {
	    var constructor = publicInstance.constructor;
	     true ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (true) {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	       true ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (true) {
	     true ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (true) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	         true ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (true) {
	      ReactInstrumentation.debugTool.onSetState();
	       true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ?  true ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var emptyFunction = __webpack_require__(48);
	var warning = __webpack_require__(47);
	
	var validateDOMNesting = emptyFunction;
	
	if (true) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	       true ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(37);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ?  true ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(53);
	
	var DOMChildrenOperations = __webpack_require__(84);
	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(37);
	var validateDOMNesting = __webpack_require__(141);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (true) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ?  true ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var ReactUpdates = __webpack_require__(60);
	var Transaction = __webpack_require__(72);
	
	var emptyFunction = __webpack_require__(48);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var EventListener = __webpack_require__(147);
	var ExecutionEnvironment = __webpack_require__(51);
	var PooledClass = __webpack_require__(54);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);
	
	var getEventTarget = __webpack_require__(73);
	var getUnboundedScrollPosition = __webpack_require__(148);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(48);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (true) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(45);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(130);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactHostComponent = __webpack_require__(131);
	var ReactUpdates = __webpack_require__(60);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(53);
	
	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactInputSelection = __webpack_require__(151);
	var ReactInstrumentation = __webpack_require__(66);
	var Transaction = __webpack_require__(72);
	var ReactUpdateQueue = __webpack_require__(140);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (true) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(152);
	
	var containsNode = __webpack_require__(154);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(157);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(51);
	
	var getNodeForCharacterOffset = __webpack_require__(153);
	var getTextContentAccessor = __webpack_require__(55);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(155);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(156);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 156 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 157 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(151);
	var SyntheticEvent = __webpack_require__(57);
	
	var getActiveElement = __webpack_require__(157);
	var isTextInputElement = __webpack_require__(75);
	var shallowEqual = __webpack_require__(128);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var EventListener = __webpack_require__(147);
	var EventPropagators = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(161);
	var SyntheticClipboardEvent = __webpack_require__(162);
	var SyntheticEvent = __webpack_require__(57);
	var SyntheticFocusEvent = __webpack_require__(163);
	var SyntheticKeyboardEvent = __webpack_require__(164);
	var SyntheticMouseEvent = __webpack_require__(78);
	var SyntheticDragEvent = __webpack_require__(167);
	var SyntheticTouchEvent = __webpack_require__(168);
	var SyntheticTransitionEvent = __webpack_require__(169);
	var SyntheticUIEvent = __webpack_require__(79);
	var SyntheticWheelEvent = __webpack_require__(170);
	
	var emptyFunction = __webpack_require__(48);
	var getEventCharCode = __webpack_require__(165);
	var invariant = __webpack_require__(37);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  true ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	var getEventCharCode = __webpack_require__(165);
	var getEventKey = __webpack_require__(166);
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(165);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(78);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(78);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMLazyTree = __webpack_require__(85);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(172);
	var ReactDOMFeatureFlags = __webpack_require__(173);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMarkupChecksum = __webpack_require__(174);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdateQueue = __webpack_require__(140);
	var ReactUpdates = __webpack_require__(60);
	
	var emptyObject = __webpack_require__(127);
	var instantiateReactComponent = __webpack_require__(122);
	var invariant = __webpack_require__(37);
	var setInnerHTML = __webpack_require__(87);
	var shouldUpdateReactComponent = __webpack_require__(129);
	var warning = __webpack_require__(47);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (true) {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (true) {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (true) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     true ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  true ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  true ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ?  true ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	     true ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (true) {
	       true ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	             true ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     true ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  true ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (true) {
	       true ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (true) {
	         true ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ?  true ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (true) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (true) {
	           true ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (true) {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(141);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (true) {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;

/***/ },
/* 173 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(175);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 176 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.1';

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(120);
	
	var getHostComponentFromComposite = __webpack_require__(178);
	var invariant = __webpack_require__(37);
	var warning = __webpack_require__(47);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (true) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	       true ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ?  true ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ?  true ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(124);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(171);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(44);
	var ReactComponentTreeHook = __webpack_require__(25);
	
	var warning = __webpack_require__(47);
	
	if (true) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	       true ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	       true ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	     true ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	     true ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(25);
	
	var warning = __webpack_require__(47);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	     true ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(25);
	
	var warning = __webpack_require__(47);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	       true ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	     true ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	     true ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (true) {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (true) {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;
	
	var _Provider = __webpack_require__(184);
	
	var _Provider2 = _interopRequireDefault(_Provider);
	
	var _connect = __webpack_require__(187);
	
	var _connect2 = _interopRequireDefault(_connect);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = undefined;
	
	var _react = __webpack_require__(1);
	
	var _storeShape = __webpack_require__(185);
	
	var _storeShape2 = _interopRequireDefault(_storeShape);
	
	var _warning = __webpack_require__(186);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;
	
	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}
	
	var Provider = function (_Component) {
	  _inherits(Provider, _Component);
	
	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };
	
	  function Provider(props, context) {
	    _classCallCheck(this, Provider);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    _this.store = props.store;
	    return _this;
	  }
	
	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };
	
	  return Provider;
	}(_react.Component);
	
	exports["default"] = Provider;
	
	
	if (true) {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;
	
	
	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}
	
	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _react.PropTypes.element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	exports["default"] = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  dispatch: _react.PropTypes.func.isRequired,
	  getState: _react.PropTypes.func.isRequired
	});

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports["default"] = connect;
	
	var _react = __webpack_require__(1);
	
	var _storeShape = __webpack_require__(185);
	
	var _storeShape2 = _interopRequireDefault(_storeShape);
	
	var _shallowEqual = __webpack_require__(188);
	
	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
	
	var _wrapActionCreators = __webpack_require__(189);
	
	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);
	
	var _warning = __webpack_require__(186);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _isPlainObject = __webpack_require__(211);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _hoistNonReactStatics = __webpack_require__(221);
	
	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
	
	var _invariant = __webpack_require__(222);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};
	
	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}
	
	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}
	
	// Helps track hot reloading.
	var nextVersion = 0;
	
	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	
	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;
	
	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }
	
	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;
	
	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;
	
	  // Helps track hot reloading.
	  var version = nextVersion++;
	
	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
	
	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }
	
	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (true) {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }
	
	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);
	
	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };
	
	      function Connect(props, context) {
	        _classCallCheck(this, Connect);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	        _this.version = version;
	        _this.store = props.store || context.store;
	
	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
	
	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }
	
	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }
	
	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);
	
	        if (true) {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };
	
	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';
	
	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;
	
	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }
	
	        if (true) {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };
	
	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }
	
	        var dispatch = store.dispatch;
	
	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);
	
	        if (true) {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };
	
	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';
	
	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;
	
	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }
	
	        if (true) {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };
	
	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }
	
	        this.stateProps = nextStateProps;
	        return true;
	      };
	
	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }
	
	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };
	
	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }
	
	        this.mergedProps = nextMergedProps;
	        return true;
	      };
	
	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };
	
	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };
	
	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };
	
	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };
	
	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };
	
	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };
	
	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };
	
	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }
	
	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }
	
	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }
	
	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };
	
	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');
	
	        return this.refs.wrappedInstance;
	      };
	
	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;
	
	
	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	
	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }
	
	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }
	
	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }
	
	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }
	
	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }
	
	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }
	
	        return this.renderedElement;
	      };
	
	      return Connect;
	    }(_react.Component);
	
	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };
	
	    if (true) {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }
	
	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }
	
	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}

/***/ },
/* 188 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = wrapActionCreators;
	
	var _redux = __webpack_require__(190);
	
	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
	
	var _createStore = __webpack_require__(191);
	
	var _createStore2 = _interopRequireDefault(_createStore);
	
	var _combineReducers = __webpack_require__(206);
	
	var _combineReducers2 = _interopRequireDefault(_combineReducers);
	
	var _bindActionCreators = __webpack_require__(208);
	
	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
	
	var _applyMiddleware = __webpack_require__(209);
	
	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
	
	var _compose = __webpack_require__(210);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _warning = __webpack_require__(207);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}
	
	if (("development") !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;
	
	var _isPlainObject = __webpack_require__(192);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _symbolObservable = __webpack_require__(202);
	
	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;
	
	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, preloadedState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }
	
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }
	
	    var isSubscribed = true;
	
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      isSubscribed = false;
	
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	
	    return action;
	  }
	
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }
	
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }
	
	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });
	
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(193),
	    getPrototype = __webpack_require__(199),
	    isObjectLike = __webpack_require__(201);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}
	
	module.exports = isPlainObject;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(194),
	    getRawTag = __webpack_require__(197),
	    objectToString = __webpack_require__(198);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(195);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(196);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 196 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(194);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 198 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(200);
	
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	
	module.exports = getPrototype;


/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;


/***/ },
/* 201 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(203);


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ponyfill = __webpack_require__(205);
	
	var _ponyfill2 = _interopRequireDefault(_ponyfill);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var root; /* global window */
	
	
	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}
	
	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(204)(module)))

/***/ },
/* 204 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;
	
		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = combineReducers;
	
	var _createStore = __webpack_require__(191);
	
	var _isPlainObject = __webpack_require__(192);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _warning = __webpack_require__(207);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
	
	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	
	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}
	
	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }
	
	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}
	
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	
	    if (true) {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }
	
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);
	
	  if (true) {
	    var unexpectedKeyCache = {};
	  }
	
	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }
	
	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];
	
	    if (sanityError) {
	      throw sanityError;
	    }
	
	    if (true) {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}

/***/ },
/* 207 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 208 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}
	
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports['default'] = applyMiddleware;
	
	var _compose = __webpack_require__(210);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
	
	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 210 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	
	  var last = funcs[funcs.length - 1];
	  var rest = funcs.slice(0, -1);
	  return function () {
	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(212),
	    getPrototype = __webpack_require__(218),
	    isObjectLike = __webpack_require__(220);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}
	
	module.exports = isPlainObject;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(213),
	    getRawTag = __webpack_require__(216),
	    objectToString = __webpack_require__(217);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(214);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(215);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 215 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(213);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 217 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(219);
	
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	
	module.exports = getPrototype;


/***/ },
/* 219 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;


/***/ },
/* 220 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 221 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};
	
	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};
	
	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
	
	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);
	
	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }
	
	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {
	
	                }
	            }
	        }
	    }
	
	    return targetComponent;
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LOG_IN_FAILURE = exports.LOG_IN_SUCCESS = exports.LOG_IN_REQUEST = undefined;
	exports.logIn = logIn;
	exports.logInRequest = logInRequest;
	exports.logInSuccess = logInSuccess;
	exports.logInFailure = logInFailure;
	
	var _solidClient = __webpack_require__(224);
	
	var _solidClient2 = _interopRequireDefault(_solidClient);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LOG_IN_REQUEST = exports.LOG_IN_REQUEST = 'LOG_IN_REQUEST';
	var LOG_IN_SUCCESS = exports.LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';
	var LOG_IN_FAILURE = exports.LOG_IN_FAILURE = 'LOG_IN_FAILURE';
	
	function logIn() {
	  return function (dispatch) {
	    dispatch(logInRequest());
	    return _solidClient2.default.login().then(function (webId) {
	      return _solidClient2.default.getProfile(webId);
	    }).then(function (profile) {
	      return dispatch(logInSuccess(profile));
	    }).catch(function (error) {
	      return dispatch(logInFailure(error));
	    });
	  };
	}
	
	function logInRequest() {
	  return { type: LOG_IN_REQUEST };
	}
	
	function logInSuccess(profile) {
	  return {
	    type: LOG_IN_SUCCESS,
	    profile: profile
	  };
	}
	
	function logInFailure(error) {
	  return {
	    type: LOG_IN_FAILURE,
	    error: error
	  };
	}

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/*
	The MIT License (MIT)
	
	Copyright (c) 2015-2016 Solid
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	
	Solid.js is a Javascript library for Solid applications.
	
	If you would like to know more about the solid Solid project, please see
	https://github.com/solid/solid
	*/
	'use strict'
	/**
	 * Provides a Solid client helper object (which exposes various static modules).
	 * @module solid.js
	 * @main solid.js
	 */
	
	/**
	 * @class Solid
	 * @static
	 */
	var Solid = {
	  acl: __webpack_require__(225).acl,
	  appRegistry: __webpack_require__(284),
	  auth: __webpack_require__(297),
	  config: __webpack_require__(288),
	  currentUser: __webpack_require__(297).currentUser,
	  getProfile: __webpack_require__(298).getProfile,
	  getPermissions: __webpack_require__(303).getPermissions,
	  clearPermissions: __webpack_require__(303).clearPermissions,
	  identity: __webpack_require__(298),
	  login: __webpack_require__(297).login,
	  meta: __webpack_require__(305),
	  rdflib: (typeof $rdf !== 'undefined') ? $rdf : __webpack_require__(231),
	  signup: __webpack_require__(297).signup,
	  status: __webpack_require__(307),
	  typeRegistry: __webpack_require__(301),
	  vocab: __webpack_require__(228),
	  web: __webpack_require__(287)
	}
	
	module.exports = Solid


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Models a single Authorization, as part of a PermissionSet.
	 * @see https://github.com/solid/web-access-control-spec for details.
	 * @module authorization
	 */
	
	var hash = __webpack_require__(226)
	var vocab = __webpack_require__(228)
	var rdf = __webpack_require__(230).rdflib
	
	/**
	 * A set of convenience constants, for use with `addPermission()` etc.
	 * Exported as `Authorization.acl`, and further upstream as `solid.acl`.
	 */
	var acl = {
	  'READ': vocab.acl('Read').uri,
	  'WRITE': vocab.acl('Write').uri,
	  'APPEND': vocab.acl('Append').uri,
	  'CONTROL': vocab.acl('Control').uri,
	  'EVERYONE': vocab.foaf('Agent').uri
	}
	
	/**
	 * Inherited authorization (acl:defaultForNew)
	 * @type {Boolean}
	 */
	var INHERIT = true
	
	/**
	 * Models an individual authorization object, for a single resource and for
	 * a single webId (either agent or agentClass). See the comments at the top
	 * of the PermissionSet module for design assumptions.
	 * Low-level, not really meant to be instantiated directly. Use
	 * `permissionSet.addPermission()` instead.
	 * @class Authorization
	 * @param resourceUrl {String} URL of the resource (`acl:accessTo`) for which
	 *   this authorization is intended.
	 * @param [inherited] {Boolean} Should this authorization be inherited (contain
	 *   `acl:default`). Used for container ACLs. Defaults to null/false.
	 * @constructor
	 */
	function Authorization (resourceUrl, inherited) {
	  /**
	   * Hashmap of all of the access modes (`acl:Write` etc) granted to an agent
	   * or group in this authorization. Modified via `addMode()` and `removeMode()`
	   * @property accessModes
	   * @type {Object}
	   */
	  this.accessModes = {}
	  /**
	   * URL of an agent's WebID (`acl:agent`). Inside an authorization, mutually
	   * exclusive with the `group` property. Set via `setAgent()`.
	   * @property agent
	   * @type {String}
	   */
	  this.agent = null
	  /**
	   * URL of a group resource (`acl:agentClass`). Inside an authorization,
	   * mutually exclusive with the `agent` property. Set via `setGroup()`.
	   * @property group
	   * @type {String}
	   */
	  this.group = null
	  /**
	   * Does this authorization apply to the contents of a container?
	   * (`acl:default`). Not used with non-container resources.
	   * @property inherited
	   * @type {Boolean}
	   */
	  this.inherited = inherited
	  /**
	   * Stores the `mailto:` aliases for a given agent. Semi-unofficial
	   * functionality, used to store a user's email in the root storage .acl,
	   * to use for account recovery etc.
	   * @property mailTo
	   * @type {Array<String>}
	   */
	  this.mailTo = []
	  /**
	   * Hashmap of which origins (http Origin: header) are allowed access to this
	   * resource.
	   * @property originsAllowed
	   * @type {Object}
	   */
	  this.originsAllowed = {}
	  /**
	   * URL of the resource for which this authorization applies. (`acl:accessTo`)
	   * @property resourceUrl
	   * @type {String}
	   */
	  this.resourceUrl = resourceUrl
	}
	
	/**
	 * Adds a given `mailto:` alias to this authorization.
	 * @method addMailTo
	 * @param agent {String|Statement} Agent URL (or RDF `acl:agent` statement).
	 */
	function addMailTo (agent) {
	  if (typeof agent !== 'string') {
	    agent = agent.object.uri
	  }
	  if (agent.startsWith('mailto:')) {
	    agent = agent.split(':')[1]
	  }
	  this.mailTo.push(agent)
	  this.mailTo.sort()
	}
	Authorization.prototype.addMailTo = addMailTo
	
	/**
	 * Adds one or more access modes (`acl:mode` statements) to this authorization.
	 * @method addMode
	 * @param accessMode {String|Statement|Array<String>|Array<Statement>} One or
	 *   more access modes, each as either a uri, or an RDF statement.
	 * @return {Authorization} Returns self, chainable.
	 */
	function addMode (accessMode) {
	  var self = this
	  if (Array.isArray(accessMode)) {
	    accessMode.forEach(function (ea) {
	      self.addModeSingle(ea)
	    })
	  } else {
	    self.addModeSingle(accessMode)
	  }
	  return self
	}
	Authorization.prototype.addMode = addMode
	
	/**
	 * Adds a single access mode. Internal function, used by `addMode()`.
	 * @method addModeSingle
	 * @private
	 * @param accessMode {String|Statement} Access mode as either a uri, or an RDF
	 *   statement.
	 */
	function addModeSingle (accessMode) {
	  if (typeof accessMode !== 'string') {
	    accessMode = accessMode.object.uri
	  }
	  this.accessModes[accessMode] = true
	  return this
	}
	Authorization.prototype.addModeSingle = addModeSingle
	
	/**
	 * Adds one or more allowed origins (`acl:origin` statements) to this
	 * authorization.
	 * @method addOrigin
	 * @param origin {String|Statement|Array<String>|Array<Statement>} One or
	 *   more origins, each as either a uri, or an RDF statement.
	 * @return {Authorization} Returns self, chainable.
	 */
	function addOrigin (origin) {
	  var self = this
	  if (Array.isArray(origin)) {
	    origin.forEach(function (ea) {
	      self.addOriginSingle(ea)
	    })
	  } else {
	    self.addOriginSingle(origin)
	  }
	  return self
	}
	Authorization.prototype.addOrigin = addOrigin
	
	/**
	 * Adds a single allowed origin. Internal function, used by `addOrigin()`.
	 * @method addOriginSingle
	 * @private
	 * @param origin {String|Statement} Allowed origin as either a uri, or an RDF
	 *   statement.
	 */
	function addOriginSingle (origin) {
	  if (typeof origin !== 'string') {
	    origin = origin.object.uri
	  }
	  this.originsAllowed[origin] = true
	  return this
	}
	Authorization.prototype.addOriginSingle = addOriginSingle
	
	/**
	 * Returns a list of all access modes for this authorization.
	 * @method allModes
	 * @return {Array<String>}
	 */
	function allModes () {
	  return Object.keys(this.accessModes)
	}
	Authorization.prototype.allModes = allModes
	
	/**
	 * Returns a list of all allowed origins for this authorization.
	 * @method allOrigins
	 * @return {Array<String>}
	 */
	function allOrigins () {
	  return Object.keys(this.originsAllowed)
	}
	Authorization.prototype.allOrigins = allOrigins
	
	/**
	 * Does this authorization grant access to requests coming from given origin?
	 * @method allowsOrigin
	 * @param origin {String}
	 * @return {Boolean}
	 */
	function allowsOrigin (origin) {
	  return origin in this.originsAllowed
	}
	Authorization.prototype.allowsOrigin = allowsOrigin
	
	/**
	 * Does this authorization grant `acl:Read` access mode?
	 * @method allowsRead
	 * @return {Boolean}
	 */
	function allowsRead () {
	  return this.accessModes[acl.READ]
	}
	Authorization.prototype.allowsRead = allowsRead
	
	/**
	 * Does this authorization grant `acl:Write` access mode?
	 * @method allowsWrite
	 * @return {Boolean}
	 */
	function allowsWrite () {
	  return this.accessModes[acl.WRITE]
	}
	Authorization.prototype.allowsWrite = allowsWrite
	
	/**
	 * Does this authorization grant `acl:Append` access mode?
	 * @method allowsAppend
	 * @return {Boolean}
	 */
	function allowsAppend () {
	  return this.accessModes[acl.APPEND] || this.accessModes[acl.WRITE]
	}
	Authorization.prototype.allowsAppend = allowsAppend
	
	/**
	 * Does this authorization grant `acl:Control` access mode?
	 * @method allowsControl
	 * @return {Boolean}
	 */
	function allowsControl () {
	  return this.accessModes[acl.CONTROL]
	}
	Authorization.prototype.allowsControl = allowsControl
	
	/**
	 * Compares this authorization with another one.
	 * Authorizations are equal iff they:
	 *   - Are for the same agent or group
	 *   - Are intended for the same resourceUrl
	 *   - Grant the same access modes
	 *   - Have the same `inherit`/`acl:default` flag
	 *   - Contain the same `mailto:` agent aliases.
	 *   - Has the same allowed origins
	 * @method equals
	 * @param auth {Authorization}
	 * @return {Boolean}
	 */
	function equals (auth) {
	  var sameAgent = this.agent === auth.agent
	  var sameGroup = this.group === auth.group
	  var sameUrl = this.resourceUrl === auth.resourceUrl
	  var myModeKeys = Object.keys(this.accessModes)
	  var authModeKeys = Object.keys(auth.accessModes)
	  var sameNumberModes = myModeKeys.length === authModeKeys.length
	  var sameInherit =
	    JSON.stringify(this.inherited) === JSON.stringify(auth.inherited)
	  var sameModes = true
	  myModeKeys.forEach(function (key) {
	    if (!auth.accessModes[key]) { sameModes = false }
	  })
	  var sameMailTos = JSON.stringify(this.mailTo) === JSON.stringify(auth.mailTo)
	  var sameOrigins =
	    JSON.stringify(this.originsAllowed) === JSON.stringify(auth.originsAllowed)
	  return sameAgent && sameGroup && sameUrl && sameNumberModes && sameModes &&
	      sameInherit && sameMailTos && sameOrigins
	}
	Authorization.prototype.equals = equals
	
	/**
	 * Returns a hashed combination of agent/group webId and resourceUrl. Used
	 * internally as a key to store this authorization in a PermissionSet.
	 * @method hashFragment
	 * @private
	 * @throws {Error} Errors if either the webId or the resourceUrl are not set.
	 * @return {String} hash({webId}-{resourceUrl})
	 */
	function hashFragment () {
	  if (!this.webId || !this.resourceUrl) {
	    throw new Error('Cannot call hashFragment() on an incomplete authorization')
	  }
	  var hashFragment = hashFragmentFor(this.webId(), this.resourceUrl)
	  return hashFragment
	}
	Authorization.prototype.hashFragment = hashFragment
	
	/**
	 * Returns whether or not this authorization is for an agent (vs a group).
	 * @method isAgent
	 * @return {Boolean} Truthy value if agent is set
	 */
	function isAgent () {
	  return this.agent
	}
	Authorization.prototype.isAgent = isAgent
	
	/**
	 * Returns whether or not this authorization is empty (that is, whether it has
	 * any access modes like Read, Write, etc, set on it)
	 * @method isEmpty
	 * @return {Boolean}
	 */
	function isEmpty () {
	  return Object.keys(this.accessModes).length === 0
	}
	Authorization.prototype.isEmpty = isEmpty
	
	/**
	 * Is this authorization intended for the foaf:Agent group (that is, everyone)?
	 * @method isPublic
	 * @return {Boolean}
	 */
	function isPublic () {
	  return this.group === acl.EVERYONE
	}
	Authorization.prototype.isPublic = isPublic
	
	/**
	 * Returns whether or not this authorization is for a group (vs an agent).
	 * @method isGroup
	 * @return {Boolean} Truthy value if group is set
	 */
	function isGroup () {
	  return this.group
	}
	Authorization.prototype.isGroup = isGroup
	
	/**
	 * Returns whether this authorization is for a container and should be inherited
	 * (that is, contain `acl:default`).
	 * This is a helper function (instead of the raw attribute) to match the rest
	 * of the api.
	 * @method isInherited
	 * @return {Boolean}
	 */
	function isInherited () {
	  return this.inherited
	}
	Authorization.prototype.isInherited = isInherited
	
	/**
	 * Returns whether this authorization is valid (ready to be serialized into
	 * an RDF graph ACL resource). This requires all three of the following:
	 *   1. Either an agent or an agentClass/group (returned by `webId()`)
	 *   2. A resource URL (`acl:accessTo`)
	 *   3. At least one access mode (read, write, etc) (returned by `isEmpty()`)
	 * @method isValid
	 * @return {Boolean}
	 */
	function isValid () {
	  return this.webId() &&
	    this.resourceUrl &&
	    !this.isEmpty()
	}
	Authorization.prototype.isValid = isValid
	
	/**
	 * Merges the access modes of a given authorization with the access modes of
	 * this one (Set union).
	 * @method mergeWith
	 * @param auth
	 * @throws {Error} Error if the other authorization is for a different webId
	 *   or resourceUrl (`acl:accessTo`)
	 */
	function mergeWith (auth) {
	  if (this.hashFragment() !== auth.hashFragment()) {
	    throw new Error('Cannot merge authorizations with different agent id or resource url (accessTo)')
	  }
	  for (var accessMode in auth.accessModes) {
	    this.addMode(accessMode)
	  }
	}
	Authorization.prototype.mergeWith = mergeWith
	
	/**
	 * Returns an array of RDF statements representing this authorization.
	 * Used by `PermissionSet.serialize()`.
	 * @method rdfStatements
	 * @return {Array<Statement>} List of RDF statements representing this Auth,
	 *   or an empty array if this authorization is invalid.
	 */
	function rdfStatements () {
	  // Make sure the authorization has at least one agent/group and `accessTo`
	  if (!this.webId() || !this.resourceUrl) {
	    return []  // This Authorization is invalid, return empty array
	  }
	  var statement
	  var fragment = rdf.sym('#' + this.hashFragment())
	  var statements = [
	    rdf.st(
	      fragment,
	      vocab.rdf('type'),
	      vocab.acl('Authorization'))
	  ]
	  if (this.agent) {
	    statement = rdf.st(fragment, vocab.acl('agent'), rdf.sym(this.agent))
	    statements.push(statement)
	  }
	  if (this.mailTo.length > 0) {
	    this.mailTo.forEach(function (agentMailto) {
	      statement = rdf.st(fragment, vocab.acl('agent'),
	        rdf.sym('mailto:' + agentMailto))
	      statements.push(statement)
	    })
	  }
	  if (this.group) {
	    statement = rdf.st(fragment, vocab.acl('agentClass'), rdf.sym(this.group))
	    statements.push(statement)
	  }
	  statement = rdf.st(fragment, vocab.acl('accessTo'), rdf.sym(this.resourceUrl))
	  statements.push(statement)
	  var modes = Object.keys(this.accessModes)
	  modes.forEach(function (accessMode) {
	    statement = rdf.st(fragment, vocab.acl('mode'), rdf.sym(accessMode))
	    statements.push(statement)
	  })
	  if (this.inherited) {
	    statement = rdf.st(fragment, vocab.acl('defaultForNew'),
	      rdf.sym(this.resourceUrl))
	    statements.push(statement)
	  }
	  this.allOrigins().forEach(function (origin) {
	    statement = rdf.st(fragment, vocab.acl('origin'), rdf.sym(origin))
	    statements.push(statement)
	  })
	  return statements
	}
	Authorization.prototype.rdfStatements = rdfStatements
	
	/**
	 * Removes one or more access modes from this authorization.
	 * @method removeMode
	 * @param accessMode {String|Statement|Array<String>|Array<Statement>} URL
	 *   representation of the access mode, or an RDF `acl:mode` triple.
	 * @returns {removeMode}
	 */
	function removeMode (accessMode) {
	  var self = this
	  if (Array.isArray(accessMode)) {
	    accessMode.forEach(function (ea) {
	      self.removeModeSingle(ea)
	    })
	  } else {
	    self.removeModeSingle(accessMode)
	  }
	  return self
	}
	Authorization.prototype.removeMode = removeMode
	
	/**
	 * Removes a single access mode from this authorization. Internal use only
	 * (used by `removeMode()`).
	 * @method removeModeSingle
	 * @private
	 * @param accessMode {String|Statement} URI or RDF statement
	 */
	function removeModeSingle (accessMode) {
	  if (typeof accessMode !== 'string') {
	    accessMode = accessMode.object.uri
	  }
	  delete this.accessModes[accessMode]
	}
	Authorization.prototype.removeModeSingle = removeModeSingle
	
	/**
	 * Removes one or more allowed origins from this authorization.
	 * @method removeOrigin
	 * @param origin {String|Statement|Array<String>|Array<Statement>} URL
	 *   representation of the access mode, or an RDF `acl:mode` triple.
	 * @returns {removeMode}
	 */
	function removeOrigin (accessMode) {
	  var self = this
	  if (Array.isArray(accessMode)) {
	    accessMode.forEach(function (ea) {
	      self.removeOriginSingle(ea)
	    })
	  } else {
	    self.removeOriginSingle(accessMode)
	  }
	  return self
	}
	Authorization.prototype.removeOrigin = removeOrigin
	
	/**
	 * Removes a single allowed origin from this authorization. Internal use only
	 * (used by `removeOrigin()`).
	 * @method removeOriginSingle
	 * @private
	 * @param origin {String|Statement} URI or RDF statement
	 */
	function removeOriginSingle (origin) {
	  if (typeof origin !== 'string') {
	    origin = origin.object.uri
	  }
	  delete this.originsAllowed[origin]
	}
	Authorization.prototype.removeOriginSingle = removeOriginSingle
	
	/**
	 * Sets the agent WebID for this authorization. Implemented as `setAgent()`
	 * setter method to enforce mutual exclusivity with `group` property, until
	 * ES6 setter methods become available.
	 * @method setAgent
	 * @param agent {String|Statement} Agent URL (or `acl:agent` RDF triple).
	 */
	function setAgent (agent) {
	  if (typeof agent !== 'string') {
	    // This is an RDF statement
	    agent = agent.object.uri
	  }
	  if (agent === acl.EVERYONE) {
	    this.setPublic()
	  } else if (this.group) {
	    throw new Error('Cannot set agent, authorization already has a group set')
	  }
	  if (agent.startsWith('mailto:')) {
	    this.addMailTo(agent)
	  } else {
	    this.agent = agent
	  }
	}
	Authorization.prototype.setAgent = setAgent
	
	/**
	 * Sets the group WebID for this authorization. Implemented as `setGroup()`
	 * setter method to enforce mutual exclusivity with `agent` property, until
	 * ES6 setter methods become available.
	 * @method setGroup
	 * @param agentClass {String|Statement} Group URL (or `acl:agentClass` RDF
	 *   triple).
	 */
	function setGroup (agentClass) {
	  if (typeof agentClass !== 'string') {
	    // This is an RDF statement
	    agentClass = agentClass.object.uri
	  }
	  if (this.agent) {
	    throw new Error('Cannot set group, authorization already has an agent set')
	  }
	  this.group = agentClass
	}
	Authorization.prototype.setGroup = setGroup
	
	/**
	 * Sets the authorization's group to `foaf:Agent`. Convenience method.
	 * @method setPublic
	 */
	function setPublic () {
	  this.setGroup(acl.EVERYONE)
	}
	Authorization.prototype.setPublic = setPublic
	
	/**
	 * Returns the agent or group's WebID for this authorization.
	 * @method webId
	 * @return {String}
	 */
	function webId () {
	  return this.agent || this.group
	}
	Authorization.prototype.webId = webId
	
	// --- Standalone (non-instance) functions --
	
	/**
	 * Utility method that creates a hash fragment key for this authorization.
	 * Used with graph serialization to RDF, and as a key to store authorizations
	 * in a PermissionSet. Exported (mainly for use in PermissionSet).
	 * @method hashFragmentFor
	 * @param webId {String}
	 * @param resourceUrl {String}
	 * @return {String}
	 */
	function hashFragmentFor (webId, resourceUrl) {
	  var hashKey = webId + '-' + resourceUrl
	  return hash.unique(hashKey)
	}
	
	module.exports = Authorization
	module.exports.acl = acl
	module.exports.INHERIT = INHERIT
	module.exports.hashFragmentFor = hashFragmentFor


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(227);

/***/ },
/* 227 */
/***/ function(module, exports) {

	
	/*
		shorthash
		(c) 2013 Bibig
		
		https://github.com/bibig/node-shorthash
		shorthash may be freely distributed under the MIT license.
	*/
	
	exports.bitwise = bitwise;
	exports.binaryTransfer = binaryTransfer;
	exports.unique = unique;
	exports.random = random;
	
	// refer to: http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
	function bitwise(str){
		var hash = 0;
		if (str.length == 0) return hash;
		for (var i = 0; i < str.length; i++) {
			var ch = str.charCodeAt(i);
			hash = ((hash<<5)-hash) + ch;
			hash = hash & hash; // Convert to 32bit integer
		}
		return hash;
	}
	
	// 10进制转化成62进制以内的进制
	// convert 10 binary to customized binary, max is 62
	function binaryTransfer(integer, binary) {
		binary = binary || 62;
		var stack = [];
		var num;
		var result = '';
		var sign = integer < 0 ? '-' : '';
		
		function table (num) {
			var t = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			return t[num];
		}
		
		integer = Math.abs(integer);
		
		while (integer >= binary) {
			num = integer % binary;
			integer = Math.floor(integer / binary);
			stack.push(table(num));
		}
		
		if (integer > 0) {
			stack.push(table(integer));
		}
		
		for (var i = stack.length - 1; i >= 0; i--) {
			result += stack[i];
		} 
		
		return sign + result;
	}
	
	
	/**
	 * why choose 61 binary, because we need the last element char to replace the minus sign
	 * eg: -aGtzd will be ZaGtzd
	 */
	function unique (text) {
		var id = binaryTransfer(bitwise(text), 61);
		return id.replace('-', 'Z');
	}
	
	function random (_len) {
		/*
		var len = _len || 8 ;
		return require('crypto').randomBytes(len).toString('hex');
		*/
		
		var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
		var rs = '';
		var len = _len || 8 ;
		for (var i=0; i< len; i++) {
			var pos = Math.floor( Math.random() * chars.length);
			rs += chars.substring(pos, pos + 1);
		}
		return rs;
	}

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides a hashmap of relevant vocabs / namespaces.
	 * Usage:
	 *
	 *   ```
	 *   var solid = require('solid')
	 *   var vocab = solid.vocab
	 *   console.log(vocab.foaf('name'))  // -> <http://xmlns.com/foaf/0.1/name>
	 *   ```
	 * @module vocab
	 */
	
	var ns = __webpack_require__(229)
	
	var vocab = {
	  'acl': ns('http://www.w3.org/ns/auth/acl#'),
	  'dct': ns('http://purl.org/dc/terms/'),
	  'foaf': ns('http://xmlns.com/foaf/0.1/'),
	  'ldp': ns('http://www.w3.org/ns/ldp#'),
	  'owl': ns('http://www.w3.org/2002/07/owl#'),
	  'pim': ns('http://www.w3.org/ns/pim/space#'),
	  'rdf': ns('http://www.w3.org/1999/02/22-rdf-syntax-ns#'),
	  'rdfs': ns('http://www.w3.org/2000/01/rdf-schema#'),
	  'schema': ns('http://schema.org/'),
	  'sioc': ns('http://rdfs.org/sioc/ns#'),
	  'solid': ns('http://www.w3.org/ns/solid/terms#'),
	  'vcard': ns('http://www.w3.org/2006/vcard/ns#'),
	  'xsd': ns('http://www.w3.org/2001/XMLSchema#')
	}
	
	module.exports = vocab


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides a namespace wrapper for RDFLib's symbols
	 * @module web-rdflib
	 */
	module.exports = rdflibNamespace
	
	var rdf = __webpack_require__(230).rdflib
	var ns = __webpack_require__(283)
	
	/**
	 * Accepts a namespace URI and returns a curried wrapper for 'rdf-ns'.
	 * Usage:
	 *
	 *  ```
	 *  var ns = require('./util/rdflib-ns')
	 *  var rdfs = ns('http://www.w3.org/2000/01/rdf-schema#')
	 *
	 *  var seeAlso = rdfs('seeAlso')
	 *  console.log(seeAlso)
	 *  // -> rdf.Symbol(<http://www.w3.org/2000/01/rdf-schema#seeAlso>)
	 *  ```
	 */
	function rdflibNamespace (namespaceUri) {
	  var namespace = ns(namespaceUri)
	  // Wrap the namespace object to return an rdf.Symbol
	  var wrapper = function wrapper (term) {
	    return rdf.sym(namespace(term))
	  }
	  return wrapper
	}


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides a generic wrapper around an RDF Parser library
	 * (currently only RDFLib)
	 *  @@ RDFLib is NOT JUST a parser library. It is a quadstore and a serializer library!
	 * @module rdf-parser
	 */
	var RDFParser = {}
	if (typeof $rdf !== 'undefined') {
	  RDFParser.rdflib = $rdf // FF extension
	} else if (typeof tabulator !== 'undefined') {
	  RDFParser.rdflib = tabulator.rdf
	} else if (true) {
	  // Running with a CommonJS module system
	  RDFParser.rdflib = __webpack_require__(231)
	}
	module.exports = RDFParser


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function(root, undef) {
	/**
	* Utility functions for $rdf and the $rdf object itself
	 */
	
	if (typeof $rdf === 'undefined') {
	  var $rdf = {}
	} else {
	  throw new Error('Internal error: RDF libray has already been loaded: $rdf already exists')
	}
	
	/**
	 * @class a dummy logger
	
	 Note to implement this using the Firefox error console see
	  https://developer.mozilla.org/en/nsIConsoleService
	 */
	
	// dump("@@ rdf/util.js test RESET RDF LOGGER  $rdf.log.error)\n")
	if ($rdf.log !== undefined) {
	  // dump("WTF util.js:" + $rdf.log)
	  throw new Error('Internal Error: $rdf.log already defined,  util.js: ' + $rdf.log)
	}
	
	$rdf.log = {
	  'debug': function (x) {
	    return
	  },
	  'warn': function (x) {
	    return
	  },
	  'info': function (x) {
	    return
	  },
	  'error': function (x) {
	    return
	  },
	  'success': function (x) {
	    return
	  },
	  'msg': function (x) {
	    return
	  }
	}
	
	/**
	* @class A utility class
	 */
	
	$rdf.Util = {
	  /** A simple debugging function */
	  'output': function (o) {
	    var k = document.createElement('div')
	    k.textContent = o
	    document.body.appendChild(k)
	  },
	  /**
	  * A standard way to add callback functionality to an object
	   **
	   ** Callback functions are indexed by a 'hook' string.
	   **
	   ** They return true if they want to be called again.
	   **
	   */
	  callbackify: function (obj, callbacks) {
	    obj.callbacks = {}
	    for (var x = callbacks.length - 1; x >= 0; x--) {
	      obj.callbacks[callbacks[x]] = []
	    }
	
	    obj.addHook = function (hook) {
	      if (!obj.callbacks[hook]) {
	        obj.callbacks[hook] = []
	      }
	    }
	
	    obj.addCallback = function (hook, func) {
	      obj.callbacks[hook].push(func)
	    }
	
	    obj.removeCallback = function (hook, funcName) {
	      for (var i = 0;i < obj.callbacks[hook].length;i++) {
	        if (obj.callbacks[hook][i].name === funcName) {
	          obj.callbacks[hook].splice(i, 1)
	          return true
	        }
	      }
	      return false
	    }
	
	    obj.insertCallback = function (hook, func) {
	      obj.callbacks[hook].unshift(func)
	    }
	
	    obj.fireCallbacks = function (hook, args) {
	      var newCallbacks = []
	      var replaceCallbacks = []
	      var len = obj.callbacks[hook].length
	      var x
	      //	    $rdf.log.info('!@$ Firing '+hook+' call back with length'+len)
	      for (x = len - 1; x >= 0; x--) {
	        //		    $rdf.log.info('@@ Firing '+hook+' callback '+ obj.callbacks[hook][x])
	        if (obj.callbacks[hook][x].apply(obj, args)) {
	          newCallbacks.push(obj.callbacks[hook][x])
	        }
	      }
	
	      for (x = newCallbacks.length - 1; x >= 0; x--) {
	        replaceCallbacks.push(newCallbacks[x])
	      }
	
	      for (x = len; x < obj.callbacks[hook].length; x++) {
	        replaceCallbacks.push(obj.callbacks[hook][x])
	      }
	
	      obj.callbacks[hook] = replaceCallbacks
	    }
	  },
	
	  /**
	  * A standard way to create XMLHttpRequest objects
	  */
	  XMLHTTPFactory: function () {
	    var XMLHttpRequest
	    // Running inside the Tabulator Firefox extension
	    if (typeof tabulator !== 'undefined' && tabulator.isExtension) {
	      // Cannot use XMLHttpRequest natively, must request it through SDK
	      return Components
	        .classes['@mozilla.org/xmlextras/xmlhttprequest;1']
	        .createInstance()
	        .QueryInterface(Components.interfaces.nsIXMLHttpRequest)
	    } else if (typeof window !== 'undefined' && 'XMLHttpRequest' in window) {
	      // Running inside the browser
	      XMLHttpRequest = window.XMLHttpRequest
	      return new XMLHttpRequest()
	    } else if (typeof module !== 'undefined' && module && module.exports) {
	      // Running in Node.js
	      XMLHttpRequest = __webpack_require__(232).XMLHttpRequest
	      return new XMLHttpRequest()
	    } else if (window.ActiveXObject) {
	      try {
	        return new ActiveXObject('Msxml2.XMLHTTP')
	      } catch (e) {
	        return new ActiveXObject('Microsoft.XMLHTTP')
	      }
	    } else {
	      return false
	    }
	  },
	
	  'DOMParserFactory': function () {
	    if (tabulator && tabulator.isExtension) {
	      return Components.classes['@mozilla.org/xmlextras/domparser;1']
	        .getService(Components.interfaces.nsIDOMParser)
	    } else if (window.DOMParser) {
	      return new DOMParser()
	    } else if (window.ActiveXObject) {
	      return new ActiveXObject('Microsoft.XMLDOM')
	    } else {
	      return false
	    }
	  },
	
	  /**
	  * Returns a hash of headers and values
	  **
	  ** @@ Bug: Assumes that each header only occurs once
	  ** Also note that a , in a header value is just the same as having two headers.
	   */
	  getHTTPHeaders: function (xhr) {
	    var lines = xhr.getAllResponseHeaders().split('\n')
	    var headers = {}
	    var last
	    for (var x = 0; x < lines.length; x++) {
	      if (lines[x].length > 0) {
	        var pair = lines[x].split(': ')
	        if (typeof pair[1] === 'undefined') { // continuation
	          headers[last] += '\n' + pair[0]
	        } else {
	          last = pair[0].toLowerCase()
	          headers[last] = pair[1]
	        }
	      }
	    }
	    return headers
	  },
	
	  dtstamp: function () {
	    var now = new Date()
	    var year = now.getYear() + 1900
	    var month = now.getMonth() + 1
	    var day = now.getDate()
	    var hour = now.getUTCHours()
	    var minute = now.getUTCMinutes()
	    var second = now.getSeconds()
	    if (month < 10) month = '0' + month
	    if (day < 10) day = '0' + day
	    if (hour < 10) hour = '0' + hour
	    if (minute < 10) minute = '0' + minute
	    if (second < 10) second = '0' + second
	    return year + '-' + month + '-' + day + 'T' +
	      hour + ':' + minute + ':' + second + 'Z'
	  },
	
	  // removes all statements equal to x from a
	  RDFArrayRemove: function (a, x) {
	    for (var i = 0; i < a.length; i++) {
	      // TODO: This used to be the following, which didnt always work..why
	      // if(a[i] === x)
	      if (a[i].subject.sameTerm(x.subject) &&
	        a[i].predicate.sameTerm(x.predicate) &&
	        a[i].object.sameTerm(x.object) &&
	        a[i].why.sameTerm(x.why)) {
	        a.splice(i, 1)
	        return
	      }
	    }
	    throw new Error('RDFArrayRemove: Array did not contain ' + x + ' ' + x.why)
	  },
	
	  string_startswith: function (str, pref) { // missing library routines
	    return (str.slice(0, pref.length) === pref)
	  },
	
	  // This is the callback from the kb to the fetcher which is used to
	  // load ontologies of the data we load.
	
	  AJAR_handleNewTerm: function (kb, p, requestedBy) {
	    var sf = null
	    if (typeof kb.fetcher !== 'undefined') {
	      sf = kb.fetcher
	    } else {
	      return
	    }
	    if (p.termType !== 'symbol') return
	    var docuri = $rdf.Util.uri.docpart(p.uri)
	    var fixuri
	    if (p.uri.indexOf('#') < 0) { // No hash
	      // @@ major hack for dbpedia Categories, which spread indefinitely
	      if ($rdf.Util.string_startswith(p.uri, 'http://dbpedia.org/resource/Category:')) return
	
	      /*
	        if (string_startswith(p.uri, 'http://xmlns.com/foaf/0.1/')) {
	        fixuri = "http://dig.csail.mit.edu/2005/ajar/ajaw/test/foaf"
	        // should give HTTP 303 to ontology -- now is :-)
	        } else
	      */
	      if ($rdf.Util.string_startswith(p.uri,
	              'http://purl.org/dc/elements/1.1/') ||
	            $rdf.Util.string_startswith(p.uri, 'http://purl.org/dc/terms/')) {
	        fixuri = 'http://dublincore.org/2005/06/13/dcq'
	      // dc fetched multiple times
	      } else if ($rdf.Util.string_startswith(p.uri, 'http://xmlns.com/wot/0.1/')) {
	        fixuri = 'http://xmlns.com/wot/0.1/index.rdf'
	      } else if ($rdf.Util.string_startswith(p.uri, 'http://web.resource.org/cc/')) {
	        //            $rdf.log.warn("creative commons links to html instead of rdf. doesn't seem to content-negotiate.")
	        fixuri = 'http://web.resource.org/cc/schema.rdf'
	      }
	    }
	    if (fixuri) {
	      docuri = fixuri
	    }
	    if (sf && sf.getState(docuri) !== 'unrequested') return
	
	    if (fixuri) { // only give warning once: else happens too often
	      $rdf.log.warn('Assuming server still broken, faking redirect of <' + p.uri +
	        '> to <' + docuri + '>')
	    }
	    sf.requestURI(docuri, requestedBy)
	  }, // AJAR_handleNewTerm
	
	  ArrayIndexOf: function (arr, item, i) {
	    i || (i = 0)
	    var length = arr.length
	    if (i < 0) i = length + i
	    for (; i < length; i++) {
	      if (arr[i] === item) {
	        return i
	      }
	    }
	    return -1
	  }
	
	}
	
	// //////////////// find the variables in a graph
	//  SHALLOW
	//  used?
	//
	$rdf.Util.variablesIn = function (g) {
	  for (var i = 0; i < g.statements.length; i++) {
	    var st = g.statatements[i]
	    var vars = {}
	    if (st.subject instanceof $rdf.Variable) {
	      vars[st.subject.toNT()] = true
	    }
	    if (st.predicate instanceof $rdf.Variable) {
	      vars[st.predicate.toNT()] = true
	    }
	    if (st.object instanceof $rdf.Variable) {
	      vars[st.object.toNT()] = true
	    }
	  }
	  return vars
	}
	
	//   Heavy comparison is for repeatable canonical ordering
	$rdf.Util.heavyCompare = function (x, y, g) {
	  var nonBlank = function (x) {
	    return (x.termType === 'bnode') ? null : x
	  }
	  var signature = function (b) {
	    var lis = g.statementsMatching(x).map(function (st) {
	      return ('' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) +
	        ' ' + nonBlank(st.object))
	    }).concat(g.statementsMatching(undefined, undefined, x).map(function (st) {
	      return ('' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) +
	        ' ' + nonBlank(st.object))
	    }))
	    lis.sort()
	    return lis.join('\n')
	  }
	  if ((x.termType === 'bnode') || (y.termType === 'bnode')) {
	    if (x.compareTerm(y) === 0) return 0 // Same
	    if (signature(x) > signature(y)) return +1
	    if (signature(x) < signature(y)) return -1
	    return x.compareTerm(y)  // Too bad -- this order not canonical.
	    // throw "different bnodes indistinquishable for sorting"
	  } else {
	    return x.compareTerm(y)
	  }
	}
	
	$rdf.Util.heavyCompareSPO = function (x, y, g) {
	  var comp = $rdf.Util.heavyCompare
	  var d = comp(x.subject, y.subject, g)
	  if (d) return d
	  d = comp(x.predicate, y.predicate, g)
	  if (d) return d
	  return comp(x.object, y.object, g)
	}
	
	// /////////////////// Parse XML
	//
	// Returns: A DOM
	//
	
	$rdf.Util.parseXML = function (str, options) {
	  var dparser
	  options = options || {}
	  if ((typeof tabulator !== 'undefined' && tabulator.isExtension)) {
	    dparser = Components.classes['@mozilla.org/xmlextras/domparser;1'].getService(
	      Components.interfaces.nsIDOMParser)
	  } else if (typeof module !== 'undefined' && module && module.exports) { // Node.js
	    // var libxmljs = require('libxmljs'); // Was jsdom before 2012-01 then libxmljs but that nonstandard
	    // return libxmljs.parseXmlString(str)
	
	    // var jsdom = require('jsdom');   2012-01 though 2015-08 no worky with new Node
	    // var dom = jsdom.jsdom(str, undefined, {} );// html, level, options
	
	    var DOMParser = __webpack_require__(233).DOMParser // 2015-08 on https://github.com/jindw/xmldom
	    var dom = new DOMParser().parseFromString(str, options.contentType || 'application/xhtml+xml')
	    return dom
	  } else {
	    if (typeof window !== 'undefined' && window.DOMParser) {
	      dparser = new window.DOMParser() // seems to actually work
	    } else {
	      dparser = new DOMParser() // Doc says this works
	    }
	  }
	  return dparser.parseFromString(str, 'application/xml')
	}
	
	// ////////////////////String Utility
	// substitutes given terms for occurrnces of %s
	// not well named. Used??? - tim
	//
	$rdf.Util.string = {
	  // C++, python style %s -> subs
	  'template': function (base, subs) {
	    var baseA = base.split('%s')
	    var result = ''
	    for (var i = 0;i < subs.length;i++) {
	      subs[i] += ''
	      result += baseA[i] + subs[i]
	    }
	    return result + baseA.slice(subs.length).join()
	  }
	}
	
	//From https://github.com/linkeddata/dokieli
	$rdf.Util.domToString = function(node, options) {
	  var options = options || {}
	  var selfClosing = []
	  if ('selfClosing' in options) {
	    options.selfClosing.split(' ').forEach(function (n) {
	      selfClosing[n] = true
	    })
	  }
	  var skipAttributes = [];
	  if ('skipAttributes' in options) {
	    options.skipAttributes.split(' ').forEach(function (n) {
	      skipAttributes[n] = true
	    })
	  }
	
	  var noEsc = [false];
	
	  var dumpNode = function(node) {
	    var out = ''
	    if (typeof node.nodeType === 'undefined') return out
	    if (1 === node.nodeType) {
	      if (node.hasAttribute('class') && 'classWithChildText' in options && node.matches(options.classWithChildText.class)) {
	        out += node.querySelector(options.classWithChildText.element).textContent
	      }
	      else if (!('skipNodeWithClass' in options && node.matches('.' + options.skipNodeWithClass))) {
	        var ename = node.nodeName.toLowerCase()
	        out += "<" + ename
	
	        var attrList = []
	        for (var i = node.attributes.length - 1; i >= 0; i--) {
	          var atn = node.attributes[i]
	          if (skipAttributes.length > 0 && skipAttributes[atn.name]) continue
	          if (/^\d+$/.test(atn.name)) continue
	          if (atn.name == 'class' && 'replaceClassItemWith' in options && (atn.value.split(' ').indexOf(options.replaceClassItemWith.source) > -1)) {
	            var re = new RegExp(options.replaceClassItemWith.source, 'g')
	            atn.value = atn.value.replace(re, options.replaceClassItemWith.target).trim()
	          }
	          if (!(atn.name == 'class' && 'skipClassWithValue' in options && options.skipClassWithValue == atn.value)) {
	            attrList.push(atn.name + "=\"" + atn.value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') + "\"")
	          }
	        }
	
	        if (attrList.length > 0) {
	          if('sortAttributes' in options && options.sortAttributes) {
	            attrList.sort(function (a, b) {
	              return a.toLowerCase().localeCompare(b.toLowerCase())
	            })
	          }
	          out += ' ' + attrList.join(' ')
	        }
	
	        if (selfClosing[ename]) { out += " />"; }
	        else {
	          out += '>';
	          out += (ename == 'html') ? "\n  " : ''
	          noEsc.push(ename === "style" || ename === "script");
	          for (var i = 0; i < node.childNodes.length; i++) out += dumpNode(node.childNodes[i])
	          noEsc.pop()
	          out += (ename == 'body') ? '</' + ename + '>' + "\n" : '</' + ename + '>'
	        }
	      }
	    }
	    else if (8 === node.nodeType) {
	      //FIXME: If comments are not tabbed in source, a new line is not prepended
	      out += "<!--" + node.nodeValue + "-->"
	    }
	    else if (3 === node.nodeType || 4 === node.nodeType) {
	      //XXX: Remove new lines which were added after DOM ready
	      var nl = node.nodeValue.replace(/\n+$/, '')
	      out += noEsc[noEsc.length - 1] ? nl : nl.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
	    }
	    else {
	      console.log("Warning; Cannot handle serialising nodes of type: " + node.nodeType)
	      console.log(node)
	    }
	    return out
	  };
	
	  return dumpNode(node)
	}
	
	// Reomved 2015-08-05 timbl - unused and depended on jQuery!
	// from http://dev.jquery.com/browser/trunk/jquery/src/core.js
	// Dependency with JQuery -- we try to keep the rdflib.js and jquery libraries separate at the moment.
	/*
	$rdf.Util.extend = function () {
	    // copy reference to target object
	    var target = arguments[0] || {},
	        i = 1,
	        length = arguments.length,
	        deep = false,
	        options, name, src, copy
	
	    // Handle a deep copy situation
	    if (typeof target === "boolean") {
	        deep = target
	        target = arguments[1] || {}
	        // skip the boolean and the target
	        i = 2
	    }
	
	    // Handle case when target is a string or something (possible in deep copy)
	    if (typeof target !== "object" && !jQuery.isFunction(target)) {
	        target = {}
	    }
	
	    // extend jQuery itself if only one argument is passed
	    if (length === i) {
	        target = this
	        --i
	    }
	
	    for (; i < length; i++) {
	        // Only deal with non-null/undefined values
	        if ((options = arguments[i]) != null) {
	            // Extend the base object
	            for (name in options) {
	                src = target[name]
	                copy = options[name]
	
	                // Prevent never-ending loop
	                if (target === copy) {
	                    continue
	                }
	
	                // Recurse if we're merging object values
	                if (deep && copy && typeof copy === "object" && !copy.nodeType) {
	                    var clone
	
	                    if (src) {
	                        clone = src
	                    } else if (jQuery.isArray(copy)) {
	                        clone = []
	                    } else if (jQuery.isObject(copy)) {
	                        clone = {}
	                    } else {
	                        clone = copy
	                    }
	
	                    // Never move original objects, clone them
	                    target[name] = jQuery.extend(deep, clone, copy)
	
	                    // Don't bring in undefined values
	                } else if (copy !== undefined) {
	                    target[name] = copy
	                }
	            }
	        }
	    }
	
	    // Return the modified object
	    return target
	}
	*/
	/*
	 * Implements URI-specific functions
	 *
	 * See RFC 2386
	 *
	 * See also:
	 *   http://www.w3.org/2005/10/ajaw/uri.js
	 *   http://www.w3.org/2000/10/swap/uripath.py
	 *
	 */
	var $rdf
	var base1
	var k
	var ref
	var v
	var hasProp = {}.hasOwnProperty
	
	if (typeof $rdf === 'undefined' || $rdf === null) {
	  $rdf = {}
	}
	
	if ($rdf.Util == null) {
	  $rdf.Util = {}
	}
	
	$rdf.uri = (function () {
	  function uri () {}
	
	  uri.join = function (given, base) {
	    var baseColon
	    var baseHash
	    var baseScheme
	    var baseSingle
	    var colon
	    var lastSlash
	    var path
	    baseHash = base.indexOf('#')
	    if (baseHash > 0) {
	      base = base.slice(0, baseHash)
	    }
	    if (given.length === 0) {
	      return base
	    }
	    if (given.indexOf('#') === 0) {
	      return base + given
	    }
	    colon = given.indexOf(':')
	    if (colon >= 0) {
	      return given
	    }
	    baseColon = base.indexOf(':')
	    if (base.length === 0) {
	      return given
	    }
	    if (baseColon < 0) {
	      alert('Invalid base: ' + base + ' in join with given: ' + given)
	      return given
	    }
	    baseScheme = base.slice(0, +baseColon + 1 || 9e9)
	    if (given.indexOf('//') === 0) {
	      return baseScheme + given
	    }
	    if (base.indexOf('//', baseColon) === baseColon + 1) {
	      baseSingle = base.indexOf('/', baseColon + 3)
	      if (baseSingle < 0) {
	        if (base.length - baseColon - 3 > 0) {
	          return base + '/' + given
	        } else {
	          return baseScheme + given
	        }
	      }
	    } else {
	      baseSingle = base.indexOf('/', baseColon + 1)
	      if (baseSingle < 0) {
	        if (base.length - baseColon - 1 > 0) {
	          return base + '/' + given
	        } else {
	          return baseScheme + given
	        }
	      }
	    }
	    if (given.indexOf('/') === 0) {
	      return base.slice(0, baseSingle) + given
	    }
	    path = base.slice(baseSingle)
	    lastSlash = path.lastIndexOf('/')
	    if (lastSlash < 0) {
	      return baseScheme + given
	    }
	    if (lastSlash >= 0 && lastSlash < path.length - 1) {
	      path = path.slice(0, +lastSlash + 1 || 9e9)
	    }
	    path += given
	    while (path.match(/[^\/]*\/\.\.\//)) {
	      path = path.replace(/[^\/]*\/\.\.\//, '')
	    }
	    path = path.replace(/\.\//g, '')
	    path = path.replace(/\/\.$/, '/')
	    return base.slice(0, baseSingle) + path
	  }
	
	  uri.commonHost = new RegExp('^[-_a-zA-Z0-9.]+:(//[^/]*)?/[^/]*$')
	
	  uri.hostpart = function (u) {
	    var m
	    m = /[^\/]*\/\/([^\/]*)\//.exec(u)
	    if (m) {
	      return m[1]
	    } else {
	      return ''
	    }
	  }
	
	  uri.refTo = function (base, uri) {
	    var c
	    var i
	    // var j
	    var k
	    var l
	    var len
	    var len1
	    var n
	    var o
	    var p
	    var q
	    var ref
	    var ref1
	    var s
	    if (!base) {
	      return uri
	    }
	    if (base === uri) {
	      return ''
	    }
	    for (i = o = 0, len = uri.length; o < len; i = ++o) {
	      c = uri[i]
	      if (c !== base[i]) {
	        break
	      }
	    }
	    if (base.slice(0, i).match($rdf.Util.uri.commonHost)) {
	      k = uri.indexOf('//')
	      if (k < 0) {
	        k = -2
	      }
	      l = uri.indexOf('/', k + 2)
	      if (uri[l + 1] !== '/' && base[l + 1] !== '/' && uri.slice(0, l) === base.slice(0, l)) {
	        return uri.slice(l)
	      }
	    }
	    if (uri[i] === '#' && base.length === i) {
	      return uri.slice(i)
	    }
	    while (i > 0 && uri[i - 1] !== '/') {
	      i--
	    }
	    if (i < 3) {
	      return uri
	    }
	    if (base.indexOf('//', i - 2) > 0 || uri.indexOf('//', i - 2) > 0) {
	      return uri
	    }
	    if (base.indexOf(':', i) > 0) {
	      return uri
	    }
	    n = 0
	    ref = base.slice(i)
	    for (p = 0, len1 = ref.length; p < len1; p++) {
	      c = ref[p]
	      if (c === '/') {
	        n++
	      }
	    }
	    if (n === 0 && i < uri.length && uri[i] === '#') {
	      return './' + uri.slice(i)
	    }
	    if (n === 0 && i === uri.length) {
	      return './'
	    }
	    s = ''
	    if (n > 0) {
	      for (j = q = 1, ref1 = n; 1 <= ref1 ? q <= ref1 : q >= ref1; j = 1 <= ref1 ? ++q : --q) {
	        s += '../'
	      }
	    }
	    return s + uri.slice(i)
	  }
	
	  uri.docpart = function (uri) {
	    var i
	    i = uri.indexOf('#')
	    if (i < 0) {
	      return uri
	    } else {
	      return uri.slice(0, i)
	    }
	  }
	
	  uri.document = function (x) {
	    return $rdf.sym(uri.docpart(x.uri))
	  }
	
	  uri.protocol = function (uri) {
	    var i
	    i = uri.indexOf(':')
	    if (i < 0) {
	      return null
	    } else {
	      return uri.slice(0, i)
	    }
	  }
	
	  return uri
	})()
	
	$rdf.Util.uri = $rdf.uri
	
	if ((typeof module !== 'undefined' && module !== null ? module.exports : void 0) != null) {
	  if ((base1 = module.exports).Util == null) {
	    base1.Util = {}
	  }
	  ref = $rdf.Util
	  for (k in ref) {
	    if (!hasProp.call(ref, k)) continue
	    v = ref[k]
	    module.exports.Util[k] = v
	  }
	  module.exports.uri = $rdf.uri
	}
	/*
	* These are the classes corresponding to the RDF and N3 data models
	*
	* Designed to look like rdflib and cwm
	*
	*/
	var $rdf
	var k
	var v
	var extend = function (child, parent) {
	  for (var key in parent) {
	    if (hasProp.call(parent, key)) {
	      child[key] = parent[key]
	    }
	  }
	  function Ctor () {
	    this.constructor = child
	  }
	  Ctor.prototype = parent.prototype
	  child.prototype = new Ctor()
	  child.__super__ = parent.prototype; return child
	}
	var hasProp = {}.hasOwnProperty
	var indexOf = [].indexOf || function (item) {
	  for (var i = 0, l = this.length; i < l; i++) {
	    if (i in this && this[i] === item) return i
	  }
	  return -1
	}
	
	if (typeof $rdf === 'undefined' || $rdf === null) {
	  $rdf = {}
	}
	
	/*
	the superclass of all RDF Statement objects, that is
	$rdf.NamedNode, $rdf.Literal, $rdf.BlankNode
	No class extends this yet, but it could be a place to put common behavior.
	*/
	$rdf.Node = (function () {
	  function Node () {}
	
	  Node.prototype.substitute = function (bindings) {
	    return this
	  }
	
	  return Node
	})()
	
	// Singleton subclass of an empty Collection
	$rdf.Empty = (function (superClass) {
	  extend(Empty, superClass)
	
	  function Empty () {
	    return Empty.__super__.constructor.apply(this, arguments)
	  }
	
	  Empty.prototype.termType = 'empty'
	
	  Empty.prototype.toString = function () {
	    return '()'
	  }
	
	  Empty.prototype.toNT = Empty.prototype.toString
	
	  return Empty
	})($rdf.Node)
	
	/*
	A named node in an RDF graph
	todo: badly named.
	No, formally a URI is a string, this is a node whose name is a URI.
	Connolly pointed out it isa symbol on the language.
	@param uri the uri as string
	*/
	$rdf.NamedNode = (function (superClass) {
	  extend(NamedNode, superClass)
	
	  function NamedNode (uri1) {
	    this.uri = uri1
	  }
	
	  NamedNode.prototype.termType = 'symbol'
	
	  NamedNode.prototype.toString = function () {
	    return '<' + this.uri + '>'
	  }
	
	  NamedNode.prototype.toNT = NamedNode.prototype.toString
	
	  NamedNode.prototype.doc = function () {
	    if (this.uri.indexOf('#') < 0) {
	      return this
	    } else {
	      return new $rdf.NamedNode(this.uri.split('#')[0])
	    }
	  }
	
	  // $rdf node for the containing directory, ending in slash.
	  NamedNode.prototype.dir = function () {
	    var str = this.uri.split('#')[0]
	    var p = str.slice(0, -1).lastIndexOf('/')
	    var q = str.indexOf('//')
	    if ((q >= 0 && p < q + 2) || p < 0) return null
	    return new $rdf.NamedNode(str.slice(0, p + 1))
	  }
	
	  NamedNode.prototype.sameTerm = function (other) {
	    if (!other) {
	      return false
	    }
	    return (this.termType === other.termType) && (this.uri === other.uri)
	  }
	
	  NamedNode.prototype.compareTerm = function (other) {
	    if (this.classOrder < other.classOrder) {
	      return -1
	    }
	    if (this.classOrder > other.classOrder) {
	      return +1
	    }
	    if (this.uri < other.uri) {
	      return -1
	    }
	    if (this.uri > other.uri) {
	      return +1
	    }
	    return 0
	  }
	
	  NamedNode.prototype.XSDboolean =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#boolean')
	
	  NamedNode.prototype.XSDdecimal =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#decimal')
	
	  NamedNode.prototype.XSDfloat =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#float')
	
	  NamedNode.prototype.XSDinteger =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#integer')
	
	  NamedNode.prototype.XSDdateTime =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#dateTime')
	
	  NamedNode.prototype.integer =
	    new NamedNode('http://www.w3.org/2001/XMLSchema#integer')
	
	  return NamedNode
	})($rdf.Node)
	
	if ($rdf.NextId != null) {
	  $rdf.log.error('Attempt to re-zero existing blank node id counter at ' + $rdf.NextId)
	} else {
	  $rdf.NextId = 0
	}
	
	$rdf.NTAnonymousNodePrefix = '_:n'
	
	$rdf.BlankNode = (function (superClass) {
	  extend(BlankNode, superClass)
	
	  function BlankNode (id) {
	    this.id = $rdf.NextId++
	    this.value = id || this.id.toString()
	  }
	
	  BlankNode.prototype.termType = 'bnode'
	
	  BlankNode.prototype.toNT = function () {
	    return $rdf.NTAnonymousNodePrefix + this.id
	  }
	
	  BlankNode.prototype.toString = BlankNode.prototype.toNT
	
	  BlankNode.prototype.sameTerm = function (other) {
	    if (!other) {
	      return false
	    }
	    return (this.termType === other.termType) && (this.id === other.id)
	  }
	
	  BlankNode.prototype.compareTerm = function (other) {
	    if (this.classOrder < other.classOrder) {
	      return -1
	    }
	    if (this.classOrder > other.classOrder) {
	      return +1
	    }
	    if (this.id < other.id) {
	      return -1
	    }
	    if (this.id > other.id) {
	      return +1
	    }
	    return 0
	  }
	
	  return BlankNode
	})($rdf.Node)
	
	$rdf.Literal = (function (superClass) {
	  extend(Literal, superClass)
	
	  function Literal (value1, lang1, datatype) {
	    this.value = value1
	    this.lang = lang1
	    this.datatype = datatype
	    if (!this.lang) {
	      this.lang = void 0  // set to undefined
	    }
	    if (!this.datatype) {
	      this.datatype = void 0  // set to undefined
	    }
	  }
	
	  Literal.prototype.termType = 'literal'
	
	  Literal.prototype.toString = function () {
	    return '' + this.value
	  }
	
	  Literal.prototype.toNT = function () {
	    var str
	    str = this.value
	    if (typeof str === !'string') {
	      if (typeof str === 'number') {
	        return '' + str
	      }
	      throw Error('Value of RDF literal is not string: ' + str)
	    }
	    str = str.replace(/\\/g, '\\\\')
	    str = str.replace(/\"/g, '\\"')
	    str = str.replace(/\n/g, '\\n')
	    str = '"' + str + '"'
	    if (this.datatype) {
	      str += '^^' + this.datatype.toNT()
	    }
	    if (this.lang) {
	      str += '@' + this.lang
	    }
	    return str
	  }
	
	  Literal.prototype.sameTerm = function (other) {
	    if (!other) {
	      return false
	    }
	    return (this.termType === other.termType) && (this.value === other.value) && (this.lang === other.lang) && ((!this.datatype && !other.datatype) || (this.datatype && this.datatype.sameTerm(other.datatype)))
	  }
	
	  Literal.prototype.compareTerm = function (other) {
	    if (this.classOrder < other.classOrder) {
	      return -1
	    }
	    if (this.classOrder > other.classOrder) {
	      return +1
	    }
	    if (this.value < other.value) {
	      return -1
	    }
	    if (this.value > other.value) {
	      return +1
	    }
	    return 0
	  }
	
	  return Literal
	})($rdf.Node)
	
	$rdf.Collection = (function (superClass) {
	  extend(Collection, superClass)
	
	  function Collection (initial) {
	    var i
	    var len
	    var s
	    this.id = $rdf.NextId++
	    this.elements = []
	    this.closed = false
	    if (typeof initial !== 'undefined') {
	      for (i = 0, len = initial.length; i < len; i++) {
	        s = initial[i]
	        this.elements.push($rdf.term(s))
	      }
	    }
	  }
	
	  Collection.prototype.termType = 'collection'
	
	  Collection.prototype.toNT = function () {
	    return $rdf.NTAnonymousNodePrefix + this.id
	  }
	
	  Collection.prototype.toString = function () {
	    return '(' + this.elements.join(' ') + ')'
	  }
	
	  Collection.prototype.substitute = function (bindings) {
	    var s
	    return new $rdf.Collection(function () {
	      var i
	      var len
	      var ref
	      var results1
	      ref = this.elements
	      results1 = []
	      for (i = 0, len = ref.length; i < len; i++) {
	        s = ref[i]
	        results1.push(s.substitute(bindings))
	      }
	      return results1
	    }).call(this)
	  }
	
	  Collection.prototype.append = function (el) {
	    return this.elements.push(el)
	  }
	
	  Collection.prototype.unshift = function (el) {
	    return this.elements.unshift(el)
	  }
	
	  Collection.prototype.shift = function () {
	    return this.elements.shift()
	  }
	
	  Collection.prototype.close = function () {
	    this.closed = true
	    return this.closed
	  }
	
	  return Collection
	})($rdf.Node)
	
	$rdf.Collection.prototype.sameTerm = $rdf.BlankNode.prototype.sameTerm
	
	$rdf.Collection.prototype.compareTerm = $rdf.BlankNode.prototype.compareTerm
	
	/*
	function to transform a value into an $rdf.Node
	@param val can be an rdf.Node, a date, string, number, boolean, or undefined. RDF Nodes are returned as is,
	undefined as undefined
	*/
	$rdf.term = function (val) {
	  var d2
	  var dt
	  var elt
	  var i
	  var len
	  var value
	  var x
	  switch (typeof val) {
	    case 'object':
	      if (val instanceof Date) {
	        d2 = function (x) {
	          return ('' + (100 + x)).slice(1, 3)
	        }
	        value = '' + val.getUTCFullYear() + '-' + d2(val.getUTCMonth() + 1) + '-' + d2(val.getUTCDate()) + 'T' + d2(val.getUTCHours()) + ':' + d2(val.getUTCMinutes()) + ':' + d2(val.getUTCSeconds()) + 'Z'
	        return new $rdf.Literal(value, void 0, $rdf.NamedNode.prototype.XSDdateTime)
	      } else if (val instanceof Array) {
	        x = new $rdf.Collection()
	        for (i = 0, len = val.length; i < len; i++) {
	          elt = val[i]
	          x.append($rdf.term(elt))
	        }
	        return x
	      }
	      return val
	    case 'string':
	      return new $rdf.Literal(val)
	    case 'number':
	      if (('' + val).indexOf('e') >= 0) {
	        dt = $rdf.NamedNode.prototype.XSDfloat
	      } else if (('' + val).indexOf('.') >= 0) {
	        dt = $rdf.NamedNode.prototype.XSDdecimal
	      } else {
	        dt = $rdf.NamedNode.prototype.XSDinteger
	      }
	      return new $rdf.Literal('' + val, void 0, dt)
	    case 'boolean':
	      return new $rdf.Literal((val ? '1' : '0'), void 0, $rdf.NamedNode.prototype.XSDboolean)
	    case 'undefined':
	      return void 0
	  }
	  throw new Error("Can't make term from " + val + ' of type ' + typeof val)
	}
	
	$rdf.Statement = (function () {
	  function Statement (subject, predicate, object, why) {
	    this.subject = $rdf.term(subject)
	    this.predicate = $rdf.term(predicate)
	    this.object = $rdf.term(object)
	    if (why != null) {
	      this.why = why
	    }
	  }
	
	  Statement.prototype.toNT = function () {
	    return [this.subject.toNT(), this.predicate.toNT(), this.object.toNT()].join(' ') + ' .'
	  }
	
	  Statement.prototype.toString = Statement.prototype.toNT
	
	  Statement.prototype.substitute = function (bindings) {
	    return new $rdf.Statement(this.subject.substitute(bindings), this.predicate.substitute(bindings), this.object.substitute(bindings), this.why)
	  }
	
	  return Statement
	})()
	
	$rdf.st = function (subject, predicate, object, why) {
	  return new $rdf.Statement(subject, predicate, object, why)
	}
	
	$rdf.Formula = (function (superClass) {
	  extend(Formula, superClass)
	
	  function Formula () {
	    this.statements = []
	    this.constraints = []
	    this.initBindings = []
	    this.optional = []
	  }
	
	  Formula.prototype.termType = 'formula'
	
	  Formula.prototype.toNT = function () {
	    return '{' + this.statements.join('\n') + '}'
	  }
	
	  Formula.prototype.toString = Formula.prototype.toNT
	
	  Formula.prototype.add = function (s, p, o, why) {
	    return this.statements.push(new $rdf.Statement(s, p, o, why))
	  }
	
	  Formula.prototype.addStatement = function (st) {
	    return this.statements.push(st)
	  }
	
	  Formula.prototype.substitute = function (bindings) {
	    var g
	    var i
	    var len
	    var ref
	    var s
	    g = new $rdf.Formula()
	    ref = this.statements
	    for (i = 0, len = ref.length; i < len; i++) {
	      s = ref[i]
	      g.addStatement(s.substitute(bindings))
	    }
	    return g
	  }
	
	  Formula.prototype.sym = function (uri, name) {
	    if (name) {
	      throw new Error('This feature (kb.sym with 2 args) is removed. Do not assume prefix mappings.')
	    }
	    return new $rdf.NamedNode(uri)
	  }
	
	  Formula.prototype.literal = function (val, lang, dt) {
	    return new $rdf.Literal('' + val, lang, dt)
	  }
	
	  Formula.prototype.bnode = function (id) {
	    return new $rdf.BlankNode(id)
	  }
	
	  Formula.prototype.formula = function () {
	    return new $rdf.Formula()
	  }
	
	  Formula.prototype.collection = function () {
	    return new $rdf.Collection()
	  }
	
	  Formula.prototype.list = function (values) {
	    var elt
	    var i
	    var len
	    var r
	    r = new $rdf.Collection()
	    if (values) {
	      for (i = 0, len = values.length; i < len; i++) {
	        elt = values[i]
	        r.append(elt)
	      }
	    }
	    return r
	  }
	
	  Formula.prototype.variable = function (name) {
	    return new $rdf.Variable(name)
	  }
	
	  Formula.prototype.ns = function (nsuri) {
	    return function (ln) {
	      return new $rdf.NamedNode(nsuri + (ln != null ? ln : ''))
	    }
	  }
	
	  /*
	  transform an NTriples string format into an $rdf.Node
	  The bnode bit should not be used on program-external values; designed
	  for internal work such as storing a bnode id in an HTML attribute.
	  This will only parse the strings generated by the vaious toNT() methods.
	  */
	
	  Formula.prototype.fromNT = function (str) {
	    var dt
	    var k
	    var lang
	    var x
	    switch (str[0]) {
	      case '<':
	        return $rdf.sym(str.slice(1, -1))
	      case '"':
	        lang = void 0
	        dt = void 0
	        k = str.lastIndexOf('"')
	        if (k < str.length - 1) {
	          if (str[k + 1] === '@') {
	            lang = str.slice(k + 2)
	          } else if (str.slice(k + 1, k + 3) === '^^') {
	            dt = $rdf.fromNT(str.slice(k + 3))
	          } else {
	            throw new Error("Can't convert string from NT: " + str)
	          }
	        }
	        str = str.slice(1, k)
	        str = str.replace(/\\"/g, '"')
	        str = str.replace(/\\n/g, '\n')
	        str = str.replace(/\\\\/g, '\\')
	        return $rdf.lit(str, lang, dt)
	      case '_':
	        x = new $rdf.BlankNode()
	        x.id = parseInt(str.slice(3), 10)
	        $rdf.NextId--
	        return x
	      case '?':
	        return new $rdf.Variable(str.slice(1))
	    }
	    throw new Error("Can't convert from NT: " + str)
	  }
	
	  Formula.prototype.sameTerm = function (other) {
	    if (!other) {
	      return false
	    }
	    return this.hashString() === other.hashString()
	  }
	
	  Formula.prototype.each = function (s, p, o, w) {
	    var elt
	    var i
	    var l
	    var len
	    var len1
	    var len2
	    var len3
	    var m
	    var q
	    var results
	    var sts
	    results = []
	    sts = this.statementsMatching(s, p, o, w, false)
	    if (s == null) {
	      for (i = 0, len = sts.length; i < len; i++) {
	        elt = sts[i]
	        results.push(elt.subject)
	      }
	    } else if (p == null) {
	      for (l = 0, len1 = sts.length; l < len1; l++) {
	        elt = sts[l]
	        results.push(elt.predicate)
	      }
	    } else if (o == null) {
	      for (m = 0, len2 = sts.length; m < len2; m++) {
	        elt = sts[m]
	        results.push(elt.object)
	      }
	    } else if (w == null) {
	      for (q = 0, len3 = sts.length; q < len3; q++) {
	        elt = sts[q]
	        results.push(elt.why)
	      }
	    }
	    return results
	  }
	
	  Formula.prototype.any = function (s, p, o, w) {
	    var st
	    st = this.anyStatementMatching(s, p, o, w)
	    if (st == null) {
	      return void 0
	    } else if (s == null) {
	      return st.subject
	    } else if (p == null) {
	      return st.predicate
	    } else if (o == null) {
	      return st.object
	    }
	    return void 0
	  }
	
	  Formula.prototype.holds = function (s, p, o, w) {
	    var st
	    st = this.anyStatementMatching(s, p, o, w)
	    return st != null
	  }
	
	  Formula.prototype.holdsStatement = function (st) {
	    return this.holds(st.subject, st.predicate, st.object, st.why)
	  }
	
	  Formula.prototype.the = function (s, p, o, w) {
	    var x
	    x = this.any(s, p, o, w)
	    if (x == null) {
	      $rdf.log.error('No value found for the() {' + s + ' ' + p + ' ' + o + '}.')
	    }
	    return x
	  }
	
	  Formula.prototype.whether = function (s, p, o, w) {
	    return this.statementsMatching(s, p, o, w, false).length
	  }
	
	  Formula.prototype.transitiveClosure = function (seeds, predicate, inverse) {
	    var agenda
	    var done
	    var elt
	    var i
	    var k
	    var len
	    var s
	    var sups
	    var t
	    var v
	    done = {}
	    agenda = {}
	    for (k in seeds) {
	      if (!hasProp.call(seeds, k)) continue
	      v = seeds[k]
	      agenda[k] = v
	    }
	    while (true) {
	      t = (function () {
	        var p
	        for (p in agenda) {
	          if (!hasProp.call(agenda, p)) continue
	          return p
	        }
	      })()
	      if (t == null) {
	        return done
	      }
	      sups = inverse ? this.each(void 0, predicate, this.fromNT(t)) : this.each(this.fromNT(t), predicate)
	      for (i = 0, len = sups.length; i < len; i++) {
	        elt = sups[i]
	        s = elt.toNT()
	        if (s in done) {
	          continue
	        }
	        if (s in agenda) {
	          continue
	        }
	        agenda[s] = agenda[t]
	      }
	      done[t] = agenda[t]
	      delete agenda[t]
	    }
	  }
	
	  /*
	  For thisClass or any subclass, anything which has it is its type
	  or is the object of something which has the type as its range, or subject
	  of something which has the type as its domain
	  We don't bother doing subproperty (yet?)as it doesn't seeem to be used much.
	  Get all the Classes of which we can RDFS-infer the subject is a member
	  @returns a hash of URIs
	  */
	  Formula.prototype.findMembersNT = function (thisClass) {
	    var i
	    var l
	    var len
	    var len1
	    var len2
	    var len3
	    var len4
	    var m
	    var members
	    var pred
	    var q
	    var ref
	    var ref1
	    var ref2
	    var ref3
	    var ref4
	    var ref5
	    var seeds
	    var st
	    var t
	    var u
	    seeds = {}
	    seeds[thisClass.toNT()] = true
	    members = {}
	    ref = this.transitiveClosure(seeds, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true)
	    for (t in ref) {
	      if (!hasProp.call(ref, t)) continue
	      ref1 = this.statementsMatching(void 0, this.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), this.fromNT(t))
	      for (i = 0, len = ref1.length; i < len; i++) {
	        st = ref1[i]
	        members[st.subject.toNT()] = st
	      }
	      ref2 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'), this.fromNT(t))
	      for (l = 0, len1 = ref2.length; l < len1; l++) {
	        pred = ref2[l]
	        ref3 = this.statementsMatching(void 0, pred)
	        for (m = 0, len2 = ref3.length; m < len2; m++) {
	          st = ref3[m]
	          members[st.subject.toNT()] = st
	        }
	      }
	      ref4 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#range'), this.fromNT(t))
	      for (q = 0, len3 = ref4.length; q < len3; q++) {
	        pred = ref4[q]
	        ref5 = this.statementsMatching(void 0, pred)
	        for (u = 0, len4 = ref5.length; u < len4; u++) {
	          st = ref5[u]
	          members[st.object.toNT()] = st
	        }
	      }
	    }
	    return members
	  }
	
	  /*
	  transform a collection of NTriple URIs into their URI strings
	  @param t some iterable colletion of NTriple URI strings
	  @return a collection of the URIs as strings
	  todo: explain why it is important to go through NT
	  */
	  Formula.prototype.NTtoURI = function (t) {
	    var k
	    var uris
	    var v
	    uris = {}
	    for (k in t) {
	      if (!hasProp.call(t, k)) continue
	      v = t[k]
	      if (k[0] === '<') {
	        uris[k.slice(1, -1)] = v
	      }
	    }
	    return uris
	  }
	
	  Formula.prototype.findTypeURIs = function (subject) {
	    return this.NTtoURI(this.findTypesNT(subject))
	  }
	
	  Formula.prototype.findMemberURIs = function (subject) {
	    return this.NTtoURI(this.findMembersNT(subject))
	  }
	
	  /*
	  Get all the Classes of which we can RDFS-infer the subject is a member
	  todo: This will loop is there is a class subclass loop (Sublass loops are not illegal)
	  Returns a hash table where key is NT of type and value is statement why we think so.
	  Does NOT return terms, returns URI strings.
	  We use NT representations in this version because they handle blank nodes.
	  */
	  Formula.prototype.findTypesNT = function (subject) {
	    var domain
	    var i
	    var l
	    var len
	    var len1
	    var len2
	    var len3
	    var m
	    var q
	    var range
	    var rdftype
	    var ref
	    var ref1
	    var ref2
	    var ref3
	    var st
	    var types
	    rdftype = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
	    types = []
	    ref = this.statementsMatching(subject, void 0, void 0)
	    for (i = 0, len = ref.length; i < len; i++) {
	      st = ref[i]
	      if (st.predicate.uri === rdftype) {
	        types[st.object.toNT()] = st
	      } else {
	        ref1 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'))
	        for (l = 0, len1 = ref1.length; l < len1; l++) {
	          range = ref1[l]
	          types[range.toNT()] = st
	        }
	      }
	    }
	    ref2 = this.statementsMatching(void 0, void 0, subject)
	    for (m = 0, len2 = ref2.length; m < len2; m++) {
	      st = ref2[m]
	      ref3 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#range'))
	      for (q = 0, len3 = ref3.length; q < len3; q++) {
	        domain = ref3[q]
	        types[domain.toNT()] = st
	      }
	    }
	    return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false)
	  }
	
	  /*
	  Get all the Classes of which we can RDFS-infer the subject is a subclass
	  Returns a hash table where key is NT of type and value is statement why we think so.
	  Does NOT return terms, returns URI strings.
	  We use NT representations in this version because they handle blank nodes.
	  */
	  Formula.prototype.findSuperClassesNT = function (subject) {
	    var types
	    types = []
	    types[subject.toNT()] = true
	    return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false)
	  }
	
	  /*
	  Get all the Classes of which we can RDFS-infer the subject is a superclass
	  Returns a hash table where key is NT of type and value is statement why we think so.
	  Does NOT return terms, returns URI strings.
	  We use NT representations in this version because they handle blank nodes.
	  */
	  Formula.prototype.findSubClassesNT = function (subject) {
	    var types
	    types = []
	    types[subject.toNT()] = true
	    return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true)
	  }
	
	  /*
	  Find the types in the list which have no *stored* supertypes
	  We exclude the universal class, owl:Things and rdf:Resource, as it is information-free.
	  */
	  Formula.prototype.topTypeURIs = function (types) {
	    var i
	    var j
	    var k
	    var len
	    var n
	    var ref
	    var tops
	    var v
	    tops = []
	    for (k in types) {
	      if (!hasProp.call(types, k)) continue
	      v = types[k]
	      n = 0
	      ref = this.each(this.sym(k), this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'))
	      for (i = 0, len = ref.length; i < len; i++) {
	        j = ref[i]
	        if (j.uri !== 'http://www.w3.org/2000/01/rdf-schema#Resource') {
	          n++
	          break
	        }
	      }
	      if (!n) {
	        tops[k] = v
	      }
	    }
	    if (tops['http://www.w3.org/2000/01/rdf-schema#Resource']) {
	      delete tops['http://www.w3.org/2000/01/rdf-schema#Resource']
	    }
	    if (tops['http://www.w3.org/2002/07/owl#Thing']) {
	      delete tops['http://www.w3.org/2002/07/owl#Thing']
	    }
	    return tops
	  }
	
	  /*
	  Find the types in the list which have no *stored* subtypes
	  These are a set of classes which provide by themselves complete
	  information -- the other classes are redundant for those who
	  know the class DAG.
	  */
	  Formula.prototype.bottomTypeURIs = function (types) {
	    var bots
	    var bottom
	    var elt
	    var i
	    var k
	    var len
	    var ref
	    var subs
	    var v
	    bots = []
	    for (k in types) {
	      if (!hasProp.call(types, k)) continue
	      v = types[k]
	      subs = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), this.sym(k))
	      bottom = true
	      i = 0
	      for (len = subs.length; i < len; i++) {
	        elt = subs[i]
	        ref = elt.uri
	        if (indexOf.call(types, ref) >= 0) {
	          bottom = false
	          break
	        }
	      }
	      if (bottom) {
	        bots[k] = v
	      }
	    }
	    return bots
	  }
	
	  Formula.prototype.serialize = function (base, contentType, provenance) {
	    var documentString
	    var sts
	    var sz
	    sz = $rdf.Serializer(this)
	    sz.suggestNamespaces(this.namespaces)
	    sz.setBase(base)
	    if (provenance) {
	      sts = this.statementsMatching(void 0, void 0, void 0, provenance)
	    } else {
	      sts = this.statements
	    }
	    switch (
	    contentType != null ? contentType : 'text/n3') {
	      case 'application/rdf+xml':
	        documentString = sz.statementsToXML(sts)
	        break
	      case 'text/n3':
	      case 'text/turtle':
	        documentString = sz.statementsToN3(sts)
	        break
	      default:
	        throw new Error('serialize: Content-type ' + contentType(+' not supported.'))
	    }
	    return documentString
	  }
	
	  return Formula
	})($rdf.Node)
	
	$rdf.sym = function (uri) {
	  return new $rdf.NamedNode(uri)
	}
	
	$rdf.lit = $rdf.Formula.prototype.literal
	
	$rdf.Namespace = $rdf.Formula.prototype.ns
	
	$rdf.variable = $rdf.Formula.prototype.variable
	
	/*
	* Variable
	*
	* Variables are placeholders used in patterns to be matched.
	* In cwm they are symbols which are the formula's list of quantified variables.
	* In sparl they are not visibily URIs.  Here we compromise, by having
	* a common special base URI for variables. Their names are uris,
	* but the ? nottaion has an implicit base uri of 'varid:'
	*/
	$rdf.Variable = (function (superClass) {
	  extend(Variable, superClass)
	
	  function Variable (rel) {
	    this.base = 'varid:'
	    this.uri = $rdf.Util.uri.join(rel, this.base)
	  }
	
	  Variable.prototype.termType = 'variable'
	
	  Variable.prototype.toNT = function () {
	    if (this.uri.slice(0, this.base.length) === this.base) {
	      return '?' + this.uri.slice(this.base.length)
	    }
	    return '?' + this.uri
	  }
	
	  Variable.prototype.toString = Variable.prototype.toNT
	
	  Variable.prototype.hashString = Variable.prototype.toNT
	
	  Variable.prototype.substitute = function (bindings) {
	    var ref
	    return (ref = bindings[this.toNT()]) != null ? ref : this
	  }
	
	  Variable.prototype.sameTerm = function (other) {
	    if (!other) {
	      false
	    }
	    return (this.termType === other.termType) && (this.uri === other.uri)
	  }
	
	  return Variable
	})($rdf.Node)
	
	$rdf.Literal.prototype.classOrder = 1
	
	$rdf.Collection.prototype.classOrder = 3
	
	$rdf.Formula.prototype.classOrder = 4
	
	$rdf.NamedNode.prototype.classOrder = 5
	
	$rdf.BlankNode.prototype.classOrder = 6
	
	$rdf.Variable.prototype.classOrder = 7
	
	$rdf.fromNT = $rdf.Formula.prototype.fromNT
	
	$rdf.graph = function () {
	  return new $rdf.IndexedFormula()
	}
	
	if ((typeof module !== 'undefined' && module !== null ? module.exports : void 0) != null) {
	  for (k in $rdf) {
	    if (!hasProp.call($rdf, k)) continue
	    v = $rdf[k]
	    module.exports[k] = v
	  }
	}
	/**
	 * @fileoverview
	 *  RDF/XML PARSER
	 *
	 * Version 0.1
	 *  Parser believed to be in full positive RDF/XML parsing compliance
	 *  with the possible exception of handling deprecated RDF attributes
	 *  appropriately. Parser is believed to comply fully with other W3C
	 *  and industry standards where appropriate (DOM, ECMAScript, &c.)
	 *
	 *  Author: David Sheets <dsheets@mit.edu>
	 *
	 * W3C® SOFTWARE NOTICE AND LICENSE
	 * http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
	 * This work (and included software, documentation such as READMEs, or
	 * other related items) is being provided by the copyright holders under
	 * the following license. By obtaining, using and/or copying this work,
	 * you (the licensee) agree that you have read, understood, and will
	 * comply with the following terms and conditions.
	 *
	 * Permission to copy, modify, and distribute this software and its
	 * documentation, with or without modification, for any purpose and
	 * without fee or royalty is hereby granted, provided that you include
	 * the following on ALL copies of the software and documentation or
	 * portions thereof, including modifications:
	 *
	 * 1. The full text of this NOTICE in a location viewable to users of
	 * the redistributed or derivative work.
	 * 2. Any pre-existing intellectual property disclaimers, notices, or terms and
	 * conditions. If none exist, the W3C Software Short Notice should be
	 * included (hypertext is preferred, text is permitted) within the body
	 * of any redistributed or derivative code.
	 * 3. Notice of any changes or modifications to the files, including the
	 * date changes were made. (We recommend you provide URIs to the location
	 * from which the code is derived.)
	 *
	 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT
	 * HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED,
	 * INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS
	 * FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR
	 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
	 * TRADEMARKS OR OTHER RIGHTS.
	 *
	 * COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL
	 * OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR
	 * DOCUMENTATION.
	 *
	 * The name and trademarks of copyright holders may NOT be used in
	 * advertising or publicity pertaining to the software without specific,
	 * written prior permission. Title to copyright in this software and any
	 * associated documentation will at all times remain with copyright
	 * holders.
	 */
	/**
	 * @class Class defining an RDFParser resource object tied to an RDFStore
	 *
	 * @author David Sheets <dsheets@mit.edu>
	 * @version 0.1
	 *
	 * @constructor
	 * @param {RDFStore} store An RDFStore object
	 */
	
	$rdf.RDFParser = function (store) {
	  var RDFParser = {}
	
	  /** Standard namespaces that we know how to handle @final
	   *  @member RDFParser
	   */
	  RDFParser.ns = {'RDF': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'RDFS': 'http://www.w3.org/2000/01/rdf-schema#'}
	
	  /** DOM Level 2 node type magic numbers @final
	   *  @member RDFParser
	   */
	  RDFParser.nodeType = {'ELEMENT': 1, 'ATTRIBUTE': 2, 'TEXT': 3,
	    'CDATA_SECTION': 4, 'ENTITY_REFERENCE': 5,
	    'ENTITY': 6, 'PROCESSING_INSTRUCTION': 7,
	    'COMMENT': 8, 'DOCUMENT': 9, 'DOCUMENT_TYPE': 10,
	  'DOCUMENT_FRAGMENT': 11, 'NOTATION': 12}
	
	  /**
	   * Frame class for namespace and base URI lookups
	   * Base lookups will always resolve because the parser knows
	   * the default base.
	   *
	   * @private
	   */
	
	  this.frameFactory = function (parser, parent, element) {
	    return {'NODE': 1, 'ARC': 2, 'parent': parent, 'parser': parser, 'store': parser.store, 'element': element,
	      'lastChild': 0, 'base': null, 'lang': null, 'node': null, 'nodeType': null, 'listIndex': 1, 'rdfid': null, 'datatype': null, 'collection': false, /** Terminate the frame and notify the store that we're done */
	      'terminateFrame': function () {
	        if (this.collection) {
	          this.node.close()
	        }
	      },         /** Add a symbol of a certain type to the this frame */'addSymbol': function (type, uri) {
	        uri = $rdf.Util.uri.join(uri, this.base)
	        this.node = this.store.sym(uri)
	
	        this.nodeType = type
	      },         /** Load any constructed triples into the store */'loadTriple': function () {
	        if (this.parent.parent.collection) {
	          this.parent.parent.node.append(this.node)
	        } else {
	          this.store.add(this.parent.parent.node, this.parent.node, this.node, this.parser.why)
	        }
	        if (this.parent.rdfid != null) {
	          // reify
	          var triple = this.store.sym($rdf.Util.uri.join('#' + this.parent.rdfid, this.base))
	          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'type'), this.store.sym(RDFParser.ns.RDF + 'Statement'), this.parser.why)
	          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'subject'), this.parent.parent.node, this.parser.why)
	          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'predicate'), this.parent.node, this.parser.why)
	
	          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'object'), this.node, this.parser.why)
	        }
	      },         /** Check if it's OK to load a triple */'isTripleToLoad': function () {
	        return (this.parent != null && this.parent.parent != null && this.nodeType === this.NODE && this.parent.nodeType ===
	        this.ARC && this.parent.parent.nodeType === this.NODE)
	      },         /** Add a symbolic node to this frame */'addNode': function (uri) {
	        this.addSymbol(this.NODE, uri)
	        if (this.isTripleToLoad()) {
	          this.loadTriple()
	        }
	      },         /** Add a collection node to this frame */'addCollection': function () {
	        this.nodeType = this.NODE
	        this.node = this.store.collection()
	        this.collection = true
	        if (this.isTripleToLoad()) {
	          this.loadTriple()
	        }
	      },         /** Add a collection arc to this frame */'addCollectionArc': function () {
	        this.nodeType = this.ARC
	      },         /** Add a bnode to this frame */'addBNode': function (id) {
	        if (id != null) {
	          if (this.parser.bnodes[id] != null) {
	            this.node = this.parser.bnodes[id]
	          } else {
	            this.node = this.parser.bnodes[id] = this.store.bnode()
	          }
	        } else {
	          this.node = this.store.bnode()
	        }
	        this.nodeType = this.NODE
	        if (this.isTripleToLoad()) {
	          this.loadTriple()
	        }
	      },         /** Add an arc or property to this frame */'addArc': function (uri) {
	        if (uri === RDFParser.ns.RDF + 'li') {
	          uri = RDFParser.ns.RDF + '_' + this.parent.listIndex
	          this.parent.listIndex++
	        }
	
	        this.addSymbol(this.ARC, uri)
	      },         /** Add a literal to this frame */'addLiteral': function (value) {
	        if (this.parent.datatype) {
	          this.node = this.store.literal(value, '', this.store.sym(this.parent.datatype))
	        } else {
	          this.node = this.store.literal(value, this.lang)
	        }
	        this.nodeType = this.NODE
	        if (this.isTripleToLoad()) {
	          this.loadTriple()
	        }
	      }
	    }
	  }
	
	  // from the OpenLayers source .. needed to get around IE problems.
	  this.getAttributeNodeNS = function (node, uri, name) {
	    var attributeNode = null
	    if (node.getAttributeNodeNS) {
	      attributeNode = node.getAttributeNodeNS(uri, name)
	    } else {
	      var attributes = node.attributes
	      var potentialNode, fullName
	      for (var i = 0;i < attributes.length; ++i) {
	        potentialNode = attributes[i]
	        if (potentialNode.namespaceURI === uri) {
	          fullName = (potentialNode.prefix) ? (potentialNode.prefix + ':' + name) : name
	          if (fullName === potentialNode.nodeName) {
	            attributeNode = potentialNode
	            break
	          }
	        }
	      }
	    }
	    return attributeNode
	  }
	
	  /** Our triple store reference @private */
	
	  this.store = store /** Our identified blank nodes @private */
	  this.bnodes = {} /** A context for context-aware stores @private */
	  this.why = null /** Reification flag */
	  this.reify = false
	
	  /**
	   * Build our initial scope frame and parse the DOM into triples
	   * @param {DOMTree} document The DOM to parse
	   * @param {String} base The base URL to use
	   * @param {Object} why The context to which this resource belongs
	   */
	
	  this.parse = function (document, base, why) {
	    var children = document.childNodes // clean up for the next run
	    this.cleanParser() // figure out the root element
	    var root
	    if (document.nodeType === RDFParser.nodeType.DOCUMENT) {
	      for (var c = 0;c < children.length;c++) {
	        if (children[c].nodeType === RDFParser.nodeType.ELEMENT) {
	          root = children[c]
	          break
	        }
	      }
	    } else if (document.nodeType === RDFParser.nodeType.ELEMENT) {
	      root = document
	    } else {
	      throw new Error("RDFParser: can't find root in " + base + '. Halting. ')
	    // return false
	    }
	    this.why = why // our topmost frame
	    var f = this.frameFactory(this)
	    this.base = base
	    f.base = base
	    f.lang = null // was '' but can't have langs like that 2015 (!)
	    this.parseDOM(this.buildFrame(f, root))
	    return true
	  }
	
	  this.parseDOM = function (frame) {
	    // a DOM utility function used in parsing
	    var rdfid
	    var elementURI = function (el) {
	      var result = ''
	      if (el.namespaceURI == null) {
	        throw new Error('RDF/XML syntax error: No namespace for ' + el.localName + ' in ' + this.base)
	      }
	      if (el.namespaceURI) {
	        result = result + el.namespaceURI
	      }
	      if (el.localName) {
	        result = result + el.localName
	      } else if (el.nodeName) {
	        if (el.nodeName.indexOf(':') >= 0)result = result + el.nodeName.split(':')[1]
	        else result = result + el.nodeName
	      }
	      return result
	    }.bind(this)
	    var dig = true // if we'll dig down in the tree on the next iter
	    while (frame.parent) {
	      var dom = frame.element
	      var attrs = dom.attributes
	      if (dom.nodeType === RDFParser.nodeType.TEXT || dom.nodeType === RDFParser.nodeType.CDATA_SECTION) {
	        // we have a literal
	        if (frame.parent.nodeType === frame.NODE) {
	          // must have had attributes, store as rdf:value
	          frame.addArc(RDFParser.ns.RDF + 'value')
	          frame = this.buildFrame(frame)
	        }
	        frame.addLiteral(dom.nodeValue)
	      } else if (elementURI(dom) !== RDFParser.ns.RDF + 'RDF') {
	        // not root
	        if (frame.parent && frame.parent.collection) {
	          // we're a collection element
	          frame.addCollectionArc()
	          frame = this.buildFrame(frame, frame.element)
	          frame.parent.element = null
	        }
	        if (!frame.parent || !frame.parent.nodeType || frame.parent.nodeType === frame.ARC) {
	          // we need a node
	          var about = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'about')
	          rdfid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'ID')
	          if (about && rdfid) {
	            throw new Error('RDFParser: ' + dom.nodeName + ' has both rdf:id and rdf:about.' +
	              ' Halting. Only one of these' + ' properties may be specified on a' + ' node.')
	          }
	          if (!about && rdfid) {
	            frame.addNode('#' + rdfid.nodeValue)
	            dom.removeAttributeNode(rdfid)
	          } else if (about == null && rdfid == null) {
	            var bnid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'nodeID')
	            if (bnid) {
	              frame.addBNode(bnid.nodeValue)
	              dom.removeAttributeNode(bnid)
	            } else {
	              frame.addBNode()
	            }
	          } else {
	            frame.addNode(about.nodeValue)
	            dom.removeAttributeNode(about)
	          }
	          // Typed nodes
	          var rdftype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'type')
	          if (RDFParser.ns.RDF + 'Description' !== elementURI(dom)) {
	            rdftype = {'nodeValue': elementURI(dom)}
	          }
	          if (rdftype != null) {
	            this.store.add(frame.node, this.store.sym(RDFParser.ns.RDF + 'type'), this.store.sym($rdf.Util.uri.join(rdftype.nodeValue,
	              frame.base)), this.why)
	            if (rdftype.nodeName) {
	              dom.removeAttributeNode(rdftype)
	            }
	          }
	          // Property Attributes
	          for (var x = attrs.length - 1; x >= 0; x--) {
	            this.store.add(frame.node, this.store.sym(elementURI(attrs[x])), this.store.literal(attrs[x].nodeValue,
	              frame.lang), this.why)
	          }
	        } else {
	          // we should add an arc (or implicit bnode+arc)
	          frame.addArc(elementURI(dom)) // save the arc's rdf:ID if it has one
	          if (this.reify) {
	            rdfid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'ID')
	            if (rdfid) {
	              frame.rdfid = rdfid.nodeValue
	              dom.removeAttributeNode(rdfid)
	            }
	          }
	          var parsetype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'parseType')
	          var datatype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'datatype')
	          if (datatype) {
	            frame.datatype = datatype.nodeValue
	            dom.removeAttributeNode(datatype)
	          }
	          if (parsetype) {
	            var nv = parsetype.nodeValue
	            if (nv === 'Literal') {
	              frame.datatype = RDFParser.ns.RDF + 'XMLLiteral' // (this.buildFrame(frame)).addLiteral(dom)
	              // should work but doesn't
	              frame = this.buildFrame(frame)
	              frame.addLiteral(dom)
	              dig = false
	            } else if (nv === 'Resource') {
	              frame = this.buildFrame(frame, frame.element)
	              frame.parent.element = null
	              frame.addBNode()
	            } else if (nv === 'Collection') {
	              frame = this.buildFrame(frame, frame.element)
	              frame.parent.element = null
	              frame.addCollection()
	            }
	            dom.removeAttributeNode(parsetype)
	          }
	          if (attrs.length !== 0) {
	            var resource = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'resource')
	            var bnid2 = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'nodeID')
	            frame = this.buildFrame(frame)
	            if (resource) {
	              frame.addNode(resource.nodeValue)
	              dom.removeAttributeNode(resource)
	            } else {
	              if (bnid2) {
	                frame.addBNode(bnid2.nodeValue)
	                dom.removeAttributeNode(bnid2)
	              } else {
	                frame.addBNode()
	              }
	            }
	            for (var x1 = attrs.length - 1; x1 >= 0; x1--) {
	              var f = this.buildFrame(frame)
	              f.addArc(elementURI(attrs[x1]))
	              if (elementURI(attrs[x1]) === RDFParser.ns.RDF + 'type') {
	                (this.buildFrame(f)).addNode(attrs[x1].nodeValue)
	              } else {
	                (this.buildFrame(f)).addLiteral(attrs[x1].nodeValue)
	              }
	            }
	          } else if (dom.childNodes.length === 0) {
	            (this.buildFrame(frame)).addLiteral('')
	          }
	        }
	      } // rdf:RDF
	      // dig dug
	      dom = frame.element
	      while (frame.parent) {
	        var pframe = frame
	        while (dom == null) {
	          frame = frame.parent
	          dom = frame.element
	        }
	        var candidate = dom.childNodes && dom.childNodes[frame.lastChild]
	        if (!candidate || !dig) {
	          frame.terminateFrame()
	          if (!(frame = frame.parent)) {
	            break
	          } // done
	          dom = frame.element
	          dig = true
	        } else if ((candidate.nodeType !== RDFParser.nodeType.ELEMENT &&
	          candidate.nodeType !== RDFParser.nodeType.TEXT &&
	          candidate.nodeType !== RDFParser.nodeType.CDATA_SECTION) ||
	          ((candidate.nodeType === RDFParser.nodeType.TEXT ||
	          candidate.nodeType === RDFParser.nodeType.CDATA_SECTION) &&
	          dom.childNodes.length !== 1)) {
	          frame.lastChild++
	        } else {
	          // not a leaf
	          frame.lastChild++
	          frame = this.buildFrame(pframe, dom.childNodes[frame.lastChild - 1])
	          break
	        }
	      }
	    } // while
	  }
	
	  /**
	   * Cleans out state from a previous parse run
	   * @private
	   */
	  this.cleanParser = function () {
	    this.bnodes = {}
	    this.why = null
	  }
	
	  /**
	   * Builds scope frame
	   * @private
	   */
	  this.buildFrame = function (parent, element) {
	    var frame = this.frameFactory(this, parent, element)
	    if (parent) {
	      frame.base = parent.base
	      frame.lang = parent.lang
	    }
	    if (!element || element.nodeType === RDFParser.nodeType.TEXT ||
	      element.nodeType === RDFParser.nodeType.CDATA_SECTION) {
	      return frame
	    }
	    var attrs = element.attributes
	    var base = element.getAttributeNode('xml:base')
	    if (base != null) {
	      frame.base = base.nodeValue
	      element.removeAttribute('xml:base')
	    }
	    var lang = element.getAttributeNode('xml:lang')
	    if (lang != null) {
	      frame.lang = lang.nodeValue
	      element.removeAttribute('xml:lang')
	    }
	    // remove all extraneous xml and xmlns attributes
	    for (var x = attrs.length - 1;x >= 0;x--) {
	      if (attrs[x].nodeName.substr(0, 3) === 'xml') {
	        if (attrs[x].name.slice(0, 6) === 'xmlns:') {
	          var uri = attrs[x].nodeValue // alert('base for namespac attr:'+this.base)
	          if (this.base) uri = $rdf.Util.uri.join(uri, this.base)
	          this.store.setPrefixForURI(attrs[x].name.slice(6), uri)
	        }
	        //		alert('rdfparser: xml atribute: '+attrs[x].name) //@@
	        element.removeAttributeNode(attrs[x])
	      }
	    }
	    return frame
	  }
	}
	/**
	*
	*  UTF-8 data encode / decode
	*  http://www.webtoolkit.info/
	*
	**/
	
	$rdf.N3Parser = function () {
	
	function hexify(str) { // also used in parser
	  return encodeURI(str);
	}
	
	var Utf8 = {
	
	    // public method for url encoding
	    encode : function (string) {
	        string = string.replace(/\r\n/g,"\n");
	        var utftext = "";
	
	        for (var n = 0; n < string.length; n++) {
	
	            var c = string.charCodeAt(n);
	
	            if (c < 128) {
	                    utftext += String.fromCharCode(c);
	            }
	            else if((c > 127) && (c < 2048)) {
	                    utftext += String.fromCharCode((c >> 6) | 192);
	                    utftext += String.fromCharCode((c & 63) | 128);
	            }
	            else {
	                    utftext += String.fromCharCode((c >> 12) | 224);
	                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
	                    utftext += String.fromCharCode((c & 63) | 128);
	            }
	
	        }
	
	        return utftext;
	    },
	
	    // public method for url decoding
	    decode : function (utftext) {
	        var string = "";
	        var i = 0;
	
	        while ( i < utftext.length ) {
	
	                var c = utftext.charCodeAt(i);
	                if (c < 128) {
	                        string += String.fromCharCode(c);
	                        i++;
	                }
	                else if((c > 191) && (c < 224)) {
	                        string += String.fromCharCode(((c & 31) << 6)
	                            | (utftext.charCodeAt(i+1) & 63));
	                        i += 2;
	                }
	                else {
	                        string += String.fromCharCode(((c & 15) << 12)
	                            | ((utftext.charCodeAt(i+1) & 63) << 6)
	                            | (utftext.charCodeAt(i+2) & 63));
	                        i += 3;
	                }
	        }
	        return string;
	    }
	
	}// Things we need to define to make converted pythn code work in js
	// environment of $rdf
	
	var RDFSink_forSomeSym = "http://www.w3.org/2000/10/swap/log#forSome";
	var RDFSink_forAllSym = "http://www.w3.org/2000/10/swap/log#forAll";
	var Logic_NS = "http://www.w3.org/2000/10/swap/log#";
	
	//  pyjs seems to reference runtime library which I didn't find
	
	var pyjslib_Tuple = function(theList) { return theList };
	
	var pyjslib_List = function(theList) { return theList };
	
	var pyjslib_Dict = function(listOfPairs) {
	    if (listOfPairs.length > 0)
		throw "missing.js: oops nnonempty dict not imp";
	    return [];
	}
	
	var pyjslib_len = function(s) { return s.length }
	
	var pyjslib_slice = function(str, i, j) {
	    if (typeof str.slice == 'undefined')
	        throw '@@ mising.js: No .slice function for '+str+' of type '+(typeof str) 
	    if ((typeof j == 'undefined') || (j ==null)) return str.slice(i);
	    return str.slice(i, j) // @ exactly the same spec?
	}
	var StopIteration = Error('dummy error stop iteration');
	
	var pyjslib_Iterator = function(theList) {
	    this.last = 0;
	    this.li = theList;
	    this.next = function() {
		if (this.last == this.li.length) throw StopIteration;
		return this.li[this.last++];
	    }
	    return this;
	};
	
	var ord = function(str) {
	    return str.charCodeAt(0)
	}
	
	var string_find = function(str, s) {
	    return str.indexOf(s)
	}
	
	var assertFudge = function(condition, desc) {
	    if (condition) return;
	    if (desc) throw "python Assertion failed: "+desc;
	    throw "(python) Assertion failed.";  
	}
	
	
	var stringFromCharCode = function(uesc) {
	    return String.fromCharCode(uesc);
	}
	
	
	String.prototype.encode = function(encoding) {
	    if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8"
	    return Utf8.encode(this);
	}
	String.prototype.decode = function(encoding) {
	    if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8"
	    //return Utf8.decode(this);
	    return this;
	}
	
	
	
	var uripath_join = function(base, given) {
	    return $rdf.Util.uri.join(given, base)  // sad but true
	}
	
	var becauseSubexpression = null; // No reason needed
	var diag_tracking = 0;
	var diag_chatty_flag = 0;
	var diag_progress = function(str) { /*$rdf.log.debug(str);*/ }
	
	// why_BecauseOfData = function(doc, reason) { return doc };
	
	
	var RDF_type_URI = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
	var DAML_sameAs_URI = "http://www.w3.org/2002/07/owl#sameAs";
	
	/*
	function SyntaxError(details) {
	    return new __SyntaxError(details);
	}
	*/
	
	function __SyntaxError(details) {
	    this.details = details
	}
	
	/*
	
	$Id: n3parser.js 14561 2008-02-23 06:37:26Z kennyluck $
	
	HAND EDITED FOR CONVERSION TO JAVASCRIPT
	
	This module implements a Nptation3 parser, and the final
	part of a notation3 serializer.
	
	See also:
	
	Notation 3
	http://www.w3.org/DesignIssues/Notation3
	
	Closed World Machine - and RDF Processor
	http://www.w3.org/2000/10/swap/cwm
	
	To DO: See also "@@" in comments
	
	- Clean up interfaces
	______________________________________________
	
	Module originally by Dan Connolly, includeing notation3
	parser and RDF generator. TimBL added RDF stream model
	and N3 generation, replaced stream model with use
	of common store/formula API.  Yosi Scharf developped
	the module, including tests and test harness.
	
	*/
	
	var ADDED_HASH = "#";
	var LOG_implies_URI = "http://www.w3.org/2000/10/swap/log#implies";
	var INTEGER_DATATYPE = "http://www.w3.org/2001/XMLSchema#integer";
	var FLOAT_DATATYPE = "http://www.w3.org/2001/XMLSchema#double";
	var DECIMAL_DATATYPE = "http://www.w3.org/2001/XMLSchema#decimal";
	var DATE_DATATYPE = "http://www.w3.org/2001/XMLSchema#date";
	var DATETIME_DATATYPE = "http://www.w3.org/2001/XMLSchema#dateTime";
	var BOOLEAN_DATATYPE = "http://www.w3.org/2001/XMLSchema#boolean";
	var option_noregen = 0;
	var _notQNameChars = "\t\r\n !\"#$%&'()*.,+/;<=>?@[\\]^`{|}~";
	var _notNameChars =  ( _notQNameChars + ":" ) ;
	var _rdfns = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
	var N3CommentCharacter = "#";
	var eol = new RegExp("^[ \\t]*(#[^\\n]*)?\\r?\\n", 'g');
	var eof = new RegExp("^[ \\t]*(#[^\\n]*)?$", 'g');
	var ws = new RegExp("^[ \\t]*", 'g');
	var signed_integer = new RegExp("^[-+]?[0-9]+", 'g');
	var number_syntax = new RegExp("^([-+]?[0-9]+)(\\.[0-9]+)?(e[-+]?[0-9]+)?", 'g');
	var datetime_syntax = new RegExp('^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9](T[0-9][0-9]:[0-9][0-9](:[0-9][0-9](\\.[0-9]*)?)?)?Z?');
	
	var digitstring = new RegExp("^[0-9]+", 'g');
	var interesting = new RegExp("[\\\\\\r\\n\\\"]", 'g');
	var langcode = new RegExp("^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)?", 'g');
	function SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
	    return new __SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why);
	}
	function __SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
	    if (typeof openFormula == 'undefined') openFormula=null;
	    if (typeof thisDoc == 'undefined') thisDoc="";
	    if (typeof baseURI == 'undefined') baseURI=null;
	    if (typeof genPrefix == 'undefined') genPrefix="";
	    if (typeof metaURI == 'undefined') metaURI=null;
	    if (typeof flags == 'undefined') flags="";
	    if (typeof why == 'undefined') why=null;
	    /*
	    note: namespace names should *not* end in #;
	    the # will get added during qname processing */
	    
	    this._bindings = new pyjslib_Dict([]);
	    this._flags = flags;
	    if ((thisDoc != "")) {
	        assertFudge((thisDoc.indexOf(":") >= 0),  ( "Document URI not absolute: " + thisDoc ) );
	        this._bindings[""] = (  ( thisDoc + "#" ) );
	    }
	    this._store = store;
	    if (genPrefix) {
	        store.setGenPrefix(genPrefix);
	    }
	    this._thisDoc = thisDoc;
	    this.source = store.sym(thisDoc);
	    this.lines = 0;
	    this.statementCount = 0;
	    this.startOfLine = 0;
	    this.previousLine = 0;
	    this._genPrefix = genPrefix;
	    this.keywords = new pyjslib_List(["a", "this", "bind", "has", "is", "of", "true", "false"]);
	    this.keywordsSet = 0;
	    this._anonymousNodes = new pyjslib_Dict([]);
	    this._variables = new pyjslib_Dict([]);
	    this._parentVariables = new pyjslib_Dict([]);
	    this._reason = why;
	    this._reason2 = null;
	    if (diag_tracking) {
	        this._reason2 = why_BecauseOfData(store.sym(thisDoc), this._reason);
	    }
	    if (baseURI) {
	        this._baseURI = baseURI;
	    }
	    else {
	        if (thisDoc) {
	            this._baseURI = thisDoc;
	        }
	        else {
	            this._baseURI = null;
	        }
	    }
	    assertFudge(!(this._baseURI) || (this._baseURI.indexOf(":") >= 0));
	    if (!(this._genPrefix)) {
	        if (this._thisDoc) {
	            this._genPrefix =  ( this._thisDoc + "#_g" ) ;
	        }
	        else {
	            this._genPrefix = RDFSink_uniqueURI();
	        }
	    }
	    if ((openFormula == null)) {
	        if (this._thisDoc) {
	            this._formula = store.formula( ( thisDoc + "#_formula" ) );
	        }
	        else {
	            this._formula = store.formula();
	        }
	    }
	    else {
	        this._formula = openFormula;
	    }
	    this._context = this._formula;
	    this._parentContext = null;
	}
	__SinkParser.prototype.here = function(i) {
	    return  (  (  (  ( this._genPrefix + "_L" )  + this.lines )  + "C" )  +  (  ( i - this.startOfLine )  + 1 )  ) ;
	};
	__SinkParser.prototype.formula = function() {
	    return this._formula;
	};
	__SinkParser.prototype.loadStream = function(stream) {
	    return this.loadBuf(stream.read());
	};
	__SinkParser.prototype.loadBuf = function(buf) {
	    /*
	    Parses a buffer and returns its top level formula*/
	    
	    this.startDoc();
	    this.feed(buf);
	    return this.endDoc();
	};
	__SinkParser.prototype.feed = function(octets) {
	    /*
	    Feed an octet stream tothe parser
	    
	    if BadSyntax is raised, the string
	    passed in the exception object is the
	    remainder after any statements have been parsed.
	    So if there is more data to feed to the
	    parser, it should be straightforward to recover.*/
	    
	    var str = octets.decode("utf-8");
	    var i = 0;
	    while ((i >= 0)) {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            return;
	        }
	        var i = this.directiveOrStatement(str, j);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "expected directive or statement");
	        }
	    }
	};
	__SinkParser.prototype.directiveOrStatement = function(str, h) {
	    var i = this.skipSpace(str, h);
	    if ((i < 0)) {
	        return i;
	    }
	    var j = this.directive(str, i);
	    if ((j >= 0)) {
	        return this.checkDot(str, j);
	    }
	    var j = this.statement(str, i);
	    if ((j >= 0)) {
	        return this.checkDot(str, j);
	    }
	    return j;
	};
	__SinkParser.prototype.tok = function(tok, str, i) {
	    /*
	    Check for keyword.  Space must have been stripped on entry and
	    we must not be at end of file.*/
	    var whitespace = "\t\n\v\f\r ";
	    if ((pyjslib_slice(str, i,  ( i + 1 ) ) == "@")) {
	        var i =  ( i + 1 ) ;
	    }
	    else {
	        if (($rdf.Util.ArrayIndexOf(this.keywords,tok) < 0)) {
	            return -1;
	        }
	    }
	    var k =  ( i + pyjslib_len(tok) ) ;
	    if ((pyjslib_slice(str, i, k) == tok) && (_notQNameChars.indexOf(str.charAt(k)) >= 0)) {
	        return k;
	    }
	    else {
	        return -1;
	    }
	};
	__SinkParser.prototype.directive = function(str, i) {
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return j;
	    }
	    var res = new pyjslib_List([]);
	    var j = this.tok("bind", str, i);
	    if ((j > 0)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, i, "keyword bind is obsolete: use @prefix");
	    }
	    var j = this.tok("keywords", str, i);
	    if ((j > 0)) {
	        var i = this.commaSeparatedList(str, j, res, false);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "'@keywords' needs comma separated list of words");
	        }
	        this.setKeywords(pyjslib_slice(res, null, null));
	        if ((diag_chatty_flag > 80)) {
	            diag_progress("Keywords ", this.keywords);
	        }
	        return i;
	    }
	    var j = this.tok("forAll", str, i);
	    if ((j > 0)) {
	        var i = this.commaSeparatedList(str, j, res, true);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forAll");
	        }
	        
	        var __x = new pyjslib_Iterator(res);
	        try {
	            while (true) {
	                var x = __x.next();
	                
	                
	                if ($rdf.Util.ArrayIndexOf(this._variables,x) < 0 || ($rdf.Util.ArrayIndexOf(this._parentVariables,x) >= 0)) {
	                    this._variables[x] = ( this._context.newUniversal(x));
	                }
	                
	            }
	        } catch (e) {
	            if (e != StopIteration) {
	                throw e;
	            }
	        }
	        
	        return i;
	    }
	    var j = this.tok("forSome", str, i);
	    if ((j > 0)) {
	        var i = this.commaSeparatedList(str, j, res, this.uri_ref2);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forSome");
	        }
	        
	        var __x = new pyjslib_Iterator(res);
	        try {
	            while (true) {
	                var x = __x.next();
	                
	                
	                this._context.declareExistential(x);
	                
	            }
	        } catch (e) {
	            if (e != StopIteration) {
	                throw e;
	            }
	        }
	        
	        return i;
	    }
	    var j = this.tok("prefix", str, i);
	    if ((j >= 0)) {
	        var t = new pyjslib_List([]);
	        var i = this.qname(str, j, t);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "expected qname after @prefix");
	        }
	        var j = this.uri_ref2(str, i, t);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "expected <uriref> after @prefix _qname_");
	        }
	        var ns = t[1].uri;
	        if (this._baseURI) {
	            var ns = uripath_join(this._baseURI, ns);
	        }
	        else {
	            assertFudge((ns.indexOf(":") >= 0), "With no base URI, cannot handle relative URI for NS");
	        }
	        assertFudge((ns.indexOf(":") >= 0));
	        this._bindings[t[0][0]] = ( ns);
	        
	        this.bind(t[0][0], hexify(ns));
	        return j;
	    }
	    var j = this.tok("base", str, i);
	    if ((j >= 0)) {
	        var t = new pyjslib_List([]);
	        var i = this.uri_ref2(str, j, t);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <uri> after @base ");
	        }
	        var ns = t[0].uri;
	        if (this._baseURI) {
	            var ns = uripath_join(this._baseURI, ns);
	        }
	        else {
	            throw BadSyntax(this._thisDoc, this.lines, str, j,  (  ( "With no previous base URI, cannot use relative URI in @base  <" + ns )  + ">" ) );
	        }
	        assertFudge((ns.indexOf(":") >= 0));
	        this._baseURI = ns;
	        return i;
	    }
	    return -1;
	};
	__SinkParser.prototype.bind = function(qn, uri) {
	    if ((qn == "")) {
	    }
	    else {
	        this._store.setPrefixForURI(qn, uri);
	    }
	};
	__SinkParser.prototype.setKeywords = function(k) {
	    /*
	    Takes a list of strings*/
	    
	    if ((k == null)) {
	        this.keywordsSet = 0;
	    }
	    else {
	        this.keywords = k;
	        this.keywordsSet = 1;
	    }
	};
	__SinkParser.prototype.startDoc = function() {
	};
	__SinkParser.prototype.endDoc = function() {
	    /*
	    Signal end of document and stop parsing. returns formula*/
	    
	    return this._formula;
	};
	__SinkParser.prototype.makeStatement = function(quad) {
	    quad[0].add(quad[2], quad[1], quad[3], this.source);
	    this.statementCount += 1;
	};
	__SinkParser.prototype.statement = function(str, i) {
	    var r = new pyjslib_List([]);
	    var i = this.object(str, i, r);
	    if ((i < 0)) {
	        return i;
	    }
	    var j = this.property_list(str, i, r[0]);
	    if ((j < 0)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, i, "expected propertylist");
	    }
	    return j;
	};
	__SinkParser.prototype.subject = function(str, i, res) {
	    return this.item(str, i, res);
	};
	__SinkParser.prototype.verb = function(str, i, res) {
	    /*
	    has _prop_
	    is _prop_ of
	    a
	    =
	    _prop_
	    >- prop ->
	    <- prop -<
	    _operator_*/
	    
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return j;
	    }
	    var r = new pyjslib_List([]);
	    var j = this.tok("has", str, i);
	    if ((j >= 0)) {
	        var i = this.prop(str, j, r);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "expected property after 'has'");
	        }
	        res.push(new pyjslib_Tuple(["->", r[0]]));
	        return i;
	    }
	    var j = this.tok("is", str, i);
	    if ((j >= 0)) {
	        var i = this.prop(str, j, r);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <property> after 'is'");
	        }
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "End of file found, expected property after 'is'");
	            return j;
	        }
	        var i = j;
	        var j = this.tok("of", str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "expected 'of' after 'is' <prop>");
	        }
	        res.push(new pyjslib_Tuple(["<-", r[0]]));
	        return j;
	    }
	    var j = this.tok("a", str, i);
	    if ((j >= 0)) {
	        res.push(new pyjslib_Tuple(["->", this._store.sym(RDF_type_URI)]));
	        return j;
	    }
	    if ((pyjslib_slice(str, i,  ( i + 2 ) ) == "<=")) {
	        res.push(new pyjslib_Tuple(["<-", this._store.sym( ( Logic_NS + "implies" ) )]));
	        return  ( i + 2 ) ;
	    }
	    if ((pyjslib_slice(str, i,  ( i + 1 ) ) == "=")) {
	        if ((pyjslib_slice(str,  ( i + 1 ) ,  ( i + 2 ) ) == ">")) {
	            res.push(new pyjslib_Tuple(["->", this._store.sym( ( Logic_NS + "implies" ) )]));
	            return  ( i + 2 ) ;
	        }
	        res.push(new pyjslib_Tuple(["->", this._store.sym(DAML_sameAs_URI)]));
	        return  ( i + 1 ) ;
	    }
	    if ((pyjslib_slice(str, i,  ( i + 2 ) ) == ":=")) {
	        res.push(new pyjslib_Tuple(["->",  ( Logic_NS + "becomes" ) ]));
	        return  ( i + 2 ) ;
	    }
	    var j = this.prop(str, i, r);
	    if ((j >= 0)) {
	        res.push(new pyjslib_Tuple(["->", r[0]]));
	        return j;
	    }
	    if ((pyjslib_slice(str, i,  ( i + 2 ) ) == ">-") || (pyjslib_slice(str, i,  ( i + 2 ) ) == "<-")) {
	        throw BadSyntax(this._thisDoc, this.lines, str, j, ">- ... -> syntax is obsolete.");
	    }
	    return -1;
	};
	__SinkParser.prototype.prop = function(str, i, res) {
	    return this.item(str, i, res);
	};
	__SinkParser.prototype.item = function(str, i, res) {
	    return this.path(str, i, res);
	};
	__SinkParser.prototype.blankNode = function(uri) {
	    return this._context.bnode(uri, this._reason2);
	};
	__SinkParser.prototype.path = function(str, i, res) {
	    /*
	    Parse the path production.
	    */
	    
	    var j = this.nodeOrLiteral(str, i, res);
	    if ((j < 0)) {
	        return j;
	    }
	    while (("!^.".indexOf(pyjslib_slice(str, j,  ( j + 1 ) )) >= 0)) {
	        var ch = pyjslib_slice(str, j,  ( j + 1 ) );
	        if ((ch == ".")) {
	            var ahead = pyjslib_slice(str,  ( j + 1 ) ,  ( j + 2 ) );
	            if (!(ahead) || (_notNameChars.indexOf(ahead) >= 0) && (":?<[{(".indexOf(ahead) < 0)) {
	                break;
	            }
	        }
	        var subj = res.pop();
	        var obj = this.blankNode(this.here(j));
	        var j = this.node(str,  ( j + 1 ) , res);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in middle of path syntax");
	        }
	        var pred = res.pop();
	        if ((ch == "^")) {
	            this.makeStatement(new pyjslib_Tuple([this._context, pred, obj, subj]));
	        }
	        else {
	            this.makeStatement(new pyjslib_Tuple([this._context, pred, subj, obj]));
	        }
	        res.push(obj);
	    }
	    return j;
	};
	__SinkParser.prototype.anonymousNode = function(ln) {
	    /*
	    Remember or generate a term for one of these _: anonymous nodes*/
	    
	    var term = this._anonymousNodes[ln];
	    if (term) {
	        return term;
	    }
	    var term = this._store.bnode(this._context, this._reason2);
	    this._anonymousNodes[ln] = ( term);
	    return term;
	};
	__SinkParser.prototype.node = function(str, i, res, subjectAlready) {
	    if (typeof subjectAlready == 'undefined') subjectAlready=null;
	    /*
	    Parse the <node> production.
	    Space is now skipped once at the beginning
	    instead of in multipe calls to self.skipSpace().
	    */
	    
	    var subj = subjectAlready;
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return j;
	    }
	    var i = j;
	    var ch = pyjslib_slice(str, i,  ( i + 1 ) );
	    if ((ch == "[")) {
	        var bnodeID = this.here(i);
	        var j = this.skipSpace(str,  ( i + 1 ) );
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF after '['");
	        }
	        if ((pyjslib_slice(str, j,  ( j + 1 ) ) == "=")) {
	            var i =  ( j + 1 ) ;
	            var objs = new pyjslib_List([]);
	            var j = this.objectList(str, i, objs);
	            
	            if ((j >= 0)) {
	                var subj = objs[0];
	                if ((pyjslib_len(objs) > 1)) {
	                    
	                    var __obj = new pyjslib_Iterator(objs);
	                    try {
	                        while (true) {
	                            var obj = __obj.next();
	                            
	                            
	                            this.makeStatement(new pyjslib_Tuple([this._context, this._store.sym(DAML_sameAs_URI), subj, obj]));
	                            
	                        }
	                    } catch (e) {
	                        if (e != StopIteration) {
	                            throw e;
	                        }
	                    }
	                    
	                }
	                var j = this.skipSpace(str, j);
	                if ((j < 0)) {
	                    throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when objectList expected after [ = ");
	                }
	                if ((pyjslib_slice(str, j,  ( j + 1 ) ) == ";")) {
	                    var j =  ( j + 1 ) ;
	                }
	            }
	            else {
	                throw BadSyntax(this._thisDoc, this.lines, str, i, "objectList expected after [= ");
	            }
	        }
	        if ((subj == null)) {
	            var subj = this.blankNode(bnodeID);
	        }
	        var i = this.property_list(str, j, subj);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "property_list expected");
	        }
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when ']' expected after [ <propertyList>");
	        }
	        if ((pyjslib_slice(str, j,  ( j + 1 ) ) != "]")) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "']' expected");
	        }
	        res.push(subj);
	        return  ( j + 1 ) ;
	    }
	    if ((ch == "{")) {
	        var ch2 = pyjslib_slice(str,  ( i + 1 ) ,  ( i + 2 ) );
	        if ((ch2 == "$")) {
	            i += 1;
	            var j =  ( i + 1 ) ;
	            var mylist = new pyjslib_List([]);
	            var first_run = true;
	            while (1) {
	                var i = this.skipSpace(str, j);
	                if ((i < 0)) {
	                    throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '$}', found end.");
	                }
	                if ((pyjslib_slice(str, i,  ( i + 2 ) ) == "$}")) {
	                    var j =  ( i + 2 ) ;
	                    break;
	                }
	                if (!(first_run)) {
	                    if ((pyjslib_slice(str, i,  ( i + 1 ) ) == ",")) {
	                        i += 1;
	                    }
	                    else {
	                        throw BadSyntax(this._thisDoc, this.lines, str, i, "expected: ','");
	                    }
	                }
	                else {
	                    var first_run = false;
	                }
	                var item = new pyjslib_List([]);
	                var j = this.item(str, i, item);
	                if ((j < 0)) {
	                    throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in set or '$}'");
	                }
	                mylist.push(item[0]);
	            }
	            res.push(this._store.newSet(mylist, this._context));
	            return j;
	        }
	        else {
	            var j =  ( i + 1 ) ;
	            var oldParentContext = this._parentContext;
	            this._parentContext = this._context;
	            var parentAnonymousNodes = this._anonymousNodes;
	            var grandParentVariables = this._parentVariables;
	            this._parentVariables = this._variables;
	            this._anonymousNodes = new pyjslib_Dict([]);
	            this._variables = this._variables.slice();
	            var reason2 = this._reason2;
	            this._reason2 = becauseSubexpression;
	            if ((subj == null)) {
	                var subj = this._store.formula();
	            }
	            this._context = subj;
	            while (1) {
	                var i = this.skipSpace(str, j);
	                if ((i < 0)) {
	                    throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '}', found end.");
	                }
	                if ((pyjslib_slice(str, i,  ( i + 1 ) ) == "}")) {
	                    var j =  ( i + 1 ) ;
	                    break;
	                }
	                var j = this.directiveOrStatement(str, i);
	                if ((j < 0)) {
	                    throw BadSyntax(this._thisDoc, this.lines, str, i, "expected statement or '}'");
	                }
	            }
	            this._anonymousNodes = parentAnonymousNodes;
	            this._variables = this._parentVariables;
	            this._parentVariables = grandParentVariables;
	            this._context = this._parentContext;
	            this._reason2 = reason2;
	            this._parentContext = oldParentContext;
	            res.push(subj.close());
	            return j;
	        }
	    }
	    if ((ch == "(")) {
	        var thing_type = this._store.list;
	        var ch2 = pyjslib_slice(str,  ( i + 1 ) ,  ( i + 2 ) );
	        if ((ch2 == "$")) {
	            var thing_type = this._store.newSet;
	            i += 1;
	        }
	        var j =  ( i + 1 ) ;
	        var mylist = new pyjslib_List([]);
	        while (1) {
	            var i = this.skipSpace(str, j);
	            if ((i < 0)) {
	                throw BadSyntax(this._thisDoc, this.lines, str, i, "needed ')', found end.");
	            }
	            if ((pyjslib_slice(str, i,  ( i + 1 ) ) == ")")) {
	                var j =  ( i + 1 ) ;
	                break;
	            }
	            var item = new pyjslib_List([]);
	            var j = this.item(str, i, item);
	            if ((j < 0)) {
	                throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in list or ')'");
	            }
	            mylist.push(item[0]);
	        }
	        res.push(thing_type(mylist, this._context));
	        return j;
	    }
	    var j = this.tok("this", str, i);
	    if ((j >= 0)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, i, "Keyword 'this' was ancient N3. Now use @forSome and @forAll keywords.");
	        res.push(this._context);
	        return j;
	    }
	    var j = this.tok("true", str, i);
	    if ((j >= 0)) {
	        res.push(true);
	        return j;
	    }
	    var j = this.tok("false", str, i);
	    if ((j >= 0)) {
	        res.push(false);
	        return j;
	    }
	    if ((subj == null)) {
	        var j = this.uri_ref2(str, i, res);
	        if ((j >= 0)) {
	            return j;
	        }
	    }
	    return -1;
	};
	__SinkParser.prototype.property_list = function(str, i, subj) {
	    /*
	    Parse property list
	    Leaves the terminating punctuation in the buffer
	    */
	    
	    while (1) {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found when expected verb in property list");
	            return j;
	        }
	        if ((pyjslib_slice(str, j,  ( j + 2 ) ) == ":-")) {
	            var i =  ( j + 2 ) ;
	            var res = new pyjslib_List([]);
	            var j = this.node(str, i, res, subj);
	            if ((j < 0)) {
	                throw BadSyntax(this._thisDoc, this.lines, str, i, "bad {} or () or [] node after :- ");
	            }
	            var i = j;
	            continue;
	        }
	        var i = j;
	        var v = new pyjslib_List([]);
	        var j = this.verb(str, i, v);
	        if ((j <= 0)) {
	            return i;
	        }
	        var objs = new pyjslib_List([]);
	        var i = this.objectList(str, j, objs);
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "objectList expected");
	        }
	        
	        var __obj = new pyjslib_Iterator(objs);
	        try {
	            while (true) {
	                var obj = __obj.next();
	                
	                
	                var pairFudge = v[0];
	                var dir = pairFudge[0];
	                var sym = pairFudge[1];
	                if ((dir == "->")) {
	                    this.makeStatement(new pyjslib_Tuple([this._context, sym, subj, obj]));
	                }
	                else {
	                    this.makeStatement(new pyjslib_Tuple([this._context, sym, obj, subj]));
	                }
	                
	            }
	        } catch (e) {
	            if (e != StopIteration) {
	                throw e;
	            }
	        }
	        
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in list of objects");
	            return j;
	        }
	        if ((pyjslib_slice(str, i,  ( i + 1 ) ) != ";")) {
	            return i;
	        }
	        var i =  ( i + 1 ) ;
	    }
	};
	__SinkParser.prototype.commaSeparatedList = function(str, j, res, ofUris) {
	    /*
	    return value: -1 bad syntax; >1 new position in str
	    res has things found appended
	    
	    Used to use a final value of the function to be called, e.g. this.bareWord
	    but passing the function didn't work fo js converion pyjs
	    */
	    
	    var i = this.skipSpace(str, j);
	    if ((i < 0)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found expecting comma sep list");
	        return i;
	    }
	    if ((str.charAt(i) == ".")) {
	        return j;
	    }
	    if (ofUris) {
	        var i = this.uri_ref2(str, i, res);
	    }
	    else {
	        var i = this.bareWord(str, i, res);
	    }
	    if ((i < 0)) {
	        return -1;
	    }
	    while (1) {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            return j;
	        }
	        var ch = pyjslib_slice(str, j,  ( j + 1 ) );
	        if ((ch != ",")) {
	            if ((ch != ".")) {
	                return -1;
	            }
	            return j;
	        }
	        if (ofUris) {
	            var i = this.uri_ref2(str,  ( j + 1 ) , res);
	        }
	        else {
	            var i = this.bareWord(str,  ( j + 1 ) , res);
	        }
	        if ((i < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i, "bad list content");
	            return i;
	        }
	    }
	};
	__SinkParser.prototype.objectList = function(str, i, res) {
	    var i = this.object(str, i, res);
	    if ((i < 0)) {
	        return -1;
	    }
	    while (1) {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found after object");
	            return j;
	        }
	        if ((pyjslib_slice(str, j,  ( j + 1 ) ) != ",")) {
	            return j;
	        }
	        var i = this.object(str,  ( j + 1 ) , res);
	        if ((i < 0)) {
	            return i;
	        }
	    }
	};
	__SinkParser.prototype.checkDot = function(str, i) {
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return j;
	    }
	    if ((pyjslib_slice(str, j,  ( j + 1 ) ) == ".")) {
	        return  ( j + 1 ) ;
	    }
	    if ((pyjslib_slice(str, j,  ( j + 1 ) ) == "}")) {
	        return j;
	    }
	    if ((pyjslib_slice(str, j,  ( j + 1 ) ) == "]")) {
	        return j;
	    }
	    throw BadSyntax(this._thisDoc, this.lines, str, j, "expected '.' or '}' or ']' at end of statement");
	    return i;
	};
	__SinkParser.prototype.uri_ref2 = function(str, i, res) {
	    /*
	    Generate uri from n3 representation.
	    
	    Note that the RDF convention of directly concatenating
	    NS and local name is now used though I prefer inserting a '#'
	    to make the namesapces look more like what XML folks expect.
	    */
	    
	    var qn = new pyjslib_List([]);
	    var j = this.qname(str, i, qn);
	    if ((j >= 0)) {
	        var pairFudge = qn[0];
	        var pfx = pairFudge[0];
	        var ln = pairFudge[1];
	        if ((pfx == null)) {
	            assertFudge(0, "not used?");
	            var ns =  ( this._baseURI + ADDED_HASH ) ;
	        }
	        else {
	            var ns = this._bindings[pfx];
	            if (!(ns)) {
	                if ((pfx == "_")) {
	                    res.push(this.anonymousNode(ln));
	                    return j;
	                }
	                throw BadSyntax(this._thisDoc, this.lines, str, i,  (  ( "Prefix " + pfx )  + " not bound." ) );
	            }
	        }
	        var symb = this._store.sym( ( ns + ln ) );
	        if (($rdf.Util.ArrayIndexOf(this._variables, symb) >= 0)) {
	            res.push(this._variables[symb]);
	        }
	        else {
	            res.push(symb);
	        }
	        return j;
	    }
	    var i = this.skipSpace(str, i);
	    if ((i < 0)) {
	        return -1;
	    }
	    if ((str.charAt(i) == "?")) {
	        var v = new pyjslib_List([]);
	        var j = this.variable(str, i, v);
	        if ((j > 0)) {
	            res.push(v[0]);
	            return j;
	        }
	        return -1;
	    }
	    else if ((str.charAt(i) == "<")) {
	        var i =  ( i + 1 ) ;
	        var st = i;
	        while ((i < pyjslib_len(str))) {
	            if ((str.charAt(i) == ">")) {
	                var uref = pyjslib_slice(str, st, i);
	                if (this._baseURI) {
	                    var uref = uripath_join(this._baseURI, uref);
	                }
	                else {
	                    assertFudge((uref.indexOf(":") >= 0), "With no base URI, cannot deal with relative URIs");
	                }
	                if ((pyjslib_slice(str,  ( i - 1 ) , i) == "#") && !((pyjslib_slice(uref, -1, null) == "#"))) {
	                    var uref =  ( uref + "#" ) ;
	                }
	                var symb = this._store.sym(uref);
	                if (($rdf.Util.ArrayIndexOf(this._variables,symb) >= 0)) {
	                    res.push(this._variables[symb]);
	                }
	                else {
	                    res.push(symb);
	                }
	                return  ( i + 1 ) ;
	            }
	            var i =  ( i + 1 ) ;
	        }
	        throw BadSyntax(this._thisDoc, this.lines, str, j, "unterminated URI reference");
	    }
	    else if (this.keywordsSet) {
	        var v = new pyjslib_List([]);
	        var j = this.bareWord(str, i, v);
	        if ((j < 0)) {
	            return -1;
	        }
	        if (($rdf.Util.ArrayIndexOf(this.keywords, v[0]) >= 0)) {
	            throw BadSyntax(this._thisDoc, this.lines, str, i,  (  ( "Keyword \"" + v[0] )  + "\" not allowed here." ) );
	        }
	        res.push(this._store.sym( ( this._bindings[""] + v[0] ) ));
	        return j;
	    }
	    else {
	        return -1;
	    }
	};
	__SinkParser.prototype.skipSpace = function(str, i) {
	    /*
	    Skip white space, newlines and comments.
	    return -1 if EOF, else position of first non-ws character*/
	
	    var whitespace = ' \n\r\t\f\x0b\xa0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000';
	    for (var j = (i ? i : 0); j < str.length; j++) {
	        var ch = str.charAt(j);
	        // console.log("    skipspace j= "+j + " i= " + i + " n= " + str.length);
	        // console.log(" skipspace ch <" + ch + ">");
	        if (whitespace.indexOf(ch) < 0 ) { //not ws
	            // console.log(" skipspace 2 ch <" + ch + ">");
	            if( str.charAt(j)==='#' ) {
	                for (;; j++) {
	                    // console.log("    skipspace2 j= "+j + " i= " + i + " n= " + str.length);
	                    if (j === str.length) {
	                        return -1; // EOF
	                    }
	                    if (str.charAt(j) === '\n') {
	                        this.lines = this.lines + 1;
	                        break;
	                    }
	                }; 
	            } else { // Not hash - something interesting
	                // console.log(" skipspace 3 ch <" + ch + ">");
	                return j
	            }
	        } else { // Whitespace
	            // console.log(" skipspace 5 ch <" + ch + ">");
	            if (str.charAt(j) === '\n') {
	                this.lines = this.lines + 1;
	            }
	        }
	    } // next j
	    return -1; // EOF
	};
	
	__SinkParser.prototype.variable = function(str, i, res) {
	    /*
	    ?abc -> variable(:abc)
	    */
	    
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return -1;
	    }
	    if ((pyjslib_slice(str, j,  ( j + 1 ) ) != "?")) {
	        return -1;
	    }
	    var j =  ( j + 1 ) ;
	    var i = j;
	    if (("0123456789-".indexOf(str.charAt(j)) >= 0)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, j,  (  ( "Varible name can't start with '" + str.charAt(j) )  + "s'" ) );
	        return -1;
	    }
	    while ((i < pyjslib_len(str)) && (_notNameChars.indexOf(str.charAt(i)) < 0)) {
	        var i =  ( i + 1 ) ;
	    }
	    if ((this._parentContext == null)) {
	        throw BadSyntax(this._thisDoc, this.lines, str, j,  ( "Can't use ?xxx syntax for variable in outermost level: " + pyjslib_slice(str,  ( j - 1 ) , i) ) );
	    }
	    res.push(this._store.variable(pyjslib_slice(str, j, i)));
	    return i;
	};
	__SinkParser.prototype.bareWord = function(str, i, res) {
	    /*
	    abc -> :abc
	    */
	    
	    var j = this.skipSpace(str, i);
	    if ((j < 0)) {
	        return -1;
	    }
	    var ch = str.charAt(j);
	    if (("0123456789-".indexOf(ch) >= 0)) {
	        return -1;
	    }
	    if ((_notNameChars.indexOf(ch) >= 0)) {
	        return -1;
	    }
	    var i = j;
	    while ((i < pyjslib_len(str)) && (_notNameChars.indexOf(str.charAt(i)) < 0)) {
	        var i =  ( i + 1 ) ;
	    }
	    res.push(pyjslib_slice(str, j, i));
	    return i;
	};
	__SinkParser.prototype.qname = function(str, i, res) {
	    /*
	    
	    xyz:def -> ('xyz', 'def')
	    If not in keywords and keywordsSet: def -> ('', 'def')
	    :def -> ('', 'def')    
	    */
	    
	    var i = this.skipSpace(str, i);
	    if ((i < 0)) {
	        return -1;
	    }
	    var c = str.charAt(i);
	    if (("0123456789-+".indexOf(c) >= 0)) {
	        return -1;
	    }
	    if ((_notNameChars.indexOf(c) < 0)) {
	        var ln = c;
	        var i =  ( i + 1 ) ;
	        while ((i < pyjslib_len(str))) {
	            var c = str.charAt(i);
	            if ((_notNameChars.indexOf(c) < 0)) {
	                var ln =  ( ln + c ) ;
	                var i =  ( i + 1 ) ;
	            }
	            else {
	                break;
	            }
	        }
	    }
	    else {
	        var ln = "";
	    }
	    if ((i < pyjslib_len(str)) && (str.charAt(i) == ":")) {
	        var pfx = ln;
	        var i =  ( i + 1 ) ;
	        var ln = "";
	        while ((i < pyjslib_len(str))) {
	            var c = str.charAt(i);
	            if ((_notNameChars.indexOf(c) < 0)) {
	                var ln =  ( ln + c ) ;
	                var i =  ( i + 1 ) ;
	            }
	            else {
	                break;
	            }
	        }
	        res.push(new pyjslib_Tuple([pfx, ln]));
	        return i;
	    }
	    else {
	        if (ln && this.keywordsSet && ($rdf.Util.ArrayIndexOf(this.keywords, ln) < 0)) {
	            res.push(new pyjslib_Tuple(["", ln]));
	            return i;
	        }
	        return -1;
	    }
	};
	__SinkParser.prototype.object = function(str, i, res) {
	    var j = this.subject(str, i, res);
	    if ((j >= 0)) {
	        return j;
	    }
	    else {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            return -1;
	        }
	        else {
	            var i = j;
	        }
	        if ((str.charAt(i) == "\"")) {
	            if ((pyjslib_slice(str, i,  ( i + 3 ) ) == "\"\"\"")) {
	                var delim = "\"\"\"";
	            }
	            else {
	                var delim = "\"";
	            }
	            var i =  ( i + pyjslib_len(delim) ) ;
	            var pairFudge = this.strconst(str, i, delim);
	            var j = pairFudge[0];
	            var s = pairFudge[1];
	            res.push(this._store.literal(s));
	            diag_progress("New string const ", s, j);
	            return j;
	        }
	        else {
	            return -1;
	        }
	    }
	};
	__SinkParser.prototype.nodeOrLiteral = function(str, i, res) {
	    var j = this.node(str, i, res);
	    if ((j >= 0)) {
	        return j;
	    }
	    else {
	        var j = this.skipSpace(str, i);
	        if ((j < 0)) {
	            return -1;
	        }
	        else {
	            var i = j;
	        }
	        var ch = str.charAt(i);
	        if (("-+0987654321".indexOf(ch) >= 0)) {
		
		    datetime_syntax.lastIndex = 0;
	            var m = datetime_syntax.exec(str.slice(i));
	            if ((m != null)) {
			// j =  ( i + datetime_syntax.lastIndex ) ;
			var val = m[0];
			j = i + val.length;
			if ((val.indexOf("T") >= 0)) {
			    res.push(this._store.literal(val, undefined, this._store.sym(DATETIME_DATATYPE)));
			} else {
			    res.push(this._store.literal(val, undefined, this._store.sym(DATE_DATATYPE)));
			}	
		
		    } else {
			number_syntax.lastIndex = 0;
			var m = number_syntax.exec(str.slice(i));
			if ((m == null)) {
			    throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad number or date syntax");
			}
			j =  ( i + number_syntax.lastIndex ) ;
			var val = pyjslib_slice(str, i, j);
			if ((val.indexOf("e") >= 0)) {
			    res.push(this._store.literal(parseFloat(val), undefined, this._store.sym(FLOAT_DATATYPE)));
			}
			else if ((pyjslib_slice(str, i, j).indexOf(".") >= 0)) {
			    res.push(this._store.literal(parseFloat(val), undefined, this._store.sym(DECIMAL_DATATYPE)));
			}
			else {
			    res.push(this._store.literal(parseInt(val), undefined, this._store.sym(INTEGER_DATATYPE)));
			}
		    };
		    return j; // Where we have got up to
	        }
	        if ((str.charAt(i) == "\"")) {
	            if ((pyjslib_slice(str, i,  ( i + 3 ) ) == "\"\"\"")) {
	                var delim = "\"\"\"";
	            }
	            else {
	                var delim = "\"";
	            }
	            var i =  ( i + pyjslib_len(delim) ) ;
	            var dt = null;
	            var pairFudge = this.strconst(str, i, delim);
	            var j = pairFudge[0];
	            var s = pairFudge[1];
	            var lang = null;
	            if ((pyjslib_slice(str, j,  ( j + 1 ) ) == "@")) {
	                langcode.lastIndex = 0;
	                
	                var m = langcode.exec(str.slice( ( j + 1 ) ));
	                if ((m == null)) {
	                    throw BadSyntax(this._thisDoc, startline, str, i, "Bad language code syntax on string literal, after @");
	                }
	                var i =  (  ( langcode.lastIndex + j )  + 1 ) ;
	                
	                var lang = pyjslib_slice(str,  ( j + 1 ) , i);
	                var j = i;
	            }
	            if ((pyjslib_slice(str, j,  ( j + 2 ) ) == "^^")) {
	                var res2 = new pyjslib_List([]);
	                var j = this.uri_ref2(str,  ( j + 2 ) , res2);
	                var dt = res2[0];
	            }
	            res.push(this._store.literal(s, lang, dt));
	            return j;
	        }
	        else {
	            return -1;
	        }
	    }
	};
	__SinkParser.prototype.strconst = function(str, i, delim) {
	    /*
	    parse an N3 string constant delimited by delim.
	    return index, val
	    */
	    
	    var j = i;
	    var ustr = "";
	    var startline = this.lines;
	    while ((j < pyjslib_len(str))) {
	        var i =  ( j + pyjslib_len(delim) ) ;
	        if ((pyjslib_slice(str, j, i) == delim)) {
	            return new pyjslib_Tuple([i, ustr]);
	        }
	        if ((str.charAt(j) == "\"")) {
	            var ustr =  ( ustr + "\"" ) ;
	            var j =  ( j + 1 ) ;
	            continue;
	        }
	        interesting.lastIndex = 0;
	        var m = interesting.exec(str.slice(j));
	        if (!(m)) {
	            throw BadSyntax(this._thisDoc, startline, str, j,  (  (  ( "Closing quote missing in string at ^ in " + pyjslib_slice(str,  ( j - 20 ) , j) )  + "^" )  + pyjslib_slice(str, j,  ( j + 20 ) ) ) );
	        }
	        var i =  (  ( j + interesting.lastIndex )  - 1 ) ;
	        var ustr =  ( ustr + pyjslib_slice(str, j, i) ) ;
	        var ch = str.charAt(i);
	        if ((ch == "\"")) {
	            var j = i;
	            continue;
	        }
	        else if ((ch == "\r")) {
	            var j =  ( i + 1 ) ;
	            continue;
	        }
	        else if ((ch == "\n")) {
	            if ((delim == "\"")) {
	                throw BadSyntax(this._thisDoc, startline, str, i, "newline found in string literal");
	            }
	            this.lines =  ( this.lines + 1 ) ;
	            var ustr =  ( ustr + ch ) ;
	            var j =  ( i + 1 ) ;
	            this.previousLine = this.startOfLine;
	            this.startOfLine = j;
	        }
	        else if ((ch == "\\")) {
	            var j =  ( i + 1 ) ;
	            var ch = pyjslib_slice(str, j,  ( j + 1 ) );
	            if (!(ch)) {
	                throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal (2)");
	            }
	            var k = string_find("abfrtvn\\\"", ch);
	            if ((k >= 0)) {
	                var uch = "\a\b\f\r\t\v\n\\\"".charAt(k);
	                var ustr =  ( ustr + uch ) ;
	                var j =  ( j + 1 ) ;
	            }
	            else if ((ch == "u")) {
	                var pairFudge = this.uEscape(str,  ( j + 1 ) , startline);
	                var j = pairFudge[0];
	                var ch = pairFudge[1];
	                var ustr =  ( ustr + ch ) ;
	            }
	            else if ((ch == "U")) {
	                var pairFudge = this.UEscape(str,  ( j + 1 ) , startline);
	                var j = pairFudge[0];
	                var ch = pairFudge[1];
	                var ustr =  ( ustr + ch ) ;
	            }
	            else {
	                throw BadSyntax(this._thisDoc, this.lines, str, i, "bad escape");
	            }
	        }
	    }
	    throw BadSyntax(this._thisDoc, this.lines, str, i, "unterminated string literal");
	};
	__SinkParser.prototype.uEscape = function(str, i, startline) {
	    var j = i;
	    var count = 0;
	    var value = 0;
	    while ((count < 4)) {
	        var chFudge = pyjslib_slice(str, j,  ( j + 1 ) );
	        var ch = chFudge.toLowerCase();
	        var j =  ( j + 1 ) ;
	        if ((ch == "")) {
	            throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
	        }
	        var k = string_find("0123456789abcdef", ch);
	        if ((k < 0)) {
	            throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
	        }
	        var value =  (  ( value * 16 )  + k ) ;
	        var count =  ( count + 1 ) ;
	    }
	    var uch = String.fromCharCode(value);
	    return new pyjslib_Tuple([j, uch]);
	};
	__SinkParser.prototype.UEscape = function(str, i, startline) {
	    var j = i;
	    var count = 0;
	    var value = "\\U";
	    while ((count < 8)) {
	        var chFudge = pyjslib_slice(str, j,  ( j + 1 ) );
	        var ch = chFudge.toLowerCase();
	        var j =  ( j + 1 ) ;
	        if ((ch == "")) {
	            throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
	        }
	        var k = string_find("0123456789abcdef", ch);
	        if ((k < 0)) {
	            throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
	        }
	        var value =  ( value + ch ) ;
	        var count =  ( count + 1 ) ;
	    }
	    var uch = stringFromCharCode( (  ( "0x" + pyjslib_slice(value, 2, 10) )  - 0 ) );
	    return new pyjslib_Tuple([j, uch]);
	};
	function OLD_BadSyntax(uri, lines, str, i, why) {
	    return new __OLD_BadSyntax(uri, lines, str, i, why);
	}
	function __OLD_BadSyntax(uri, lines, str, i, why) {
	    this._str = str.encode("utf-8");
	    this._str = str;
	    this._i = i;
	    this._why = why;
	    this.lines = lines;
	    this._uri = uri;
	}
	__OLD_BadSyntax.prototype.toString = function() {
	    var str = this._str;
	    var i = this._i;
	    var st = 0;
	    if ((i > 60)) {
	        var pre = "...";
	        var st =  ( i - 60 ) ;
	    }
	    else {
	        var pre = "";
	    }
	    if (( ( pyjslib_len(str) - i )  > 60)) {
	        var post = "...";
	    }
	    else {
	        var post = "";
	    }
	    return "Line %i of <%s>: Bad syntax (%s) at ^ in:\n\"%s%s^%s%s\"" % new pyjslib_Tuple([ ( this.lines + 1 ) , this._uri, this._why, pre, pyjslib_slice(str, st, i), pyjslib_slice(str, i,  ( i + 60 ) ), post]);
	};
	function BadSyntax(uri, lines, str, i, why) {
	    return  (  (  (  (  (  (  (  ( "Line " +  ( lines + 1 )  )  + " of <" )  + uri )  + ">: Bad syntax: " )  + why )  + "\nat: \"" )  + pyjslib_slice(str, i,  ( i + 30 ) ) )  + "\"" ) ;
	}
	
	
	function stripCR(str) {
	    var res = "";
	    
	    var __ch = new pyjslib_Iterator(str);
	    try {
	        while (true) {
	            var ch = __ch.next();
	            
	            
	            if ((ch != "\r")) {
	                var res =  ( res + ch ) ;
	            }
	            
	        }
	    } catch (e) {
	        if (e != StopIteration) {
	            throw e;
	        }
	    }
	    
	    return res;
	}
	
	
	function dummyWrite(x) {
	}
	
	return SinkParser;
	
	}();
	//  Identity management and indexing for RDF
	//
	// This file provides  IndexedFormula a formula (set of triples) which
	// indexed by predicate, subject and object.
	//
	// It "smushes"  (merges into a single node) things which are identical
	// according to owl:sameAs or an owl:InverseFunctionalProperty
	// or an owl:FunctionalProperty
	//
	//
	//  2005-10 Written Tim Berners-Lee
	//  2007    Changed so as not to munge statements from documents when smushing
	//
	//
	/* jsl:option explicit */
	
	$rdf.IndexedFormula = (function () {
	  var owl_ns = 'http://www.w3.org/2002/07/owl#'
	  // var link_ns = "http://www.w3.org/2007/ont/link#"
	
	  /* hashString functions are used as array indeces. This is done to avoid
	  ** conflict with existing properties of arrays such as length and map.
	  ** See issue 139.
	  */
	  $rdf.Literal.prototype.hashString = $rdf.Literal.prototype.toNT
	  $rdf.NamedNode.prototype.hashString = $rdf.NamedNode.prototype.toNT
	  $rdf.BlankNode.prototype.hashString = $rdf.BlankNode.prototype.toNT
	  $rdf.Collection.prototype.hashString = $rdf.Collection.prototype.toNT
	
	  // Stores an associative array that maps URIs to functions
	  $rdf.IndexedFormula = function (features) {
	    this.statements = [] // As in Formula
	    this.optional = []
	    this.propertyActions = [] // Array of functions to call when getting statement with {s X o}
	    // maps <uri> to [f(F,s,p,o),...]
	    this.classActions = [] // Array of functions to call when adding { s type X }
	    this.redirections = [] // redirect to lexically smaller equivalent symbol
	    this.aliases = [] // reverse mapping to redirection: aliases for this
	    this.HTTPRedirects = [] // redirections we got from HTTP
	    this.subjectIndex = [] // Array of statements with this X as subject
	    this.predicateIndex = [] // Array of statements with this X as subject
	    this.objectIndex = [] // Array of statements with this X as object
	    this.whyIndex = [] // Array of statements with X as provenance
	    this.index = [
	      this.subjectIndex,
	      this.predicateIndex,
	      this.objectIndex,
	      this.whyIndex
	    ]
	    this.namespaces = {} // Dictionary of namespace prefixes
	    if (features === undefined) {
	      features = [
	        'sameAs',
	        'InverseFunctionalProperty',
	        'FunctionalProperty'
	      ]
	    }
	    //    this.features = features
	    // Callbackify?
	    function handleRDFType (formula, subj, pred, obj, why) {
	      if (formula.typeCallback) {
	        formula.typeCallback(formula, obj, why)
	      }
	
	      var x = formula.classActions[obj.hashString()]
	      var done = false
	      if (x) {
	        for (var i = 0; i < x.length; i++) {
	          done = done || x[i](formula, subj, pred, obj, why)
	        }
	      }
	      return done // statement given is not needed if true
	    } // handleRDFType
	
	    // If the predicate is #type, use handleRDFType to create a typeCallback on the object
	    this.propertyActions['<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>'] = [ handleRDFType ]
	
	    // Assumption: these terms are not redirected @@fixme
	    if ($rdf.Util.ArrayIndexOf(features, 'sameAs') >= 0) {
	      this.propertyActions['<http://www.w3.org/2002/07/owl#sameAs>'] = [
	        function (formula, subj, pred, obj, why) {
	          // $rdf.log.warn("Equating "+subj.uri+" sameAs "+obj.uri);  //@@
	          formula.equate(subj, obj)
	          return true // true if statement given is NOT needed in the store
	        }
	      ] // sameAs -> equate & don't add to index
	    }
	    if ($rdf.Util.ArrayIndexOf(features, 'InverseFunctionalProperty') >= 0) {
	      this.classActions['<' + owl_ns + 'InverseFunctionalProperty>'] = [
	        function (formula, subj, pred, obj, addFn) {
	          // yes subj not pred!
	          return formula.newPropertyAction(subj, handle_IFP)
	        }
	      ] // IFP -> handle_IFP, do add to index
	    }
	    if ($rdf.Util.ArrayIndexOf(features, 'FunctionalProperty') >= 0) {
	      this.classActions['<' + owl_ns + 'FunctionalProperty>'] = [
	        function (formula, subj, proj, obj, addFn) {
	          return formula.newPropertyAction(subj, handle_FP)
	        }
	      ] // FP => handleFP, do add to index
	    }
	
	    // Handle Inverse Functional Property
	    function handle_IFP (formula, subj, pred, obj) {
	      var s1 = formula.any(undefined, pred, obj)
	      if (!s1) {
	        return false // First time with this value
	      }
	      // $rdf.log.warn("Equating "+s1.uri+" and "+subj.uri + " because IFP "+pred.uri);  //@@
	      formula.equate(s1, subj)
	      return true
	    } // handle_IFP
	
	    // Handle Functional Property
	    function handle_FP (formula, subj, pred, obj) {
	      var o1 = formula.any(subj, pred, undefined)
	      if (!o1) {
	        return false // First time with this value
	      }
	      // $rdf.log.warn("Equating "+o1.uri+" and "+obj.uri + " because FP "+pred.uri);  //@@
	      formula.equate(o1, obj)
	      return true
	    } // handle_FP
	  } /* end IndexedFormula */
	
	  $rdf.IndexedFormula.prototype = new $rdf.Formula()
	  $rdf.IndexedFormula.prototype.constructor = $rdf.IndexedFormula
	  $rdf.IndexedFormula.SuperClass = $rdf.Formula
	
	  $rdf.IndexedFormula.prototype.newPropertyAction = function newPropertyAction (pred, action) {
	    // $rdf.log.debug("newPropertyAction:  "+pred)
	    var hash = pred.hashString()
	    if (!this.propertyActions[hash]) {
	      this.propertyActions[hash] = []
	    }
	    this.propertyActions[hash].push(action)
	    // Now apply the function to to statements already in the store
	    var toBeFixed = this.statementsMatching(undefined, pred, undefined)
	    var done = false
	    for (var i = 0; i < toBeFixed.length; i++) { // NOT optimized - sort toBeFixed etc
	      done = done || action(this, toBeFixed[i].subject, pred, toBeFixed[i].object)
	    }
	    return done
	  }
	
	  $rdf.IndexedFormula.prototype.setPrefixForURI = function (prefix, nsuri) {
	    // TODO:This is a hack for our own issues, which ought to be fixed post-release
	    // See http://dig.csail.mit.edu/cgi-bin/roundup.cgi/$rdf/issue227
	    if (prefix === 'tab' && this.namespaces['tab']) {
	      return
	    } // There are files around with long badly generated prefixes like this
	    if (prefix.slice(0, 2) === 'ns' || prefix.slice(0, 7) === 'default') {
	      return
	    }
	    this.namespaces[prefix] = nsuri
	  }
	
	  // Deprocated ... name too generic
	  $rdf.IndexedFormula.prototype.register = function (prefix, nsuri) {
	    this.namespaces[prefix] = nsuri
	  }
	
	  /** simplify graph in store when we realize two identifiers are equivalent
	
	  We replace the bigger with the smaller.
	
	  */
	  $rdf.IndexedFormula.prototype.equate = function (u1, u2) {
	    // $rdf.log.warn("Equating "+u1+" and "+u2); // @@
	    // @@JAMBO Must canonicalize the uris to prevent errors from a=b=c
	    // 03-21-2010
	    u1 = this.canon(u1)
	    u2 = this.canon(u2)
	    var d = u1.compareTerm(u2)
	    if (!d) {
	      return true // No information in {a = a}
	    }
	    // var big
	    // var small
	    if (d < 0) { // u1 less than u2
	      return this.replaceWith(u2, u1)
	    } else {
	      return this.replaceWith(u1, u2)
	    }
	  }
	
	  // Replace big with small, obsoleted with obsoleting.
	  //
	  $rdf.IndexedFormula.prototype.replaceWith = function (big, small) {
	    // $rdf.log.debug("Replacing "+big+" with "+small) // @@
	    var oldhash = big.hashString()
	    var newhash = small.hashString()
	
	    var moveIndex = function (ix) {
	      var oldlist = ix[oldhash]
	      if (!oldlist) {
	        return // none to move
	      }
	      var newlist = ix[newhash]
	      if (!newlist) {
	        ix[newhash] = oldlist
	      } else {
	        ix[newhash] = oldlist.concat(newlist)
	      }
	      delete ix[oldhash]
	    }
	
	    // the canonical one carries all the indexes
	    for (var i = 0; i < 4; i++) {
	      moveIndex(this.index[i])
	    }
	
	    this.redirections[oldhash] = small
	    if (big.uri) {
	      // @@JAMBO: must update redirections,aliases from sub-items, too.
	      if (!this.aliases[newhash]) {
	        this.aliases[newhash] = []
	      }
	      this.aliases[newhash].push(big) // Back link
	
	      if (this.aliases[oldhash]) {
	        for (i = 0; i < this.aliases[oldhash].length; i++) {
	          this.redirections[this.aliases[oldhash][i].hashString()] = small
	          this.aliases[newhash].push(this.aliases[oldhash][i])
	        }
	      }
	
	      this.add(small, this.sym('http://www.w3.org/2007/ont/link#uri'), big.uri)
	
	      // If two things are equal, and one is requested, we should request the other.
	      if (this.fetcher) {
	        this.fetcher.nowKnownAs(big, small)
	      }
	    }
	
	    moveIndex(this.classActions)
	    moveIndex(this.propertyActions)
	
	    // $rdf.log.debug("Equate done. "+big+" to be known as "+small)
	    return true // true means the statement does not need to be put in
	  }
	
	  // Return the symbol with canonical URI as smushed
	  $rdf.IndexedFormula.prototype.canon = function (term) {
	    if (!term) {
	      return term
	    }
	    var y = this.redirections[term.hashString()]
	    if (!y) {
	      return term
	    }
	    return y
	  }
	
	  // Compare by canonical URI as smushed
	  $rdf.IndexedFormula.prototype.sameThings = function (x, y) {
	    if (x.sameTerm(y)) {
	      return true
	    }
	    var x1 = this.canon(x)
	    //    alert('x1='+x1)
	    if (!x1) return false
	    var y1 = this.canon(y)
	    //    alert('y1='+y1); //@@
	    if (!y1) return false
	    return (x1.uri === y1.uri)
	  }
	
	  // A list of all the URIs by which this thing is known
	  $rdf.IndexedFormula.prototype.uris = function (term) {
	    var cterm = this.canon(term)
	    var terms = this.aliases[cterm.hashString()]
	    if (!cterm.uri) return []
	    var res = [ cterm.uri ]
	    if (terms) {
	      for (var i = 0; i < terms.length; i++) {
	        res.push(terms[i].uri)
	      }
	    }
	    return res
	  }
	
	  // Add a triple to the store
	  //
	  //  Returns the statement added
	  // (would it be better to return the original formula for chaining?)
	  //
	  $rdf.IndexedFormula.prototype.add = function (subj, pred, obj, why) {
	    var i
	    if (arguments.length === 1) {
	      if (subj instanceof Array) {
	        for (i = 0; i < subj.length; i++) {
	          this.add(subj[i])
	        }
	      } else if (subj instanceof $rdf.Statement) {
	        this.add(subj.subject, subj.predicate, subj.object, subj.why)
	      } else if (subj instanceof $rdf.IndexedFormula) {
	        this.add(subj.statements)
	      }
	      return this
	    }
	    var actions
	    var st
	    if (!why) {
	      // system generated
	      why = this.fetcher ? this.fetcher.appNode : this.sym('chrome:theSession')
	    }
	    // defined in source.js, is this OK with identity.js only user?
	    subj = $rdf.term(subj)
	    pred = $rdf.term(pred)
	    obj = $rdf.term(obj)
	    why = $rdf.term(why)
	
	    if (this.predicateCallback) {
	      this.predicateCallback(this, pred, why)
	    }
	
	    // Action return true if the statement does not need to be added
	    var predHash = this.canon(pred).hashString()
	    actions = this.propertyActions[predHash] // Predicate hash
	    var done = false
	    if (actions) {
	      // alert('type: '+typeof actions +' @@ actions='+actions)
	      for (i = 0; i < actions.length; i++) {
	        done = done || actions[i](this, subj, pred, obj, why)
	      }
	    }
	
	    // If we are tracking provenanance, every thing should be loaded into the store
	    // if (done) return new Statement(subj, pred, obj, why); // Don't put it in the store
	    // still return this statement for owl:sameAs input
	    var hash = [ this.canon(subj).hashString(), predHash,
	      this.canon(obj).hashString(), this.canon(why).hashString()]
	    st = new $rdf.Statement(subj, pred, obj, why)
	    for (i = 0; i < 4; i++) {
	      var ix = this.index[i]
	      var h = hash[i]
	      if (!ix[h]) {
	        ix[h] = []
	      }
	      ix[h].push(st) // Set of things with this as subject, etc
	    }
	
	    // $rdf.log.debug("ADDING    {"+subj+" "+pred+" "+obj+"} "+why)
	    this.statements.push(st)
	    return st
	  } // add
	
	  // Find out whether a given URI is used as symbol in the formula
	  $rdf.IndexedFormula.prototype.mentionsURI = function (uri) {
	    var hash = '<' + uri + '>'
	    return (!!this.subjectIndex[hash] ||
	      !!this.objectIndex[hash] ||
	      !!this.predicateIndex[hash])
	  }
	
	  // Find an unused id for a file being edited: return a symbol
	  // (Note: Slow iff a lot of them -- could be O(log(k)) )
	  $rdf.IndexedFormula.prototype.nextSymbol = function (doc) {
	    for (var i = 0;;i++) {
	      var uri = doc.uri + '#n' + i
	      if (!this.mentionsURI(uri)) return this.sym(uri)
	    }
	  }
	
	  $rdf.IndexedFormula.prototype.anyStatementMatching =
	    function (subj, pred, obj, why) {
	      var x = this.statementsMatching(subj, pred, obj, why, true)
	      if (!x || x.length === 0) {
	        return undefined
	      }
	      return x[0]
	    }
	
	  // Return statements matching a pattern
	  // ALL CONVENIENCE LOOKUP FUNCTIONS RELY ON THIS!
	  $rdf.IndexedFormula.prototype.statementsMatching = function (subj, pred, obj, why, justOne) {
	    // $rdf.log.debug("Matching {"+subj+" "+pred+" "+obj+"}")
	
	    var pat = [ subj, pred, obj, why ]
	    var pattern = []
	    var hash = []
	    var wild = [] // wildcards
	    var given = [] // Not wild
	    var p
	    var list
	    for (p = 0; p < 4; p++) {
	      pattern[p] = this.canon($rdf.term(pat[p]))
	      if (!pattern[p]) {
	        wild.push(p)
	      } else {
	        given.push(p)
	        hash[p] = pattern[p].hashString()
	      }
	    }
	    if (given.length === 0) {
	      return this.statements
	    }
	    if (given.length === 1) { // Easy too, we have an index for that
	      p = given[0]
	      list = this.index[p][hash[p]]
	      if (list && justOne) {
	        if (list.length > 1) {
	          list = list.slice(0, 1)
	        }
	      }
	      list = list || []
	      return list
	    }
	
	    // Now given.length is 2, 3 or 4.
	    // We hope that the scale-free nature of the data will mean we tend to get
	    // a short index in there somewhere!
	
	    var best = 1e10 // really bad
	    var best_i
	    var i
	    for (i = 0; i < given.length; i++) {
	      p = given[i] // Which part we are dealing with
	      list = this.index[p][hash[p]]
	      if (!list) {
	        return [] // No occurrences
	      }
	      if (list.length < best) {
	        best = list.length
	        best_i = i // (not p!)
	      }
	    }
	
	    // Ok, we have picked the shortest index but now we have to filter it
	    var best_p = given[best_i]
	    var possibles = this.index[best_p][hash[best_p]]
	    var check = given.slice(0, best_i).concat(given.slice(best_i + 1)) // remove best_i
	    var results = []
	    var parts = [ 'subject', 'predicate', 'object', 'why' ]
	    for (var j = 0; j < possibles.length; j++) {
	      var st = possibles[j]
	
	      for (i = 0; i < check.length; i++) { // for each position to be checked
	        p = check[i]
	        if (!this.canon(st[parts[p]]).sameTerm(pattern[p])) {
	          st = null
	          break
	        }
	      }
	      if (st != null) {
	        results.push(st)
	        if (justOne) break
	      }
	    }
	
	    return results
	  } // statementsMatching
	
	  /** Remove all statemnts in a doc
	  **
	  **/
	  $rdf.IndexedFormula.prototype.removeDocument = function (doc) {
	    var sts = this.statementsMatching(undefined, undefined, undefined, doc).slice() // Take a copy as this is the actual index
	    for (var i = 0; i < sts.length; i++) {
	      this.removeStatement(sts[i])
	    }
	    return this
	  }
	
	  /** Find a statement object and remove it
	  **
	  ** Or array of statements or graph
	  **/
	  $rdf.IndexedFormula.prototype.remove = function (st) {
	    if (st instanceof Array) {
	      for (var i = 0; i < st.length; i++) {
	        this.remove(st[i])
	      }
	      return this
	    }
	    if (st instanceof $rdf.IndexedFormula) {
	      return this.remove(st.statements)
	    }
	    var sts = this.statementsMatching(st.subject, st.predicate, st.object, st.why)
	    if (!sts.length) {
	      throw new Error('Statement to be removed is not on store: ' + st)
	    }
	    this.removeStatement(sts[0])
	    return this
	  }
	
	  $rdf.IndexedFormula.prototype.removeMatches = function (subject, predicate, object, why) {
	    this.removeStatements(this.staementsMatching(subject, predicate, object, why))
	    return this
	  }
	
	  $rdf.IndexedFormula.prototype.removeStatements = function (sts) {
	    for (var i = 0; i < sts.length; i++) {
	      this.remove(sts[i])
	    }
	    return this
	  }
	
	  /**
	   * Remove a particular statement object from the store
	   *
	   * st    a statement which is already in the store and indexed.
	   *      Make sure you only use this for these.
	   *    Otherwise, you should use remove() above.
	   */
	  $rdf.IndexedFormula.prototype.removeStatement = function (st) {
	    // $rdf.log.debug("entering remove w/ st=" + st)
	    var term = [ st.subject, st.predicate, st.object, st.why ]
	    for (var p = 0; p < 4; p++) {
	      var c = this.canon(term[p])
	      var h = c.hashString()
	      if (!this.index[p][h]) {
	        // $rdf.log.warn ("Statement removal: no index '+p+': "+st)
	      } else {
	        $rdf.Util.RDFArrayRemove(this.index[p][h], st)
	      }
	    }
	    $rdf.Util.RDFArrayRemove(this.statements, st)
	    return this
	  } // remove
	
	  // ////////////////// Self-consistency checking for diagnostis only
	  // Is each statement properly indexed?
	  $rdf.IndexedFormula.prototype.checkStatementList = function (sts, from) {
	    var names = ['subject', 'predicate', 'object', 'why']
	    var origin = ' found in ' + names[from] + ' index.'
	    var st
	    for (var j = 0; j < sts.length; j++) {
	      st = sts[j]
	      var term = [ st.subject, st.predicate, st.object, st.why ]
	
	      var arrayContains = function (a, x) {
	        for (var i = 0; i < a.length; i++) {
	          if (a[i].subject.sameTerm(x.subject) &&
	            a[i].predicate.sameTerm(x.predicate) &&
	            a[i].object.sameTerm(x.object) &&
	            a[i].why.sameTerm(x.why)) {
	            return true
	          }
	        }
	      }
	
	      for (var p = 0; p < 4; p++) {
	        var c = this.canon(term[p])
	        var h = c.hashString()
	        if (!this.index[p][h]) {
	          throw new Error('No ' + name[p] + ' index for statement ' + st + '@' + st.why + origin)
	        } else {
	          if (!arrayContains(this.index[p][h], st)) {
	            throw new Error('Index for ' + name[p] + ' does not have statement ' + st + '@' + st.why + origin)
	          }
	        }
	      }
	      if (!arrayContains(this.statements, st)) {
	        throw new Error('Statement list does not statement ' + st + '@' + st.why + origin)
	      }
	    }
	  }
	
	  $rdf.IndexedFormula.prototype.check = function () {
	    this.checkStatementList(this.statements)
	    for (var p = 0; p < 4; p++) {
	      var ix = this.index[p]
	      for (var key in ix) {
	        if (ix.hasOwnProperty(key)) {
	          this.checkStatementList(ix[key], p)
	        }
	      }
	    }
	  }
	
	  /** remove all statements matching args (within limit) **/
	  $rdf.IndexedFormula.prototype.removeMany = function (subj, pred, obj, why, limit) {
	    // $rdf.log.debug("entering removeMany w/ subj,pred,obj,why,limit = " + subj +", "+ pred+", " + obj+", " + why+", " + limit)
	    var sts = this.statementsMatching(subj, pred, obj, why, false)
	    // This is a subtle bug that occcured in updateCenter.js too.
	    // The fact is, this.statementsMatching returns this.whyIndex instead of a copy of it
	    // but for perfromance consideration, it's better to just do that
	    // so make a copy here.
	    var statements = []
	    for (var i = 0; i < sts.length; i++) statements.push(sts[i])
	    if (limit) statements = statements.slice(0, limit)
	    for (i = 0; i < statements.length; i++) this.remove(statements[i])
	  } // removeMany
	
	  /** Utility**/
	
	  /*  @method: copyTo
	      @description: replace @template with @target and add appropriate triples (no triple removed)
	                    one-direction replication
	  */
	  $rdf.IndexedFormula.prototype.copyTo = function (template, target, flags) {
	    if (!flags) flags = []
	    var statList = this.statementsMatching(template)
	    if ($rdf.Util.ArrayIndexOf(flags, 'two-direction') !== -1) {
	      statList.concat(this.statementsMatching(undefined, undefined, template))
	    }
	    for (var i = 0;i < statList.length;i++) {
	      var st = statList[i]
	      switch (st.object.termType) {
	        case 'symbol':
	          this.add(target, st.predicate, st.object)
	          break
	        case 'literal':
	        case 'bnode':
	        case 'collection':
	          this.add(target, st.predicate, st.object.copy(this))
	      }
	      if ($rdf.Util.ArrayIndexOf(flags, 'delete') !== -1) {
	        this.remove(st)
	      }
	    }
	  }
	  // for the case when you alter this.value (text modified in userinput.js)
	  $rdf.Literal.prototype.copy = function () {
	    return new $rdf.Literal(this.value, this.lang, this.datatype)
	  }
	  $rdf.BlankNode.prototype.copy = function (formula) { // depends on the formula
	    var bnodeNew = new $rdf.BlankNode()
	    formula.copyTo(this, bnodeNew)
	    return bnodeNew
	  }
	  /**  Full N3 bits  -- placeholders only to allow parsing, no functionality! **/
	
	  // Universals are Variables
	  $rdf.IndexedFormula.prototype.newUniversal = function (uri) {
	    var x = this.sym(uri)
	    if (!this._universalVariables) this._universalVariables = []
	    this._universalVariables.push(x)
	    return x
	  }
	
	  // Existentials are BNodes - something exists without naming
	  $rdf.IndexedFormula.prototype.newExistential = function (uri) {
	    if (!uri) return this.bnode()
	    var x = this.sym(uri)
	    return this.declareExistential(x)
	  }
	
	  $rdf.IndexedFormula.prototype.declareExistential = function (x) {
	    if (!this._existentialVariables) this._existentialVariables = []
	    this._existentialVariables.push(x)
	    return x
	  }
	
	  $rdf.IndexedFormula.prototype.formula = function (features) {
	    return new $rdf.IndexedFormula(features)
	  }
	
	  $rdf.IndexedFormula.prototype.close = function () {
	    return this
	  }
	
	  $rdf.IndexedFormula.prototype.hashString = $rdf.IndexedFormula.prototype.toNT
	
	  return $rdf.IndexedFormula
	})()
	// ends
	//  RDFa Parser for rdflib.js
	
	// Originally by: Alex Milowski
	// From https://github.com/alexmilowski/green-turtle
	// Converted: timbl 2015-08-25 not yet working
	// Added wrapper: csarven 2016-05-09 working
	
	// $rdf.RDFaProcessor.prototype = new Object() // Was URIResolver
	
	// $rdf.RDFaProcessor.prototype.constructor=$rdf.RDFaProcessor
	
	// options.base = base URI    not really an option, shopuld always be set.
	//
	
	if (typeof Node === 'undefined') { //  @@@@@@ Global. Interface to xmldom.
	  var Node = {
	    ELEMENT_NODE: 1,
	    ATTRIBUTE_NODE: 2,
	    TEXT_NODE: 3,
	    CDATA_SECTION_NODE: 4,
	    ENTITY_REFERENCE_NODE: 5,
	    ENTITY_NODE: 6,
	    PROCESSING_INSTRUCTION_NODE: 7,
	    COMMENT_NODE: 8,
	    DOCUMENT_NODE: 9,
	    DOCUMENT_TYPE_NODE: 10,
	    DOCUMENT_FRAGMENT_NODE: 11,
	    NOTATION_NODE: 12
	  }
	}
	
	// //////////////////////////////
	
	$rdf.RDFaProcessor = function RDFaProcessor (kb, options) {
	  this.options = options || {}
	  this.kb = kb
	  this.target = options.target || {
	      graph: {
	        subjects: {},
	        prefixes: {},
	        terms: {}
	      }
	  }
	
	  //XXX: Added to track bnodes
	  this.blankNodes = []
	  //XXX: Added for normalisation
	  this.htmlOptions = {
	    'selfClosing': "br img input area base basefont col colgroup source wbr isindex link meta param hr"
	  }
	  this.theOne = '_:' + (new Date()).getTime()
	  this.language = null
	  this.vocabulary = null
	  this.blankCounter = 0
	  this.langAttributes = [ { namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' } ]
	  this.inXHTMLMode = false
	  this.absURIRE = /[\w\_\-]+:\S+/
	  this.finishedHandlers = []
	  this.init()
	}
	
	$rdf.RDFaProcessor.prototype.newBlankNode = function () {
	  this.blankCounter++
	  return '_:' + this.blankCounter
	}
	
	$rdf.RDFaProcessor.XMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral'
	$rdf.RDFaProcessor.HTMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML'
	$rdf.RDFaProcessor.PlainLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral'
	$rdf.RDFaProcessor.objectURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object'
	$rdf.RDFaProcessor.typeURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
	
	$rdf.RDFaProcessor.nameChar = '[-A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF\.0-9\u00B7\u0300-\u036F\u203F-\u2040]'
	$rdf.RDFaProcessor.nameStartChar = '[\u0041-\u005A\u0061-\u007A\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF\u0100-\u0131\u0134-\u013E\u0141-\u0148\u014A-\u017E\u0180-\u01C3\u01CD-\u01F0\u01F4-\u01F5\u01FA-\u0217\u0250-\u02A8\u02BB-\u02C1\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03CE\u03D0-\u03D6\u03DA\u03DC\u03DE\u03E0\u03E2-\u03F3\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E-\u0481\u0490-\u04C4\u04C7-\u04C8\u04CB-\u04CC\u04D0-\u04EB\u04EE-\u04F5\u04F8-\u04F9\u0531-\u0556\u0559\u0561-\u0586\u05D0-\u05EA\u05F0-\u05F2\u0621-\u063A\u0641-\u064A\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D3\u06D5\u06E5-\u06E6\u0905-\u0939\u093D\u0958-\u0961\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8B\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AE0\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B36-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5\u0BB7-\u0BB9\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CDE\u0CE0-\u0CE1\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D60-\u0D61\u0E01-\u0E2E\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EAE\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0F40-\u0F47\u0F49-\u0F69\u10A0-\u10C5\u10D0-\u10F6\u1100\u1102-\u1103\u1105-\u1107\u1109\u110B-\u110C\u110E-\u1112\u113C\u113E\u1140\u114C\u114E\u1150\u1154-\u1155\u1159\u115F-\u1161\u1163\u1165\u1167\u1169\u116D-\u116E\u1172-\u1173\u1175\u119E\u11A8\u11AB\u11AE-\u11AF\u11B7-\u11B8\u11BA\u11BC-\u11C2\u11EB\u11F0\u11F9\u1E00-\u1E9B\u1EA0-\u1EF9\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2126\u212A-\u212B\u212E\u2180-\u2182\u3041-\u3094\u30A1-\u30FA\u3105-\u312C\uAC00-\uD7A3\u4E00-\u9FA5\u3007\u3021-\u3029_]'
	$rdf.RDFaProcessor.NCNAME = new RegExp('^' + $rdf.RDFaProcessor.nameStartChar + $rdf.RDFaProcessor.nameChar + '*$')
	
	$rdf.RDFaProcessor.trim = function (str) {
	  return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '')
	}
	
	$rdf.RDFaProcessor.prototype.tokenize = function (str) {
	  return $rdf.RDFaProcessor.trim(str).split(/\s+/)
	}
	
	$rdf.RDFaProcessor.prototype.parseSafeCURIEOrCURIEOrURI = function (value, prefixes, base) {
	  value = $rdf.RDFaProcessor.trim(value)
	  if (value.charAt(0) == '[' && value.charAt(value.length - 1) == ']') {
	    value = value.substring(1, value.length - 1)
	    value = value.trim(value)
	    if (value.length == 0) {
	      return null
	    }
	    if (value == '_:') {
	      // the one node
	      return this.theOne
	    }
	    return this.parseCURIE(value, prefixes, base)
	  } else {
	    return this.parseCURIEOrURI(value, prefixes, base)
	  }
	}
	
	$rdf.RDFaProcessor.prototype.parseCURIE = function (value, prefixes, base) {
	  var colon = value.indexOf(':')
	  if (colon >= 0) {
	    var prefix = value.substring(0, colon)
	    if (prefix == '') {
	      // default prefix
	      var uri = prefixes['']
	      return uri ? uri + value.substring(colon + 1) : null
	    } else if (prefix == '_') {
	      // blank node
	      return '_:' + value.substring(colon + 1)
	    } else if ($rdf.RDFaProcessor.NCNAME.test(prefix)) {
	      var uri = prefixes[prefix]
	      if (uri) {
	        return uri + value.substring(colon + 1)
	      }
	    }
	  }
	  return null
	}
	
	$rdf.RDFaProcessor.prototype.parseCURIEOrURI = function (value, prefixes, base) {
	  var curie = this.parseCURIE(value, prefixes, base)
	  if (curie) {
	    return curie
	  }
	  return this.resolveAndNormalize(base, value)
	}
	
	$rdf.RDFaProcessor.prototype.parsePredicate = function (value, defaultVocabulary, terms, prefixes, base, ignoreTerms) {
	  if (value == '') {
	    return null
	  }
	  var predicate = this.parseTermOrCURIEOrAbsURI(value, defaultVocabulary, ignoreTerms ? null : terms, prefixes, base)
	  if (predicate && predicate.indexOf('_:') == 0) {
	    return null
	  }
	  return predicate
	}
	
	$rdf.RDFaProcessor.prototype.parseTermOrCURIEOrURI = function (value, defaultVocabulary, terms, prefixes, base) {
	  // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
	  value = $rdf.RDFaProcessor.trim(value)
	  var curie = this.parseCURIE(value, prefixes, base)
	  if (curie) {
	    return curie
	  } else {
	    var term = terms[value]
	    if (term) {
	      return term
	    }
	    var lcvalue = value.toLowerCase()
	    term = terms[lcvalue]
	    if (term) {
	      return term
	    }
	    if (defaultVocabulary && !this.absURIRE.exec(value)) {
	      return defaultVocabulary + value
	    }
	  }
	  return this.resolveAndNormalize(base, value)
	}
	
	$rdf.RDFaProcessor.prototype.parseTermOrCURIEOrAbsURI = function (value, defaultVocabulary, terms, prefixes, base) {
	  // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
	  value = $rdf.RDFaProcessor.trim(value)
	  var curie = this.parseCURIE(value, prefixes, base)
	  if (curie) {
	    return curie
	  } else if (terms) {
	    if (defaultVocabulary && !this.absURIRE.exec(value)) {
	      return defaultVocabulary + value
	    }
	    var term = terms[value]
	    if (term) {
	      return term
	    }
	    var lcvalue = value.toLowerCase()
	    term = terms[lcvalue]
	    if (term) {
	      return term
	    }
	  }
	  if (this.absURIRE.exec(value)) {
	    return this.resolveAndNormalize(base, value)
	  }
	  return null
	}
	
	/*
	$rdf.RDFaProcessor.prototype.resolveAndNormalize = function(base,href) {
	   var u = base.resolve(href)
	   var parsed = this.parseURI(u)
	   parsed.normalize()
	   return parsed.spec
	}
	*/
	
	$rdf.RDFaProcessor.prototype.parsePrefixMappings = function (str, target) {
	  var values = this.tokenize(str)
	  var prefix = null
	  var uri = null
	  for (var i = 0; i < values.length; i++) {
	    if (values[i][values[i].length - 1] == ':') {
	      prefix = values[i].substring(0, values[i].length - 1)
	    } else if (prefix) {
	      target[prefix] = this.options.base ? $rdf.uri.join(values[i], this.options.base) : values[i]
	      prefix = null
	    }
	  }
	}
	
	$rdf.RDFaProcessor.prototype.copyMappings = function (mappings) {
	  var newMappings = {}
	  for (var k in mappings) {
	    newMappings[k] = mappings[k]
	  }
	  return newMappings
	}
	
	$rdf.RDFaProcessor.prototype.ancestorPath = function (node) {
	  var path = ''
	  while (node && node.nodeType != Node.DOCUMENT_NODE) {
	    path = '/' + node.localName + path
	    node = node.parentNode
	  }
	  return path
	}
	
	$rdf.RDFaProcessor.prototype.setContext = function (node) {
	  // We only recognized XHTML+RDFa 1.1 if the version is set propertyly
	  if (node.localName == 'html' && node.getAttribute('version') == 'XHTML+RDFa 1.1') {
	    this.setXHTMLContext()
	  } else if (node.localName == 'html' || node.namespaceURI == 'http://www.w3.org/1999/xhtml') {
	    if (typeof document !== 'undefined' && document.doctype) {
	      if (document.doctype.publicId == '-//W3C//DTD XHTML+RDFa 1.0//EN' && document.doctype.systemId == 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd') {
	        console.log('WARNING: RDF 1.0 is not supported.  Defaulting to HTML5 mode.')
	        this.setHTMLContext()
	      } else if (document.doctype.publicId == '-//W3C//DTD XHTML+RDFa 1.1//EN' && document.doctype.systemId == 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd') {
	        this.setXHTMLContext()
	      } else {
	        this.setHTMLContext()
	      }
	    } else {
	      this.setHTMLContext()
	    }
	  } else {
	    this.setXMLContext()
	  }
	}
	
	$rdf.RDFaProcessor.prototype.setInitialContext = function () {
	  this.vocabulary = null
	  // By default, the prefixes are terms are loaded to the RDFa 1.1. standard within the graph constructor
	  this.langAttributes = [ { namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' } ]
	}
	
	$rdf.RDFaProcessor.prototype.setXMLContext = function () {
	  this.setInitialContext()
	  this.inXHTMLMode = false
	  this.inHTMLMode = false
	}
	
	$rdf.RDFaProcessor.prototype.setHTMLContext = function () {
	  this.setInitialContext()
	  this.langAttributes = [ { namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' },
	    { namespaceURI: null, localName: 'lang' }]
	  this.inXHTMLMode = false
	  this.inHTMLMode = true
	}
	
	$rdf.RDFaProcessor.prototype.setXHTMLContext = function () {
	  this.setInitialContext()
	
	  this.inXHTMLMode = true
	  this.inHTMLMode = false
	
	  this.langAttributes = [ { namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' },
	    { namespaceURI: null, localName: 'lang' }]
	
	  // From http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1
	  this.target.graph.terms['alternate'] = 'http://www.w3.org/1999/xhtml/vocab#alternate'
	  this.target.graph.terms['appendix'] = 'http://www.w3.org/1999/xhtml/vocab#appendix'
	  this.target.graph.terms['bookmark'] = 'http://www.w3.org/1999/xhtml/vocab#bookmark'
	  this.target.graph.terms['cite'] = 'http://www.w3.org/1999/xhtml/vocab#cite'
	  this.target.graph.terms['chapter'] = 'http://www.w3.org/1999/xhtml/vocab#chapter'
	  this.target.graph.terms['contents'] = 'http://www.w3.org/1999/xhtml/vocab#contents'
	  this.target.graph.terms['copyright'] = 'http://www.w3.org/1999/xhtml/vocab#copyright'
	  this.target.graph.terms['first'] = 'http://www.w3.org/1999/xhtml/vocab#first'
	  this.target.graph.terms['glossary'] = 'http://www.w3.org/1999/xhtml/vocab#glossary'
	  this.target.graph.terms['help'] = 'http://www.w3.org/1999/xhtml/vocab#help'
	  this.target.graph.terms['icon'] = 'http://www.w3.org/1999/xhtml/vocab#icon'
	  this.target.graph.terms['index'] = 'http://www.w3.org/1999/xhtml/vocab#index'
	  this.target.graph.terms['last'] = 'http://www.w3.org/1999/xhtml/vocab#last'
	  this.target.graph.terms['license'] = 'http://www.w3.org/1999/xhtml/vocab#license'
	  this.target.graph.terms['meta'] = 'http://www.w3.org/1999/xhtml/vocab#meta'
	  this.target.graph.terms['next'] = 'http://www.w3.org/1999/xhtml/vocab#next'
	  this.target.graph.terms['prev'] = 'http://www.w3.org/1999/xhtml/vocab#prev'
	  this.target.graph.terms['previous'] = 'http://www.w3.org/1999/xhtml/vocab#previous'
	  this.target.graph.terms['section'] = 'http://www.w3.org/1999/xhtml/vocab#section'
	  this.target.graph.terms['stylesheet'] = 'http://www.w3.org/1999/xhtml/vocab#stylesheet'
	  this.target.graph.terms['subsection'] = 'http://www.w3.org/1999/xhtml/vocab#subsection'
	  this.target.graph.terms['start'] = 'http://www.w3.org/1999/xhtml/vocab#start'
	  this.target.graph.terms['top'] = 'http://www.w3.org/1999/xhtml/vocab#top'
	  this.target.graph.terms['up'] = 'http://www.w3.org/1999/xhtml/vocab#up'
	  this.target.graph.terms['p3pv1'] = 'http://www.w3.org/1999/xhtml/vocab#p3pv1'
	
	  // other
	  this.target.graph.terms['related'] = 'http://www.w3.org/1999/xhtml/vocab#related'
	  this.target.graph.terms['role'] = 'http://www.w3.org/1999/xhtml/vocab#role'
	  this.target.graph.terms['transformation'] = 'http://www.w3.org/1999/xhtml/vocab#transformation'
	}
	
	$rdf.RDFaProcessor.prototype.init = function () {
	}
	
	$rdf.RDFaProcessor.prototype.newSubjectOrigin = function (origin, subject) {
	}
	
	$rdf.RDFaProcessor.prototype.addTriple = function (origin, subject, predicate, object) {
	  var su, ob, pr, or
	  if (typeof subject === 'undefined') {
	    su = $rdf.sym(this.options.base)
	  } else {
	    su = this.toRDFNodeObject(subject)
	  }
	  pr = this.toRDFNodeObject(predicate)
	  ob = this.toRDFNodeObject(object)
	  or = $rdf.sym(this.options.base)
	  //console.log('Adding { ' + su + ' ' + pr + ' ' + ob + ' ' + or + ' }')
	  this.kb.add(su, pr, ob, or)
	}
	
	$rdf.RDFaProcessor.prototype.toRDFNodeObject = function(x) {
	  if (typeof x === 'undefined') return undefined
	  if (typeof x === 'string') {
	    if (x.substring(0,2) == "_:") {
	      if (typeof this.blankNodes[x.substring(2)] === 'undefined') {
	        this.blankNodes[x.substring(2)] = new $rdf.BlankNode(x.substring(2))
	      }
	      return this.blankNodes[x.substring(2)]
	    }
	    return $rdf.sym(x)
	  }
	  switch(x.type) {
	    case $rdf.RDFaProcessor.objectURI:
	      if (x.value.substring(0,2) == "_:") {
	        if (typeof this.blankNodes[x.value.substring(2)] === 'undefined') {
	          this.blankNodes[x.value.substring(2)] = new $rdf.BlankNode(x.value.substring(2))
	        }
	        return this.blankNodes[x.value.substring(2)]
	      }
	      return $rdf.sym(x.value)
	    case $rdf.RDFaProcessor.PlainLiteralURI:
	      return new $rdf.Literal(x.value, x.language || '')
	    case $rdf.RDFaProcessor.XMLLiteralURI:
	    case $rdf.RDFaProcessor.HTMLLiteralURI:
	      var string = ''
	      Object.keys(x.value).forEach(function(i) {
	        string += $rdf.Util.domToString(x.value[i], this.htmlOptions)
	      });
	      return new $rdf.Literal(string, '', new $rdf.NamedNode(x.type))
	    default:
	      return new $rdf.Literal(x.value, '', new $rdf.NamedNode(x.type))
	  }
	}
	
	$rdf.RDFaProcessor.prototype.resolveAndNormalize = function (base, uri) {
	  // console.log("Joining " + uri + " to " + base + " making " +  $rdf.uri.join(uri, base))
	  return $rdf.uri.join(uri, base); // @@ normalize?
	}
	
	$rdf.RDFaProcessor.prototype.parseURI = function (uri) {
	  return uri; // We just use strings as URIs, not objects now.
	}
	
	$rdf.RDFaProcessor.dateTimeTypes = [
	  { pattern: /-?P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?/,
	  type: 'http://www.w3.org/2001/XMLSchema#duration' },
	  { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9]T(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
	  type: 'http://www.w3.org/2001/XMLSchema#dateTime' },
	  { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9](?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
	  type: 'http://www.w3.org/2001/XMLSchema#date' },
	  { pattern: /(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
	  type: 'http://www.w3.org/2001/XMLSchema#time' },
	  { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]/,
	  type: 'http://www.w3.org/2001/XMLSchema#gYearMonth' },
	  { pattern: /-?[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9]/,
	  type: 'http://www.w3.org/2001/XMLSchema#gYear' }
	]
	
	$rdf.RDFaProcessor.deriveDateTimeType = function (value) {
	  for (var i = 0; i < $rdf.RDFaProcessor.dateTimeTypes.length; i++) {
	    // console.log("Checking "+value+" against "+$rdf.RDFaProcessor.dateTimeTypes[i].type)
	    var matched = $rdf.RDFaProcessor.dateTimeTypes[i].pattern.exec(value)
	    if (matched && matched[0].length == value.length) {
	      // console.log("Matched!")
	      return $rdf.RDFaProcessor.dateTimeTypes[i].type
	    }
	  }
	  return null
	}
	
	$rdf.RDFaProcessor.prototype.process = function (node, options) {
	  /*
	  if (!window.console) {
	     window.console = { log: function() {} }
	  }*/
	  var base
	  if (node.nodeType == Node.DOCUMENT_NODE) {
	    base = node.baseURI
	    node = node.documentElement
	    node.baseURI = base
	    this.setContext(node)
	  } else if (node.parentNode.nodeType == Node.DOCUMENT_NODE) {
	    this.setContext(node)
	  }
	  var queue = []
	
	  // Fix for Firefox that includes the hash in the base URI
	  var removeHash = function(baseURI) {
	    // Fix for undefined baseURI property
	    if (!baseURI && options && options.baseURI) {
	      return options.baseURI;
	    }
	
	    var hash = baseURI.indexOf("#");
	    if (hash>=0) {
	      baseURI = baseURI.substring(0,hash);
	    }
	    if (options && options.baseURIMap) {
	      baseURI = options.baseURIMap(baseURI);
	    }
	    return baseURI;
	  }
	
	  queue.push({ current: node, context: this.push(null, removeHash(node.baseURI))})
	  while (queue.length > 0) {
	    var item = queue.shift()
	    if (item.parent) {
	      // Sequence Step 14: list triple generation
	      if (item.context.parent && item.context.parent.listMapping == item.listMapping) {
	        // Skip a child context with exactly the same mapping
	        continue
	      }
	      // console.log("Generating lists for "+item.subject+", tag "+item.parent.localName)
	      for (var predicate in item.listMapping) {
	        var list = item.listMapping[predicate]
	        if (list.length == 0) {
	          this.addTriple(item.parent, item.subject, predicate, { type: $rdf.RDFaProcessor.objectURI, value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' })
	          continue
	        }
	        var bnodes = []
	        for (var i = 0; i < list.length; i++) {
	          bnodes.push(this.newBlankNode())
	        // this.newSubject(item.parent,bnodes[i])
	        }
	        for (var i = 0; i < bnodes.length; i++) {
	          this.addTriple(item.parent, bnodes[i], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first', list[i])
	          this.addTriple(item.parent, bnodes[i], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest', { type: $rdf.RDFaProcessor.objectURI,  value: (i + 1) < bnodes.length ? bnodes[i + 1] : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' })
	        }
	        this.addTriple(item.parent, item.subject, predicate, { type: $rdf.RDFaProcessor.objectURI, value: bnodes[0]})
	      }
	      continue
	    }
	    var current = item.current
	    var context = item.context
	
	    // console.log("Tag: "+current.localName+", listMapping="+JSON.stringify(context.listMapping))
	
	    // Sequence Step 1
	    var skip = false
	    var newSubject = null
	    var currentObjectResource = null
	    var typedResource = null
	    var prefixes = context.prefixes
	    var prefixesCopied = false
	    var incomplete = []
	    var listMapping = context.listMapping
	    var listMappingDifferent = context.parent ? false : true
	    var language = context.language
	    var vocabulary = context.vocabulary
	
	    // TODO: the "base" element may be used for HTML+RDFa 1.1
	    var base = this.parseURI(removeHash(current.baseURI))
	    current.item = null
	
	    // Sequence Step 2: set the default vocabulary
	    var vocabAtt = current.getAttributeNode('vocab')
	    if (vocabAtt) {
	      var value = $rdf.RDFaProcessor.trim(vocabAtt.value)
	      if (value.length > 0) {
	        vocabulary = value
	        var baseSubject = base.spec
	        // this.newSubject(current,baseSubject)
	        this.addTriple(current, baseSubject, 'http://www.w3.org/ns/rdfa#usesVocabulary', { type: $rdf.RDFaProcessor.objectURI,  value: vocabulary})
	      } else {
	        vocabulary = this.vocabulary
	      }
	    }
	
	    // Sequence Step 3: IRI mappings
	    // handle xmlns attributes
	    for (var i = 0; i < current.attributes.length; i++) {
	      var att = current.attributes[i]
	      // if (att.namespaceURI=="http://www.w3.org/2000/xmlns/") {
	      if (att.nodeName.charAt(0) == 'x' && att.nodeName.indexOf('xmlns:') == 0) {
	        if (!prefixesCopied) {
	          prefixes = this.copyMappings(prefixes)
	          prefixesCopied = true
	        }
	        var prefix = att.nodeName.substring(6)
	        // TODO: resolve relative?
	        var ref = $rdf.RDFaProcessor.trim(att.value)
	        prefixes[prefix] = this.options.base ? $rdf.uri.join(ref, this.options.base) : ref
	      }
	    }
	    // Handle prefix mappings (@prefix)
	    var prefixAtt = current.getAttributeNode('prefix')
	    if (prefixAtt) {
	      if (!prefixesCopied) {
	        prefixes = this.copyMappings(prefixes)
	        prefixesCopied = true
	      }
	      this.parsePrefixMappings(prefixAtt.value, prefixes)
	    }
	
	    // Sequence Step 4: language
	    var xmlLangAtt = null
	    for (var i = 0; !xmlLangAtt && i < this.langAttributes.length; i++) {
	      xmlLangAtt = current.getAttributeNodeNS(this.langAttributes[i].namespaceURI, this.langAttributes[i].localName)
	    }
	    if (xmlLangAtt) {
	      var value = $rdf.RDFaProcessor.trim(xmlLangAtt.value)
	      if (value.length > 0) {
	        language = value
	      } else {
	        language = null
	      }
	    }
	
	    var relAtt = current.getAttributeNode('rel')
	    var revAtt = current.getAttributeNode('rev')
	    var typeofAtt = current.getAttributeNode('typeof')
	    var propertyAtt = current.getAttributeNode('property')
	    var datatypeAtt = current.getAttributeNode('datatype')
	    var datetimeAtt = this.inHTMLMode ? current.getAttributeNode('datetime') : null
	    var contentAtt = current.getAttributeNode('content')
	    var aboutAtt = current.getAttributeNode('about')
	    var srcAtt = current.getAttributeNode('src')
	    var resourceAtt = current.getAttributeNode('resource')
	    var hrefAtt = current.getAttributeNode('href')
	    var inlistAtt = current.getAttributeNode('inlist')
	
	    var relAttPredicates = []
	    if (relAtt) {
	      var values = this.tokenize(relAtt.value)
	      for (var i = 0; i < values.length; i++) {
	        var predicate = this.parsePredicate(values[i], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt != null)
	        if (predicate) {
	          relAttPredicates.push(predicate)
	        }
	      }
	    }
	    var revAttPredicates = []
	    if (revAtt) {
	      var values = this.tokenize(revAtt.value)
	      for (var i = 0; i < values.length; i++) {
	        var predicate = this.parsePredicate(values[i], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt != null)
	        if (predicate) {
	          revAttPredicates.push(predicate)
	        }
	      }
	    }
	
	    // Section 3.1, bullet 7
	    if (this.inHTMLMode && (relAtt != null || revAtt != null) && propertyAtt != null) {
	      if (relAttPredicates.length == 0) {
	        relAtt = null
	      }
	      if (revAttPredicates.length == 0) {
	        revAtt = null
	      }
	    }
	
	    if (relAtt || revAtt) {
	      // Sequence Step 6: establish new subject and value
	      if (aboutAtt) {
	        newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base)
	      }
	      if (typeofAtt) {
	        typedResource = newSubject
	      }
	      if (!newSubject) {
	        if (current.parentNode.nodeType == Node.DOCUMENT_NODE) {
	          newSubject = removeHash(current.baseURI)
	        } else if (context.parentObject) {
	          // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
	          newSubject = removeHash(current.parentNode.baseURI) == context.parentObject ? removeHash(current.baseURI) : context.parentObject
	        }
	      }
	      if (resourceAtt) {
	        currentObjectResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base)
	      }
	
	      if (!currentObjectResource) {
	        if (hrefAtt) {
	          currentObjectResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value))
	        } else if (srcAtt) {
	          currentObjectResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value))
	        } else if (typeofAtt && !aboutAtt && !(this.inXHTMLMode && (current.localName == 'head' || current.localName == 'body'))) {
	          currentObjectResource = this.newBlankNode()
	        }
	      }
	      if (typeofAtt && !aboutAtt && this.inXHTMLMode && (current.localName == 'head' || current.localName == 'body')) {
	        typedResource = newSubject
	      } else if (typeofAtt && !aboutAtt) {
	        typedResource = currentObjectResource
	      }
	
	    } else if (propertyAtt && !contentAtt && !datatypeAtt) {
	      // Sequence Step 5.1: establish a new subject
	      if (aboutAtt) {
	        newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base)
	        if (typeofAtt) {
	          typedResource = newSubject
	        }
	      }
	      if (!newSubject && current.parentNode.nodeType == Node.DOCUMENT_NODE) {
	        newSubject = removeHash(current.baseURI)
	        if (typeofAtt) {
	          typedResource = newSubject
	        }
	      } else if (!newSubject && context.parentObject) {
	        // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
	        newSubject = removeHash(current.parentNode.baseURI) == context.parentObject ? removeHash(current.baseURI) : context.parentObject
	      }
	      if (typeofAtt && !typedResource) {
	        if (resourceAtt) {
	          typedResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base)
	        }
	        if (!typedResource && hrefAtt) {
	          typedResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value))
	        }
	        if (!typedResource && srcAtt) {
	          typedResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value))
	        }
	        if (!typedResource && (this.inXHTMLMode || this.inHTMLMode) && (current.localName == 'head' || current.localName == 'body')) {
	          typedResource = newSubject
	        }
	        if (!typedResource) {
	          typedResource = this.newBlankNode()
	        }
	        currentObjectResource = typedResource
	      }
	    // console.log(current.localName+", newSubject="+newSubject+", typedResource="+typedResource+", currentObjectResource="+currentObjectResource)
	    } else {
	      // Sequence Step 5.2: establish a new subject
	      if (aboutAtt) {
	        newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base)
	      }
	      if (!newSubject && resourceAtt) {
	        newSubject = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base)
	      }
	      if (!newSubject && hrefAtt) {
	        newSubject = this.resolveAndNormalize(base, encodeURI(hrefAtt.value))
	      }
	      if (!newSubject && srcAtt) {
	        newSubject = this.resolveAndNormalize(base, encodeURI(srcAtt.value))
	      }
	      if (!newSubject) {
	        if (current.parentNode.nodeType == Node.DOCUMENT_NODE) {
	          newSubject = removeHash(current.baseURI)
	        } else if ((this.inXHTMLMode || this.inHTMLMode) && (current.localName == 'head' || current.localName == 'body')) {
	          newSubject = removeHash(current.parentNode.baseURI) == context.parentObject ? removeHash(current.baseURI) : context.parentObject
	        } else if (typeofAtt) {
	          newSubject = this.newBlankNode()
	        } else if (context.parentObject) {
	          // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
	          newSubject = removeHash(current.parentNode.baseURI) == context.parentObject ? removeHash(current.baseURI) : context.parentObject
	          if (!propertyAtt) {
	            skip = true
	          }
	        }
	      }
	      if (typeofAtt) {
	        typedResource = newSubject
	      }
	    }
	
	    // console.log(current.tagName+": newSubject="+newSubject+", currentObjectResource="+currentObjectResource+", typedResource="+typedResource+", skip="+skip)
	
	    var rdfaData = null
	    if (newSubject) {
	      // this.newSubject(current,newSubject)
	      if (aboutAtt || resourceAtt || typedResource) {
	        var id = newSubject
	        if (typeofAtt && !aboutAtt && !resourceAtt && currentObjectResource) {
	          id = currentObjectResource
	        }
	        //console.log("Setting data attribute for "+current.localName+" for subject "+id)
	        this.newSubjectOrigin(current, id)
	      }
	    }
	
	    // Sequence Step 7: generate type triple
	    if (typedResource) {
	      var values = this.tokenize(typeofAtt.value)
	      for (var i = 0; i < values.length; i++) {
	        var object = this.parseTermOrCURIEOrAbsURI(values[i], vocabulary, context.terms, prefixes, base)
	        if (object) {
	          this.addTriple(current, typedResource, $rdf.RDFaProcessor.typeURI, { type: $rdf.RDFaProcessor.objectURI,  value: object})
	        }
	      }
	    }
	
	    // Sequence Step 8: new list mappings if there is a new subject
	    // console.log("Step 8: newSubject="+newSubject+", context.parentObject="+context.parentObject)
	    if (newSubject && newSubject != context.parentObject) {
	      // console.log("Generating new list mapping for "+newSubject)
	      listMapping = {}
	      listMappingDifferent = true
	    }
	
	    // Sequence Step 9: generate object triple
	    if (currentObjectResource) {
	      if (relAtt && inlistAtt) {
	        for (var i = 0; i < relAttPredicates.length; i++) {
	          var list = listMapping[relAttPredicates[i]]
	          if (!list) {
	            list = []
	            listMapping[relAttPredicates[i]] = list
	          }
	          list.push({ type: $rdf.RDFaProcessor.objectURI, value: currentObjectResource })
	        }
	      } else if (relAtt) {
	        for (var i = 0; i < relAttPredicates.length; i++) {
	          this.addTriple(current, newSubject, relAttPredicates[i], { type: $rdf.RDFaProcessor.objectURI, value: currentObjectResource})
	        }
	      }
	      if (revAtt) {
	        for (var i = 0; i < revAttPredicates.length; i++) {
	          this.addTriple(current, currentObjectResource, revAttPredicates[i], { type: $rdf.RDFaProcessor.objectURI, value: newSubject})
	        }
	      }
	    } else {
	      // Sequence Step 10: incomplete triples
	      if (newSubject && !currentObjectResource && (relAtt || revAtt)) {
	        currentObjectResource = this.newBlankNode()
	      // alert(current.tagName+": generated blank node, newSubject="+newSubject+" currentObjectResource="+currentObjectResource)
	      }
	      if (relAtt && inlistAtt) {
	        for (var i = 0; i < relAttPredicates.length; i++) {
	          var list = listMapping[relAttPredicates[i]]
	          if (!list) {
	            list = []
	            listMapping[predicate] = list
	          }
	          // console.log("Adding incomplete list for "+predicate)
	          incomplete.push({ predicate: relAttPredicates[i], list: list })
	        }
	      } else if (relAtt) {
	        for (var i = 0; i < relAttPredicates.length; i++) {
	          incomplete.push({ predicate: relAttPredicates[i], forward: true })
	        }
	      }
	      if (revAtt) {
	        for (var i = 0; i < revAttPredicates.length; i++) {
	          incomplete.push({ predicate: revAttPredicates[i], forward: false })
	        }
	      }
	    }
	
	    // Step 11: Current property values
	    if (propertyAtt) {
	      var datatype = null
	      var content = null
	      if (datatypeAtt) {
	        datatype = datatypeAtt.value == '' ? $rdf.RDFaProcessor.PlainLiteralURI : this.parseTermOrCURIEOrAbsURI(datatypeAtt.value, vocabulary, context.terms, prefixes, base)
	        if (datetimeAtt && !contentAtt) {
	          content = datetimeAtt.value
	        } else {
	          content = datatype == $rdf.RDFaProcessor.XMLLiteralURI || datatype == $rdf.RDFaProcessor.HTMLLiteralURI ? null : (contentAtt ? contentAtt.value : current.textContent)
	        }
	      } else if (contentAtt) {
	        datatype = $rdf.RDFaProcessor.PlainLiteralURI
	        content = contentAtt.value
	      } else if (datetimeAtt) {
	        content = datetimeAtt.value
	        datatype = $rdf.RDFaProcessor.deriveDateTimeType(content)
	        if (!datatype) {
	          datatype = $rdf.RDFaProcessor.PlainLiteralURI
	        }
	      } else if (!relAtt && !revAtt) {
	        if (resourceAtt) {
	          content = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base)
	        }
	        if (!content && hrefAtt) {
	          content = this.resolveAndNormalize(base, encodeURI(hrefAtt.value))
	        } else if (!content && srcAtt) {
	          content = this.resolveAndNormalize(base, encodeURI(srcAtt.value))
	        }
	        if (content) {
	          datatype = $rdf.RDFaProcessor.objectURI
	        }
	      }
	      if (!datatype) {
	        if (typeofAtt && !aboutAtt) {
	          datatype = $rdf.RDFaProcessor.objectURI
	          content = typedResource
	        } else {
	          content = current.textContent
	          if (this.inHTMLMode && current.localName == 'time') {
	            datatype = $rdf.RDFaProcessor.deriveDateTimeType(content)
	          }
	          if (!datatype) {
	            datatype = $rdf.RDFaProcessor.PlainLiteralURI
	          }
	        }
	      }
	      var values = this.tokenize(propertyAtt.value)
	      for (var i = 0; i < values.length; i++) {
	        var predicate = this.parsePredicate(values[i], vocabulary, context.terms, prefixes, base)
	        if (predicate) {
	          if (inlistAtt) {
	            var list = listMapping[predicate]
	            if (!list) {
	              list = []
	              listMapping[predicate] = list
	            }
	            list.push((datatype == $rdf.RDFaProcessor.XMLLiteralURI || datatype == $rdf.RDFaProcessor.HTMLLiteralURI) ? { type: datatype, value: current.childNodes} : { type: datatype ? datatype : $rdf.RDFaProcessor.PlainLiteralURI, value: content, language: language})
	          } else {
	            if (datatype == $rdf.RDFaProcessor.XMLLiteralURI || datatype == $rdf.RDFaProcessor.HTMLLiteralURI) {
	              this.addTriple(current, newSubject, predicate, { type: datatype, value: current.childNodes})
	            } else {
	              this.addTriple(current, newSubject, predicate, { type: datatype ? datatype : $rdf.RDFaProcessor.PlainLiteralURI, value: content, language: language})
	            // console.log(newSubject+" "+predicate+"="+content)
	            }
	          }
	        }
	      }
	    }
	
	    // Sequence Step 12: complete incomplete triples with new subject
	    if (newSubject && !skip) {
	      for (var i = 0; i < context.incomplete.length; i++) {
	        if (context.incomplete[i].list) {
	          // console.log("Adding subject "+newSubject+" to list for "+context.incomplete[i].predicate)
	          // TODO: it is unclear what to do here
	          context.incomplete[i].list.push({ type: $rdf.RDFaProcessor.objectURI, value: newSubject })
	        } else if (context.incomplete[i].forward) {
	          // console.log(current.tagName+": completing forward triple "+context.incomplete[i].predicate+" with object="+newSubject)
	          this.addTriple(current, context.subject, context.incomplete[i].predicate, { type: $rdf.RDFaProcessor.objectURI, value: newSubject})
	        } else {
	          // console.log(current.tagName+": completing reverse triple with object="+context.subject)
	          this.addTriple(current, newSubject, context.incomplete[i].predicate, { type: $rdf.RDFaProcessor.objectURI, value: context.subject})
	        }
	      }
	    }
	
	    var childContext = null
	    var listSubject = newSubject
	    if (skip) {
	      // TODO: should subject be null?
	      childContext = this.push(context, context.subject)
	      // TODO: should the entObject be passed along?  If not, then intermediary children will keep properties from being associated with incomplete triples.
	      // TODO: Verify: if the current baseURI has changed and the parentObject is the parent's base URI, then the baseURI should change
	      childContext.parentObject = removeHash(current.parentNode.baseURI) == context.parentObject ? removeHash(current.baseURI) : context.parentObject
	      childContext.incomplete = context.incomplete
	      childContext.language = language
	      childContext.prefixes = prefixes
	      childContext.vocabulary = vocabulary
	    } else {
	      childContext = this.push(context, newSubject)
	      childContext.parentObject = currentObjectResource ? currentObjectResource : (newSubject ? newSubject : context.subject)
	      childContext.prefixes = prefixes
	      childContext.incomplete = incomplete
	      if (currentObjectResource) {
	        // console.log("Generating new list mapping for "+currentObjectResource)
	        listSubject = currentObjectResource
	        listMapping = {}
	        listMappingDifferent = true
	      }
	      childContext.listMapping = listMapping
	      childContext.language = language
	      childContext.vocabulary = vocabulary
	    }
	    if (listMappingDifferent) {
	      //console.log("Pushing list parent "+current.localName)
	      queue.unshift({ parent: current, context: context, subject: listSubject, listMapping: listMapping})
	    }
	    for (var child = current.lastChild; child; child = child.previousSibling) {
	      if (child.nodeType == Node.ELEMENT_NODE) {
	        // console.log("Pushing child "+child.localName)
	        child.baseURI = current.baseURI
	        queue.unshift({ current: child, context: childContext})
	      }
	    }
	  }
	
	  if (this.inHTMLMode) {
	    this.copyProperties()
	  }
	
	  for (var i = 0; i < this.finishedHandlers.length; i++) {
	    this.finishedHandlers[i](node)
	  }
	}
	
	$rdf.RDFaProcessor.prototype.copyProperties = function () {}
	
	$rdf.RDFaProcessor.prototype.push = function (parent, subject) {
	  return {
	    parent: parent,
	    subject: subject ? subject : (parent ? parent.subject : null),
	    parentObject: null,
	    incomplete: [],
	    listMapping: parent ? parent.listMapping : {},
	    language: parent ? parent.language : this.language,
	    prefixes: parent ? parent.prefixes : this.target.graph.prefixes,
	    terms: parent ? parent.terms : this.target.graph.terms,
	    vocabulary: parent ? parent.vocabulary : this.vocabulary
	  }
	}
	// ///////////////
	
	$rdf.parseRDFaDOM = function (dom, kb, base) {
	  var p = new $rdf.RDFaProcessor(kb, { 'base': base })
	  dom.baseURI = base
	  p.process(dom)
	}
	// /////////////////// Parse a simple SPARL-Update subset syntax for patches.
	//
	//  This parses
	//   WHERE {xxx} DELETE {yyy} INSERT DATA {zzz}
	// (not necessarily in that order)
	// as though it were the n3
	//   <#query> patch:where {xxx}; patch:delete {yyy}; patch:insert {zzz}.
	
	$rdf.sparqlUpdateParser = function(str, kb, base) {
	    var i,j,k;
	    var keywords = [ 'INSERT', 'DELETE', 'WHERE' ]
	    var SQNS = $rdf.Namespace('http://www.w3.org/ns/pim/patch#');
	    var p = $rdf.N3Parser(kb, kb, base, base, null, null, "", null);
	    var clauses = {};
	
	    var badSyntax = function (uri, lines, str, i, why) {
	        return  ("Line " +  ( lines + 1 ) + " of <" + uri + ">: Bad syntax:\n   " +
	                why + "\n   at: \"" + str.slice(i, (i + 30))  + "\"" ) ;
	    };
	
	    var check = function(next, last, message) {
	        if (next < 0) {
	            throw badSyntax(p._thisDoc, p.lines, str, j, last, message);
	        };
	        return next;
	    };
	
	
	    i = 0;
	    var query = kb.sym(base+ '#query');  // Invent a URI for the query
	    clauses['query'] = query; // A way of accessing it in its N3 model.
	
	    while (true) {
	        // console.log("A Now at i = " + i)
	        var j = p.skipSpace(str, i);
	        if (j < 0) {
	            return clauses
	        }
	        // console.log("B After space at j= " + j)
	        if (str[j] === ';') {
	            i = p.skipSpace(str, j + 1);
	            if ( i < 0) {
	                return clauses ; // Allow end in a ;
	            }
	            j = i;
	        }
	        var found = false;
	        for (k=0;  k< keywords.length; k++) {
	            var key = keywords[k];
	            if (str.slice(j, j + key.length) === key) {
	                // console.log("C got one " + key);
	                i = p.skipSpace(str, j+ key.length);
	                // console.log("D after space at i= " + i);
	                if (i < 0) {
	                    throw badSyntax(p._thisDoc, p.lines, str, j+ key.length, "found EOF, needed {...} after "+key);
	                };
	                if (((key === 'INSERT') || (key === 'DELETE')) && str.slice(i, i+4) === 'DATA') { // Some wanted 'DATA'. Whatever
	                    j = p.skipSpace(str, i+4);
	                    if (j < 0) {
	                        throw badSyntax(p._thisDoc, p.lines, str, i+4, "needed {...} after INSERT DATA "+key);
	                    };
	                    i = j;
	                }
	                var res2 = [];
	                j = p.node(str, i, res2);
	                // console.log("M Now at j= " + j + " i= " + i)
	
	                if (j < 0) {
	                    throw badSyntax(p._thisDoc, p.lines, str, i,
	                            "bad syntax or EOF in {...} after " + key);
	                }
	                clauses[key.toLowerCase()] = res2[0];
	                // print("res2[0] for "+key+ " is " + res2[0]);  //   @@ debug @@@@@@
	                kb.add(query, SQNS(key.toLowerCase()), res2[0]);
	                // key is the keyword and res2 has the contents
	                found = true;
	                i = j;
	            }
	        };
	        if (!found  && str.slice(j, j+7) === '@prefix') {
	            var i = p.directive(str, j);
	            if (i < 0) {
	            throw badSyntax(p._thisDoc, p.lines, str, i,
	                    "bad syntax or EOF after @prefix ");
	            }
	            // console.log("P before dot i= " + i)
	            i = p.checkDot(str, i);
	            // console.log("Q after dot i= " + i)
	            found = true;
	        }
	        if (!found) {
	            // console.log("Bad syntax " + j)
	            throw badSyntax(p._thisDoc, p.lines, str, j,
	                    "Unknown syntax at start of statememt: '" + str.slice(j).slice(0,20) +"'")
	        }
	
	    } // while
	    //return clauses
	
	
	}; // End of sparqlUpdateParser
	
	
	//////////////// Apply a patch
	
	$rdf.IndexedFormula.prototype.applyPatch = function(patch, target, patchCallback) { // patchCallback(err)
	    var targetKB = this;
	    var doPatch = function(onDonePatch) {
	        // $rdf.log.info("doPatch ...")
	
	        if (patch['delete']) {
	            // $rdf.log.info("doPatch delete "+patch['delete'])
	            var ds =  patch['delete']
	            if (bindings) ds = ds.substitute(bindings);
	            ds = ds.statements;
	            var bad = [];
	            var ds2 = ds.map(function(st){ // Find the actual statemnts in the store
	                var sts = targetKB.statementsMatching(st.subject, st.predicate, st.object, target);
	                if (sts.length === 0) {
	                    // $rdf.log.info("NOT FOUND deletable " + st);
	                    bad.push(st);
	                    return null;
	                } else {
	                    // $rdf.log.info("Found deletable " + st);
	                    return sts[0]
	                }
	            });
	            if (bad.length) {
	                return patchCallback("Couldn't find to delete: " + bad[0])
	            }
	            ds2.map(function(st){
	                targetKB.remove(st);
	            });
	        };
	
	        if (patch['insert']) {
	            // $rdf.log.info("doPatch insert "+patch['insert'])
	            var ds =  patch['insert'];
	            if (bindings) ds = ds.substitute(bindings);
	            ds = ds.statements;
	            ds.map(function(st){st.why = target;
	                targetKB.add(st.subject, st.predicate, st.object, st.why);
	            });
	        };
	        onDonePatch();
	    };
	
	    var bindings = null;
	    if (patch.where) {
	        // $rdf.log.info("Processing WHERE: " + patch.where + '\n');
	
	        var query = new $rdf.Query('patch');
	        query.pat = patch.where;
	        query.pat.statements.map(function(st){st.why = target});
	
	        var bindingsFound = [];
	        // $rdf.log.info("Processing WHERE - launching query: " + query.pat);
	
	        targetKB.query(query, function onBinding(binding) {
	            bindingsFound.push(binding)
	        },
	        targetKB.fetcher,
	        function onDone() {
	            if (bindingsFound.length == 0) {
	                return patchCallback("No match found to be patched:" + patch.where);
	            }
	            if (bindingsFound.length > 1) {
	                return patchCallback("Patch ambiguous. No patch done.");
	            }
	            bindings = bindingsFound[0];
	            doPatch(patchCallback);
	        });
	    } else {
	        doPatch(patchCallback)
	    };
	};
	
	
	
	
	// ends
	// Matching a formula against another formula
	// Assync as well as Synchronously
	//
	//
	// W3C open source licence 2005.
	//
	// This builds on term.js, match.js (and identity.js?)
	// to allow a query of a formula.
	//
	// Here we introduce for the first time a subclass of term: variable.
	//
	// SVN ID: $Id: query.js 25116 2008-11-15 16:13:48Z timbl $
	
	//  Variable
	//
	// Compare with BlankNode.  They are similar, but a variable
	// stands for something whose value is to be returned.
	// Also, users name variables and want the same name back when stuff is printed
	
	/* jsl:option explicit*/ // Turn on JavaScriptLint variable declaration checking
	
	// The Query object.  Should be very straightforward.
	//
	// This if for tracking queries the user has in the UI.
	//
	$rdf.Query = function (name, id) {
	  this.pat = new $rdf.IndexedFormula() // The pattern to search for
	  this.vars = [] // Used by UI code but not in query.js
	  //    this.orderBy = [] // Not used yet
	  this.name = name
	  this.id = id
	}
	
	/**
	 * The QuerySource object stores a set of listeners and a set of queries.
	 * It keeps the listeners aware of those queries that the source currently
	 * contains, and it is then up to the listeners to decide what to do with
	 * those queries in terms of displays.
	 * Not used 2010-08 -- TimBL
	 * @constructor
	 * @author jambo
	 */
	$rdf.QuerySource = function () {
	  /**
	   * stores all of the queries currently held by this source,
	   * indexed by ID number.
	   */
	  this.queries = []
	  /**
	   * stores the listeners for a query object.
	   * @see TabbedContainer
	   */
	  this.listeners = []
	
	  /**
	   * add a Query object to the query source--It will be given an ID number
	   * and a name, if it doesn't already have one. This subsequently adds the
	   * query to all of the listeners the QuerySource knows about.
	   */
	  this.addQuery = function (q) {
	    var i
	    if (q.name === null || q.name === '') {
	      q.name = 'Query #' + (this.queries.length + 1)
	    }
	    q.id = this.queries.length
	    this.queries.push(q)
	    for (i = 0; i < this.listeners.length; i++) {
	      if (this.listeners[i] !== null) {
	        this.listeners[i].addQuery(q)
	      }
	    }
	  }
	
	  /**
	   * Remove a Query object from the source.  Tells all listeners to also
	   * remove the query.
	   */
	  this.removeQuery = function (q) {
	    var i
	    for (i = 0; i < this.listeners.length; i++) {
	      if (this.listeners[i] !== null) {
	        this.listeners[i].removeQuery(q)
	      }
	    }
	    if (this.queries[q.id] !== null) {
	      delete this.queries[q.id]
	    }
	  }
	
	  /**
	   * adds a "Listener" to this QuerySource - that is, an object
	   * which is capable of both adding and removing queries.
	   * Currently, only the TabbedContainer class is added.
	   * also puts all current queries into the listener to be used.
	   */
	  this.addListener = function (listener) {
	    var i
	    this.listeners.push(listener)
	    for (i = 0; i < this.queries.length; i++) {
	      if (this.queries[i] !== null) {
	        listener.addQuery(this.queries[i])
	      }
	    }
	  }
	  /**
	   * removes listener from the array of listeners, if it exists! Also takes
	   * all of the queries from this source out of the listener.
	   */
	  this.removeListener = function (listener) {
	    var i
	    for (i = 0; i < this.queries.length; i++) {
	      if (this.queries[i] !== null) {
	        listener.removeQuery(this.queries[i])
	      }
	    }
	
	    for (i = 0; i < this.listeners.length; i++) {
	      if (this.listeners[i] === listener) {
	        delete this.listeners[i]
	      }
	    }
	  }
	}
	
	$rdf.Variable.prototype.isVar = 1
	$rdf.BlankNode.prototype.isVar = 1
	$rdf.BlankNode.prototype.isBlank = 1
	$rdf.NamedNode.prototype.isVar = 0
	$rdf.Literal.prototype.isVar = 0
	$rdf.Formula.prototype.isVar = 0
	$rdf.Collection.prototype.isVar = 0
	
	/**
	 * This function will match a pattern to the current kb
	 *
	 * The callback function is called whenever a match is found
	 * When fetcher is supplied this will be called to satisfy any resource requests
	 * currently not in the kb. The fetcher function needs to be defined manualy and
	 * should call $rdf.Util.AJAR_handleNewTerm to process the requested resource.
	 *
	 * @param	myQuery,	a knowledgebase containing a pattern to use as query
	 * @param	callback, 	whenever the pattern in myQuery is met this is called with
	 * 						the new bindings as parameter
	 * @param	fetcher,	whenever a resource needs to be loaded this gets called  IGNORED OBSOLETE
	 *                              f.fetecher is used as a Fetcher instance to do this.
	 * @param       onDone          callback when
	 */
	$rdf.IndexedFormula.prototype.query = function (myQuery, callback, fetcher, onDone) {
	  var kb = this
	
	  // /////////// Debug strings
	
	  var bindingDebug = function (b) {
	    var str = ''
	    var v
	    for (v in b) {
	      if (b.hasOwnProperty(v)) {
	        str += '    ' + v + ' -> ' + b[v]
	      }
	    }
	    return str
	  }
	
	  var bindingsDebug = function (nbs) {
	    var str = 'Bindings: '
	    var i
	    var n = nbs.length
	    for (i = 0; i < n; i++) {
	      str += bindingDebug(nbs[i][0]) + ';\n\t'
	    }
	    return str
	  } // bindingsDebug
	
	  // Unification: see also
	  //  http://www.w3.org/2000/10/swap/term.py
	  // for similar things in python
	  //
	  // Unification finds all bindings such that when the binding is applied
	  // to one term it is equal to the other.
	  // Returns: a list of bindings, where a binding is an associative array
	  //  mapping variuable to value.
	
	  var unifyTerm = function (self, other, bindings, formula) {
	    var actual = bindings[self]
	    if (actual === undefined) { // Not mapped
	      if (self.isVar) {
	        /* if (self.isBlank)  //bnodes are existential variables
	        {
	                if (self.toString() == other.toString()) return [[ [], null]]
	                else return []
	        }*/
	        var b = []
	        b[self] = other
	        return [[ b, null ]] // Match
	      }
	      actual = self
	    }
	    if (!actual.complexType) {
	      if (formula.redirections[actual]) {
	        actual = formula.redirections[actual]
	      }
	      if (formula.redirections[other]) {
	        other = formula.redirections[other]
	      }
	      if (actual.sameTerm(other)) {
	        return [[ [], null ]]
	      }
	      return []
	    }
	    if (self instanceof Array) {
	      if (!(other instanceof Array)) {
	        return []
	      }
	      return unifyContents(self, other, bindings)
	    }
	    throw new Error('query.js: oops - code not written yet')
	  // return undefined;  // for lint - no jslint objects to unreachables
	  //    return actual.unifyContents(other, bindings)
	  } // unifyTerm
	
	  var unifyContents = function (self, other, bindings, formula) {
	    var nbs2
	    if (self.length !== other.length) {
	      return [] // no way
	    }
	    if (!self.length) {
	      return [[ [], null ]] // Success
	    }
	    var nbs = unifyTerm(self[0], other[0], bindings, formula)
	    if (nbs.length === 0) {
	      return nbs
	    }
	    var res = []
	    var i
	    var n = nbs.length
	    var nb
	    var j
	    var m
	    var v
	    var nb2
	    var bindings2
	    for (i = 0; i < n; i++) { // for each possibility from the first term
	      nb = nbs[i][0] // new bindings
	      bindings2 = []
	      for (v in nb) {
	        if (nb.hasOwnProperty(v)) {
	          bindings2[v] = nb[v] // copy
	        }
	      }
	      for (v in bindings) {
	        if (bindings.hasOwnProperty(v)) {
	          bindings2[v] = bindings[v] // copy
	        }
	      }
	      nbs2 = unifyContents(self.slice(1), other.slice(1), bindings2, formula)
	      m = nbs2.length
	      for (j = 0; j < m; j++) {
	        nb2 = nbs2[j][0] // @@@@ no idea whether this is used or right
	        for (v in nb) {
	          if (nb.hasOwnProperty(v)) {
	            nb2[v] = nb[v]
	          }
	        }
	        res.push([nb2, null])
	      }
	    }
	    return res
	  } // unifyContents
	
	  //  Matching
	  //
	  // Matching finds all bindings such that when the binding is applied
	  // to one term it is equal to the other term.  We only match formulae.
	
	  /** if x is not in the bindings array, return the var; otherwise, return the bindings **/
	  var bind = function (x, binding) {
	    var y = binding[x]
	    if (y === undefined) {
	      return x
	    }
	    return y
	  }
	
	  // When there are OPTIONAL clauses, we must return bindings without them if none of them
	  // succeed. However, if any of them do succeed, we should not.  (This is what branchCount()
	  // tracked. The problem currently is (2011/7) that when several optionals exist, and they
	  // all match, multiple sets of bindings are returned, each with one optional filled in.)
	
	  var union = function (a, b) {
	    var c = {}
	    var x
	    for (x in a) {
	      if (a.hasOwnProperty(x)) {
	        c[x] = a[x]
	      }
	    }
	    for (x in b) {
	      if (b.hasOwnProperty(x)) {
	        c[x] = b[x]
	      }
	    }
	    return c
	  }
	
	  var OptionalBranchJunction = function (originalCallback, trunkBindings) {
	    this.trunkBindings = trunkBindings
	    this.originalCallback = originalCallback
	    this.branches = []
	    // this.results = []; // result[i] is an array of bindings for branch i
	    // this.done = {};  // done[i] means all/any results are in for branch i
	    // this.count = {}
	    return this
	  }
	
	  OptionalBranchJunction.prototype.checkAllDone = function () {
	    var i
	    for (i = 0; i < this.branches.length; i++) {
	      if (!this.branches[i].done) {
	        return
	      }
	    }
	    $rdf.log.debug('OPTIONAL BIDNINGS ALL DONE:')
	    this.doCallBacks(this.branches.length - 1, this.trunkBindings)
	  }
	  // Recrursively generate the cross product of the bindings
	  OptionalBranchJunction.prototype.doCallBacks = function (b, bindings) {
	    var j
	    if (b < 0) {
	      return this.originalCallback(bindings)
	    }
	    for (j = 0; j < this.branches[b].results.length; j++) {
	      this.doCallBacks(b - 1, union(bindings, this.branches[b].results[j]))
	    }
	  }
	
	  // A mandatory branch is the normal one, where callbacks
	  // are made immediately and no junction is needed.
	  // Might be useful for onFinsihed callback for query API.
	  var MandatoryBranch = function (callback, onDone) {
	    this.count = 0
	    this.success = false
	    this.done = false
	    // this.results = []
	    this.callback = callback
	    this.onDone = onDone
	    // this.junction = junction
	    // junction.branches.push(this)
	    return this
	  }
	
	  MandatoryBranch.prototype.reportMatch = function (bindings) {
	    // $rdf.log.error("@@@@ query.js 1"); // @@
	    this.callback(bindings)
	    this.success = true
	  }
	
	  MandatoryBranch.prototype.reportDone = function () {
	    this.done = true
	    $rdf.log.info('Mandatory query branch finished.***')
	    if (this.onDone !== undefined) {
	      this.onDone()
	    }
	  }
	
	  // An optional branch hoards its results.
	  var OptionalBranch = function (junction) {
	    this.count = 0
	    this.done = false
	    this.results = []
	    this.junction = junction
	    junction.branches.push(this)
	    return this
	  }
	
	  OptionalBranch.prototype.reportMatch = function (bindings) {
	    this.results.push(bindings)
	  }
	
	  OptionalBranch.prototype.reportDone = function () {
	    $rdf.log.debug('Optional branch finished - results.length = ' + this.results.length)
	    if (this.results.length === 0) { // This is what optional means: if no hits,
	      this.results.push({}) // mimic success, but with no bindings
	      $rdf.log.debug("Optional branch FAILED - that's OK.")
	    }
	    this.done = true
	    this.junction.checkAllDone()
	  }
	
	  /** prepare -- sets the index of the item to the possible matches
	      * @param f - formula
	      * @param item - an Statement, possibly w/ vars in it
	      * @param bindings -
	  * @returns true if the query fails -- there are no items that match **/
	  var prepare = function (f, item, bindings) {
	    var t, terms, termIndex, i, ind
	    item.nvars = 0
	    item.index = null
	    // if (!f.statements) $rdf.log.warn("@@@ prepare: f is "+f)
	    //    $rdf.log.debug("Prepare: f has "+ f.statements.length)
	    // $rdf.log.debug("Prepare: Kb size "+f.statements.length+" Preparing "+item)
	
	    terms = [item.subject, item.predicate, item.object]
	    ind = [f.subjectIndex, f.predicateIndex, f.objectIndex]
	    for (i = 0; i < 3; i++) {
	      // alert("Prepare "+terms[i]+" "+(terms[i] in bindings))
	      if (terms[i].isVar && !(bindings[terms[i]] !== undefined)) {
	        item.nvars++
	      } else {
	        t = bind(terms[i], bindings) // returns the RDF binding if bound, otherwise itself
	        // if (terms[i]!=bind(terms[i],bindings) alert("Term: "+terms[i]+"Binding: "+bind(terms[i], bindings))
	        if (f.redirections[t.hashString()]) {
	          t = f.redirections[t.hashString()] // redirect
	        }
	        termIndex = ind[i][t.hashString()]
	
	        if (!termIndex) {
	          item.index = []
	          return false // Query line cannot match
	        }
	        if ((item.index === null) || (item.index.length > termIndex.length)) {
	          item.index = termIndex
	        }
	      }
	    }
	
	    if (item.index === null) { // All 3 are variables?
	      item.index = f.statements
	    }
	    return true
	  } // prepare
	
	  /** sorting function -- negative if self is easier **/
	  // We always prefer to start with a URI to be able to browse a graph
	  // this is why we put off items with more variables till later.
	  function easiestQuery (self, other) {
	    if (self.nvars !== other.nvars) {
	      return self.nvars - other.nvars
	    }
	    return self.index.length - other.index.length
	  }
	
	  var match_index = 0 // index
	  /** matches a pattern formula against the knowledge base, e.g. to find matches for table-view
	  *
	  * @param f - knowledge base formula
	  * @param g - pattern formula (may have vars)
	  * @param bindingsSoFar  - bindings accumulated in matching to date
	  * @param level - spaces to indent stuff also lets you know what level of recursion you're at
	  * @param fetcher - function (term, requestedBy) - myFetcher / AJAR_handleNewTerm / the sort
	  * @param localCallback - function(bindings, pattern, branch) called on sucess
	  * @returns nothing
	  *
	  * Will fetch linked data from the web iff the knowledge base an associated source fetcher (f.fetcher)
	  ***/
	  var match = function (f, g, bindingsSoFar, level, fetcher, localCallback, branch) {
	    $rdf.log.debug('Match begins, Branch count now: ' + branch.count + ' for ' + branch.pattern_debug)
	    var sf = f.fetcher ? f.fetcher : null
	    // $rdf.log.debug("match: f has "+f.statements.length+", g has "+g.statements.length)
	    var pattern = g.statements
	    if (pattern.length === 0) { // when it's satisfied all the pattern triples
	      $rdf.log.debug('FOUND MATCH WITH BINDINGS:' + bindingDebug(bindingsSoFar))
	      if (g.optional.length === 0) {
	        branch.reportMatch(bindingsSoFar)
	      } else {
	        $rdf.log.debug('OPTIONAL: ' + g.optional)
	        var junction = new OptionalBranchJunction(callback, bindingsSoFar) // @@ won't work with nested optionals? nest callbacks
	        var br = []
	        var b
	        for (b = 0; b < g.optional.length; b++) {
	          br[b] = new OptionalBranch(junction) // Allocate branches to prevent premature ending
	          br[b].pattern_debug = g.optional[b] // for diagnotics only
	        }
	        for (b = 0; b < g.optional.length; b++) {
	          br[b].count = br[b].count + 1 // Count how many matches we have yet to complete
	          match(f, g.optional[b], bindingsSoFar, '', fetcher, callback, br[b])
	        }
	      }
	      branch.count--
	      $rdf.log.debug('Match ends -- success , Branch count now: ' + branch.count + ' for ' + branch.pattern_debug)
	      return // Success
	    }
	
	    var item
	    var i
	    var n = pattern.length
	    // $rdf.log.debug(level + "Match "+n+" left, bs so far:"+bindingDebug(bindingsSoFar))
	
	    // Follow links from variables in query
	    if (sf) { // Fetcher is used to fetch URIs, function first term is a URI term, second is the requester
	      var id = 'match' + match_index++
	      var fetchResource = function (requestedTerm, id) {
	        var docuri = requestedTerm.uri.split('#')[0]
	        sf.nowOrWhenFetched(docuri, undefined, function (err, body, xhr) {
	          if (err) {
	            console.log('Error following link to <' + requestedTerm.uri + '> in query: ' + body)
	          }
	          match(f, g, bindingsSoFar, level, fetcher, // match not match2 to look up any others necessary.
	            localCallback, branch)
	        })
	      /*
	      if( sf ) {
	          sf.addCallback('done', function(uri) {
	              if ((kb.canon(kb.sym(uri)).uri !== path) && (uri !== kb.canon(kb.sym(path)))) {
	                  return true
	              }
	              return false
	          })
	      }
	      fetcher(requestedTerm, id)
	      */
	      }
	      for (i = 0; i < n; i++) {
	        item = pattern[i] // for each of the triples in the query
	        if (bindingsSoFar[item.subject] !== undefined &&
	            bindingsSoFar[item.subject].uri && sf &&
	            sf.getState($rdf.Util.uri.docpart(bindingsSoFar[item.subject].uri)) === 'unrequested') {
	          // fetch the subject info and return to id
	          fetchResource(bindingsSoFar[item.subject], id)
	          return // only look up one per line this time, but we will come back again though match
	        }
	        if (bindingsSoFar[item.object] !== undefined &&
	            bindingsSoFar[item.object].uri && sf &&
	            sf.getState($rdf.Util.uri.docpart(bindingsSoFar[item.object].uri)) === 'unrequested') {
	          fetchResource(bindingsSoFar[item.object], id)
	          return
	        }
	      }
	    } // if sf
	    match2(f, g, bindingsSoFar, level, fetcher, localCallback, branch)
	    return
	  } // match
	
	  var constraintsSatisfied = function (bindings, constraints) {
	    var res = true
	    var x
	    var test
	    for (x in bindings) {
	      if (bindings.hasOwnProperty(x)) {
	        if (constraints[x]) {
	          test = constraints[x].test
	          if (test && !test(bindings[x])) {
	            res = false
	          }
	        }
	      }
	    }
	    return res
	  }
	
	  /** match2 -- stuff after the fetch **/
	  var match2 = function (f, g, bindingsSoFar, level, fetcher, callback, branch) { // post fetch
	    var pattern = g.statements
	    var n = pattern.length
	    var i
	    var k
	    var nk
	    var v
	    var bindings2
	    var newBindings1
	    var item
	    for (i = 0; i < n; i++) { // For each statement left in the query, run prepare
	      item = pattern[i]
	      $rdf.log.info('match2: item=' + item + ', bindingsSoFar=' + bindingDebug(bindingsSoFar))
	      prepare(f, item, bindingsSoFar)
	    }
	    pattern.sort(easiestQuery)
	    item = pattern[0]
	    // $rdf.log.debug("Sorted pattern:\n"+pattern)
	    var rest = f.formula()
	    rest.optional = g.optional
	    rest.constraints = g.constraints
	    rest.statements = pattern.slice(1) // No indexes: we will not query g.
	    $rdf.log.debug(level + 'match2 searching ' + item.index.length + ' for ' + item +
	      '; bindings so far=' + bindingDebug(bindingsSoFar))
	    // var results = []
	    var c
	    var nc = item.index.length
	    var nbs1
	    var st
	    var onward = 0
	    // var x
	    for (c = 0; c < nc; c++) { // For each candidate statement
	      st = item.index[c] // for each statement in the item's index, spawn a new match with that binding
	      nbs1 = unifyContents(
	        [item.subject, item.predicate, item.object],
	        [st.subject, st.predicate, st.object], bindingsSoFar, f)
	      $rdf.log.info(level + ' From first: ' + nbs1.length + ': ' + bindingsDebug(nbs1))
	      nk = nbs1.length
	      // branch.count += nk
	      // $rdf.log.debug("Branch count bumped "+nk+" to: "+branch.count)
	      for (k = 0; k < nk; k++) { // For each way that statement binds
	        bindings2 = []
	        newBindings1 = nbs1[k][0]
	        if (!constraintsSatisfied(newBindings1, g.constraints)) {
	          // branch.count--
	          $rdf.log.debug('Branch count CS: ' + branch.count)
	        } else {
	          for (v in newBindings1) {
	            if (newBindings1.hasOwnProperty(v)) {
	              bindings2[v] = newBindings1[v] // copy
	            }
	          }
	          for (v in bindingsSoFar) {
	            if (bindingsSoFar.hasOwnProperty(v)) {
	              bindings2[v] = bindingsSoFar[v] // copy
	            }
	          }
	
	          branch.count++ // Count how many matches we have yet to complete
	          onward++
	          match(f, rest, bindings2, level + '  ', fetcher, callback, branch) // call match
	        }
	      }
	    }
	    branch.count--
	    if (onward === 0) {
	      $rdf.log.debug('Match2 fails completely on ' + item)
	    }
	    $rdf.log.debug('Match2 ends, Branch count: ' + branch.count + ' for ' + branch.pattern_debug)
	    if (branch.count === 0) {
	      $rdf.log.debug('Branch finished.')
	      branch.reportDone()
	    }
	  } // match2
	
	  // ////////////////////////// Body of query()  ///////////////////////
	  /*
	  if(!fetcher) {
	      fetcher=function (x, requestedBy) {
	          if (x === null) {
	              return
	          }
	          $rdf.Util.AJAR_handleNewTerm(kb, x, requestedBy)
	      }
	  }
	  */
	  // prepare, oncallback: match1
	  // match1: fetcher, oncallback: match2
	  // match2, oncallback: populatetable
	  //    $rdf.log.debug("Query F length"+this.statements.length+" G="+myQuery)
	  var f = this
	  $rdf.log.debug('Query on ' + this.statements.length)
	
	  // kb.remoteQuery(myQuery,'http://jena.hpl.hp.com:3040/backstage',callback)
	  // return
	
	  var trunck = new MandatoryBranch(callback, onDone)
	  trunck.count++ // count one branch to complete at the moment
	  setTimeout(function () {
	    match(f, myQuery.pat, myQuery.pat.initBindings, '', fetcher, callback,
	      trunck /* branch */)
	  }, 0)
	
	  return // returns nothing; callback does the work
	} // query
	
	// ENDS
	// Converting between SPARQL queries and the $rdf query API
	/*
	
	function SQuery () {
	  this.terms = []
	  return this
	}
	
	STerm.prototype.toString = STerm.val
	SQuery.prototype.add = function (str) {this.terms.push()}*/
	
	$rdf.queryToSPARQL = function (query) {
	  var indent = 0
	  function getSelect (query) {
	    var str = addIndent() + 'SELECT '
	    for (var i = 0; i < query.vars.length; i++) {
	      str += query.vars[i] + ' '
	    }
	    str += '\n'
	    return str
	  }
	
	  function getPattern (pat) {
	    var str = ''
	    var st = pat.statements
	    for (var x in st) {
	      $rdf.log.debug('Found statement: ' + st)
	      str += addIndent() + st[x] + '\n'
	    }
	    return str
	  }
	
	  function getConstraints (pat) {
	    var str = ''
	    for (var v in pat.constraints) {
	      var foo = pat.constraints[v]
	      str += addIndent() + 'FILTER ( ' + foo.describe(v) + ' ) ' + '\n'
	    }
	    return str
	  }
	
	  function getOptionals (pat) {
	    var str = ''
	    for (var x = 0; x < pat.optional.length; x++) {
	      // alert(pat.optional.termType)
	      $rdf.log.debug('Found optional query')
	      str += addIndent() + 'OPTIONAL { ' + '\n'
	      indent++
	      str += getPattern(pat.optional[x])
	      str += getConstraints(pat.optional[x])
	      str += getOptionals(pat.optional[x])
	      indent--
	      str += addIndent() + '}' + '\n'
	    }
	    return str
	  }
	
	  function getWhere (pat) {
	    var str = addIndent() + 'WHERE \n' + '{ \n'
	    indent++
	    str += getPattern(pat)
	    str += getConstraints(pat)
	    str += getOptionals(pat)
	    indent--
	    str += '}'
	    return str
	  }
	
	  function addIndent () {
	    var str = ''
	    for (var i = 0; i < indent; i++) {
	      str += '    '
	    }
	    return str
	  }
	
	  function getSPARQL (query) {
	    return getSelect(query) + getWhere(query.pat)
	  }
	
	  return getSPARQL(query)
	}
	
	/**
	 * @SPARQL: SPARQL text that is converted to a query object which is returned.
	 * @testMode: testing flag. Prevents loading of sources.
	 */
	
	$rdf.SPARQLToQuery = function (SPARQL, testMode, kb) {
	  // AJAR_ClearTable()
	  var variableHash = []
	  function makeVar (name) {
	    if (variableHash[name]) {
	      return variableHash[name]
	    }
	    var newVar = kb.variable(name)
	    variableHash[name] = newVar
	    return newVar
	  }
	
	  // term type functions
	  function isRealText (term) {
	    return (typeof term === 'string' && term.match(/[^ \n\t]/))
	  }
	  function isVar (term) {
	    return (typeof term === 'string' && term.match(/^[\?\$]/))
	  }
	  function fixSymbolBrackets (term) {
	    if (typeof term === 'string') {
	      return term.replace(/^&lt;/, '<').replace(/&gt;$/, '>')
	    } else {
	      return term
	    }
	  }
	  function isSymbol (term) {
	    return (typeof term === 'string' && term.match(/^<[^>]*>$/))
	  }
	  function isBnode (term) {
	    return (typeof term === 'string' && (term.match(/^_:/) || term.match(/^$/)))
	  }
	  function isPrefix (term) {
	    return (typeof term === 'string' && term.match(/:$/))
	  }
	  function isPrefixedSymbol (term) {
	    return (typeof term === 'string' && term.match(/^:|^[^_][^:]*:/))
	  }
	  function getPrefix (term) {
	    var a = term.split(':')
	    return a[0]
	  }
	  function getSuffix (term) {
	    var a = term.split(':')
	    return a[1]
	  }
	  function removeBrackets (term) {
	    if (isSymbol(term)) {
	      return term.slice(1, term.length - 1)
	    } else {
	      return term
	    }
	  }
	  // takes a string and returns an array of strings and Literals in the place of literals
	  function parseLiterals (str) {
	    // var sin = (str.indexOf(/[ \n]\'/)==-1)?null:str.indexOf(/[ \n]\'/), doub = (str.indexOf(/[ \n]\"/)==-1)?null:str.indexOf(/[ \n]\"/)
	    var sin = (str.indexOf("'") === -1)
	      ? null
	      : str.indexOf("'")
	    var doub = (str.indexOf('"') === -1)
	      ? null
	      : str.indexOf('"')
	    // alert("S: "+sin+" D: "+doub)
	    if (!sin && !doub) {
	      var a = new Array(1)
	      a[0] = str
	      return a
	    }
	    var res = new Array(2)
	    var br
	    var ind
	    if (!sin || (doub && doub < sin)) {
	      br = '"'
	      ind = doub
	    } else if (!doub || (sin && sin < doub)) {
	      br = "'"
	      ind = sin
	    } else {
	      $rdf.log.error('SQARQL QUERY OOPS!')
	      return res
	    }
	    res[0] = str.slice(0, ind)
	    var end = str.slice(ind + 1).indexOf(br)
	    if (end === -1) {
	      $rdf.log.error('SPARQL parsing error: no matching parentheses in literal ' + str)
	      return str
	    }
	    // alert(str.slice(end + ind + 2).match(/^\^\^/))
	    var end2
	    if (str.slice(end + ind + 2).match(/^\^\^/)) {
	      end2 = str.slice(end + ind + 2).indexOf(' ')
	      // alert(end2)
	      res[1] = kb.literal(
	        str.slice(ind + 1, ind + 1 + end),
	        '',
	        kb.sym(removeBrackets(
	          str.slice(ind + 4 + end, ind + 2 + end + end2))
	        )
	      )
	      // alert(res[1].datatype.uri)
	      res = res.concat(parseLiterals(str.slice(end + ind + 3 + end2)))
	    } else if (str.slice(end + ind + 2).match(/^@/)) {
	      end2 = str.slice(end + ind + 2).indexOf(' ')
	      // alert(end2)
	      res[1] = kb.literal(
	        str.slice(ind + 1, ind + 1 + end),
	        str.slice(ind + 3 + end, ind + 2 + end + end2), null
	      )
	      // alert(res[1].datatype.uri)
	      res = res.concat(
	        parseLiterals(str.slice(end + ind + 2 + end2))
	      )
	    } else {
	      res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), '', null)
	      $rdf.log.info('Literal found: ' + res[1])
	      res = res.concat(parseLiterals(str.slice(end + ind + 2))) // finds any other literals
	    }
	    return res
	  }
	
	  function spaceDelimit (str) {
	    str = str.replace(/\(/g, ' ( ')
	      .replace(/\)/g, ' ) ')
	      .replace(/</g, ' <')
	      .replace(/>/g, '> ')
	      .replace(/{/g, ' { ')
	      .replace(/}/g, ' } ')
	      .replace(/[\t\n\r]/g, ' ')
	      .replace(/; /g, ' ; ')
	      .replace(/\. /g, ' . ')
	      .replace(/, /g, ' , ')
	    $rdf.log.info('New str into spaceDelimit: \n' + str)
	    var res = []
	    var br = str.split(' ')
	    for (var x in br) {
	      if (isRealText(br[x])) {
	        res = res.concat(br[x])
	      }
	    }
	    return res
	  }
	
	  function replaceKeywords (input) {
	    var strarr = input
	    for (var x = 0; x < strarr.length; x++) {
	      if (strarr[x] === 'a') {
	        strarr[x] = '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>'
	      }
	      if (strarr[x] === 'is' && strarr[x + 2] === 'of') {
	        strarr.splice(x, 1)
	        strarr.splice(x + 1, 1)
	        var s = strarr[x - 1]
	        strarr[x - 1] = strarr[x + 1]
	        strarr[x + 1] = s
	      }
	    }
	    return strarr
	  }
	
	  function toTerms (input) {
	    var res = []
	    for (var x = 0; x < input.length; x++) {
	      if (typeof input[x] !== 'string') {
	        res[x] = input[x]
	        continue
	      }
	      input[x] = fixSymbolBrackets(input[x])
	      if (isVar(input[x])) {
	        res[x] = makeVar(input[x].slice(1))
	      } else if (isBnode(input[x])) {
	        $rdf.log.info(input[x] + ' was identified as a bnode.')
	        res[x] = kb.bnode()
	      } else if (isSymbol(input[x])) {
	        $rdf.log.info(input[x] + ' was identified as a symbol.')
	        res[x] = kb.sym(removeBrackets(input[x]))
	      } else if (isPrefixedSymbol(input[x])) {
	        $rdf.log.info(input[x] + ' was identified as a prefixed symbol')
	        if (prefixes[getPrefix(input[x])]) {
	          res[x] = kb.sym(input[x] = prefixes[getPrefix(input[x])] +
	            getSuffix(input[x]))
	        } else {
	          $rdf.log.error('SPARQL error: ' + input[x] + ' with prefix ' +
	            getPrefix(input[x]) + ' does not have a correct prefix entry.')
	          res[x] = input[x]
	        }
	      } else {
	        res[x] = input[x]
	      }
	    }
	    return res
	  }
	
	  function tokenize (str) {
	    var token1 = parseLiterals(str)
	    var token2 = []
	    for (var x in token1) {
	      if (typeof token1[x] === 'string') {
	        token2 = token2.concat(spaceDelimit(token1[x]))
	      } else {
	        token2 = token2.concat(token1[x])
	      }
	    }
	    token2 = replaceKeywords(token2)
	    $rdf.log.info('SPARQL Tokens: ' + token2)
	    return token2
	  }
	
	  // CASE-INSENSITIVE
	  function arrayIndexOf (str, arr) {
	    for (var i = 0; i < arr.length; i++) {
	      if (typeof arr[i] !== 'string') {
	        continue
	      }
	      if (arr[i].toLowerCase() === str.toLowerCase()) {
	        return i
	      }
	    }
	    // $rdf.log.warn("No instance of "+str+" in array "+arr)
	    return null
	  }
	
	  // CASE-INSENSITIVE
	  function arrayIndicesOf (str, arr) {
	    var ind = []
	    for (var i = 0; i < arr.length; i++) {
	      if (typeof arr[i] !== 'string') {
	        continue
	      }
	      if (arr[i].toLowerCase() === str.toLowerCase()) {
	        ind.push(i)
	      }
	    }
	    return ind
	  }
	
	  function setVars (input, query) {
	    $rdf.log.info('SPARQL vars: ' + input)
	    for (var x in input) {
	      if (isVar(input[x])) {
	        $rdf.log.info('Added ' + input[x] + ' to query variables from SPARQL')
	        var v = makeVar(input[x].slice(1))
	        query.vars.push(v)
	        v.label = input[x].slice(1)
	      } else {
	        $rdf.log.warn('Incorrect SPARQL variable in SELECT: ' + input[x])
	      }
	    }
	  }
	
	  function getPrefixDeclarations (input) {
	    var prefInd = arrayIndicesOf('PREFIX', input)
	    var res = []
	    for (var i in prefInd) {
	      var a = input[prefInd[i] + 1]
	      var b = input[prefInd[i] + 2]
	      if (!isPrefix(a)) {
	        $rdf.log.error('Invalid SPARQL prefix: ' + a)
	      } else if (!isSymbol(b)) {
	        $rdf.log.error('Invalid SPARQL symbol: ' + b)
	      } else {
	        $rdf.log.info('Prefix found: ' + a + ' -> ' + b)
	        var pref = getPrefix(a)
	        var symbol = removeBrackets(b)
	        res[pref] = symbol
	      }
	    }
	    return res
	  }
	
	  function getMatchingBracket (arr, open, close) {
	    $rdf.log.info('Looking for a close bracket of type ' + close + ' in ' + arr)
	    var index = 0
	    for (var i = 0; i < arr.length; i++) {
	      if (arr[i] === open) {
	        index++
	      }
	      if (arr[i] === close) {
	        index--
	      }
	      if (index < 0) {
	        return i
	      }
	    }
	    $rdf.log.error('Statement had no close parenthesis in SPARQL query')
	    return 0
	  }
	
	  function constraintGreaterThan (value) {
	    this.describe = function (varstr) {
	      return varstr + ' > ' + value.toNT()
	    }
	    this.test = function (term) {
	      if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) {
	        return (parseFloat(term.value) > parseFloat(value))
	      } else {
	        return (term.toNT() > value.toNT())
	      }
	    }
	    return this
	  }
	
	  function constraintLessThan (value) { // this is not the recommended usage. Should only work on literal, numeric, dateTime
	    this.describe = function (varstr) {
	      return varstr + ' < ' + value.toNT()
	    }
	    this.test = function (term) {
	      // this.describe = function (varstr) { return varstr + " < "+value }
	      if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) {
	        return (parseFloat(term.value) < parseFloat(value))
	      } else {
	        return (term.toNT() < value.toNT())
	      }
	    }
	    return this
	  }
	  // This should only work on literals but doesn't.
	  function constraintEqualTo (value) {
	    this.describe = function (varstr) {
	      return varstr + ' = ' + value.toNT()
	    }
	    this.test = function (term) {
	      return value.sameTerm(term)
	    }
	    return this
	  }
	
	  // value must be a literal
	  function constraintRegexp (value) {
	    this.describe = function (varstr) {
	      return "REGEXP( '" + value + "' , " + varstr + ' )'
	    }
	    this.test = function (term) {
	      var str = value
	      // str = str.replace(/^//,"").replace(//$/,"")
	      var rg = new RegExp(str)
	      if (term.value) {
	        return rg.test(term.value)
	      } else {
	        return false
	      }
	    }
	  }
	
	  function setConstraint (input, pat) {
	    if (input.length === 3 && input[0].termType === 'variable' &&
	      (input[2].termType === 'symbol' || input[2].termType === 'literal')) {
	      if (input[1] === '=') {
	        $rdf.log.debug('Constraint added: ' + input)
	        pat.constraints[input[0]] = new constraintEqualTo(input[2])
	      } else if (input[1] === '>') {
	        $rdf.log.debug('Constraint added: ' + input)
	        pat.constraints[input[0]] = new constraintGreaterThan(input[2])
	      } else if (input[1] === '<') {
	        $rdf.log.debug('Constraint added: ' + input)
	        pat.constraints[input[0]] = new constraintLessThan(input[2])
	      } else {
	        $rdf.log.warn("I don't know how to handle the constraint: " + input)
	      }
	    } else if (input.length === 6 && typeof input[0] === 'string' &&
	      input[0].toLowerCase() === 'regexp' &&
	      input[1] === '(' && input[5] === ')' && input[3] === ',' &&
	      input[4].termType === 'variable' && input[2].termType === 'literal') {
	      $rdf.log.debug('Constraint added: ' + input)
	      pat.constraints[input[4]] = new constraintRegexp(input[2].value)
	    }
	  // $rdf.log.warn("I don't know how to handle the constraint: "+input)
	  // alert("length: "+input.length+" input 0 type: "+input[0].termType+" input 1: "+input[1]+" input[2] type: "+input[2].termType)
	  }
	
	  function setOptional (terms, pat) {
	    $rdf.log.debug('Optional query: ' + terms + ' not yet implemented.')
	    var opt = kb.formula()
	    setWhere(terms, opt)
	    pat.optional.push(opt)
	  }
	
	  function setWhere (input, pat) {
	    var terms = toTerms(input)
	    var end
	    $rdf.log.debug('WHERE: ' + terms)
	    var opt
	    // var opt = arrayIndicesOf("OPTIONAL",terms)
	    while (arrayIndexOf('OPTIONAL', terms)) {
	      opt = arrayIndexOf('OPTIONAL', terms)
	      $rdf.log.debug('OPT: ' + opt + ' ' + terms[opt] + ' in ' + terms)
	      if (terms[opt + 1] !== '{') {
	        $rdf.log.warn('Bad optional opening bracket in word ' + opt)
	      }
	      end = getMatchingBracket(terms.slice(opt + 2), '{', '}')
	      if (end === -1) {
	        $rdf.log.error('No matching bracket in word ' + opt)
	      } else {
	        setOptional(terms.slice(opt + 2, opt + 2 + end), pat)
	        // alert(pat.statements[0].toNT())
	        opt = arrayIndexOf('OPTIONAL', terms)
	        end = getMatchingBracket(terms.slice(opt + 2), '{', '}')
	        terms.splice(opt, end + 3)
	      }
	    }
	    $rdf.log.debug('WHERE after optionals: ' + terms)
	    while (arrayIndexOf('FILTER', terms)) {
	      var filt = arrayIndexOf('FILTER', terms)
	      if (terms[filt + 1] !== '(') {
	        $rdf.log.warn('Bad filter opening bracket in word ' + filt)
	      }
	      end = getMatchingBracket(terms.slice(filt + 2), '(', ')')
	      if (end === -1) {
	        $rdf.log.error('No matching bracket in word ' + filt)
	      } else {
	        setConstraint(terms.slice(filt + 2, filt + 2 + end), pat)
	        filt = arrayIndexOf('FILTER', terms)
	        end = getMatchingBracket(terms.slice(filt + 2), '(', ')')
	        terms.splice(filt, end + 3)
	      }
	    }
	    $rdf.log.debug('WHERE after filters and optionals: ' + terms)
	    extractStatements(terms, pat)
	  }
	
	  function extractStatements (terms, formula) {
	    var arrayZero = new Array(1)
	    arrayZero[0] = -1 // this is just to add the beginning of the where to the periods index.
	    var per = arrayZero.concat(arrayIndicesOf('.', terms))
	    var stat = []
	    for (var x = 0; x < per.length - 1; x++) {
	      stat[x] = terms.slice(per[x] + 1, per[x + 1])
	    }
	    // Now it's in an array of statements
	    for (x in stat) { // THIS MUST BE CHANGED FOR COMMA, SEMICOLON
	      $rdf.log.info('s+p+o ' + x + ' = ' + stat[x])
	      var subj = stat[x][0]
	      stat[x].splice(0, 1)
	      var sem = arrayZero.concat(arrayIndicesOf(';', stat[x]))
	      sem.push(stat[x].length)
	      var stat2 = []
	      for (var y = 0; y < sem.length - 1; y++) {
	        stat2[y] = stat[x].slice(sem[y] + 1, sem[y + 1])
	      }
	      for (x in stat2) {
	        $rdf.log.info('p+o ' + x + ' = ' + stat[x])
	        var pred = stat2[x][0]
	        stat2[x].splice(0, 1)
	        var com = arrayZero.concat(arrayIndicesOf(',', stat2[x]))
	        com.push(stat2[x].length)
	        var stat3 = []
	        for (y = 0; y < com.length - 1; y++) {
	          stat3[y] = stat2[x].slice(com[y] + 1, com[y + 1])
	        }
	        for (x in stat3) {
	          var obj = stat3[x][0]
	          $rdf.log.info('Subj=' + subj + ' Pred=' + pred + ' Obj=' + obj)
	          formula.add(subj, pred, obj)
	        }
	      }
	    }
	  }
	
	  // *******************************THE ACTUAL CODE***************************//
	  $rdf.log.info('SPARQL input: \n' + SPARQL)
	  var q = new $rdf.Query()
	  var sp = tokenize(SPARQL) // first tokenize everything
	  var prefixes = getPrefixDeclarations(sp)
	  if (!prefixes.rdf) {
	    prefixes.rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'
	  }
	  if (!prefixes.rdfs) {
	    prefixes.rdfs = 'http://www.w3.org/2000/01/rdf-schema#'
	  }
	  var selectLoc = arrayIndexOf('SELECT', sp)
	  var whereLoc = arrayIndexOf('WHERE', sp)
	  if (selectLoc < 0 || whereLoc < 0 || selectLoc > whereLoc) {
	    $rdf.log.error('Invalid or nonexistent SELECT and WHERE tags in SPARQL query')
	    return false
	  }
	  setVars(sp.slice(selectLoc + 1, whereLoc), q)
	
	  setWhere(sp.slice(whereLoc + 2, sp.length - 1), q.pat)
	
	  if (testMode) {
	    return q
	  }
	
	  for (var x in q.pat.statements) {
	    var st = q.pat.statements[x]
	    if (st.subject.termType === 'symbol') {
	      /* && sf.isPending(st.subject.uri) */ // This doesn't work.
	      // sf.requestURI(st.subject.uri,"sparql:"+st.subject) Kenny: I remove these two
	      if ($rdf.fetcher) {
	        $rdf.fetcher.lookUpThing(st.subject, 'sparql:' + st.subject)
	      }
	    }
	    if (st.object.termType === 'symbol') {
	      /* && sf.isPending(st.object.uri) */
	      // sf.requestURI(st.object.uri,"sparql:"+st.object)
	      if ($rdf.fetcher) {
	        $rdf.fetcher.lookUpThing(st.object, 'sparql:' + st.object)
	      }
	    }
	  }
	  // alert(q.pat)
	  return q
	// checkVars()
	// *******************************************************************//
	}
	
	$rdf.SPARQLResultsInterpreter = function (xml, callback, doneCallback) {
	  function isVar (term) {
	    return (typeof term === 'string' && term.match(/^[\?\$]/))
	  }
	  function fixSymbolBrackets (term) {
	    if (typeof term === 'string') {
	      return term.replace(/^&lt;/, '<').replace(/&gt;$/, '>')
	    } else {
	      return term
	    }
	  }
	  function isSymbol (term) {
	    return (typeof term === 'string' && term.match(/^<[^>]*>$/))
	  }
	  function isBnode (term) {
	    return (typeof term === 'string' &&
	    (term.match(/^_:/) || term.match(/^$/)))
	  }
	  function isPrefix (term) {
	    return (typeof term === 'string' && term.match(/:$/))
	  }
	  function isPrefixedSymbol (term) {
	    return (typeof term === 'string' && term.match(/^:|^[^_][^:]*:/))
	  }
	  function getPrefix (term) {
	    var a = term.split(':')
	    return a[0]
	  }
	  function getSuffix (term) {
	    var a = term.split(':')
	    return a[1]
	  }
	  function removeBrackets (term) {
	    if (isSymbol(term)) {
	      return term.slice(1, term.length - 1)
	    } else {
	      return term
	    }
	  }
	  function parsePrefix (attribute) {
	    if (!attribute.name.match(/^xmlns/)) {
	      return false
	    }
	    var pref = attribute.name.replace(/^xmlns/, '')
	      .replace(/^:/, '').replace(/ /g, '')
	    prefixes[pref] = attribute.value
	    $rdf.log.info('Prefix: ' + pref + '\nValue: ' + attribute.value)
	  }
	  function handleP (str) { // reconstructs prefixed URIs
	    var pref
	    var suf
	    if (isPrefixedSymbol(str)) {
	      pref = getPrefix(str)
	      suf = getSuffix(str)
	    } else {
	      pref = ''
	      suf = str
	    }
	    if (prefixes[pref]) {
	      return prefixes[pref] + suf
	    } else {
	      $rdf.log.error('Incorrect SPARQL results - bad prefix')
	    }
	  }
	  function xmlMakeTerm (node) {
	    // alert("xml Node name: "+node.nodeName+"\nxml Child value: "+node.childNodes[0].nodeValue)
	    var val = node.childNodes[0]
	    for (var x = 0; x < node.childNodes.length; x++) {
	      if (node.childNodes[x].nodeType === 3) {
	        val = node.childNodes[x]
	        break
	      }
	    }
	    if (handleP(node.nodeName) === spns + 'uri') {
	      return kb.sym(val.nodeValue)
	    } else if (handleP(node.nodeName) === spns + 'literal') {
	      return kb.literal(val.nodeValue)
	    } else if (handleP(node.nodeName) === spns + 'unbound') {
	      return 'unbound'
	    } else {
	      $rdf.log.warn("Don't know how to handle xml binding term " + node)
	    }
	    return false
	  }
	  function handleResult (result) {
	    var resultBindings = []
	    var bound = false
	    for (var x = 0; x < result.childNodes.length; x++) {
	      // alert(result[x].nodeName)
	      if (result.childNodes[x].nodeType !== 1) {
	        continue
	      }
	      if (handleP(result.childNodes[x].nodeName) !== spns + 'binding') {
	        $rdf.log.warn('Bad binding node inside result')
	        continue
	      }
	      var bind = result.childNodes[x]
	      var bindVar = makeVar(bind.getAttribute('name'))
	      var binding = null
	      for (var y = 0; y < bind.childNodes.length; y++) {
	        if (bind.childNodes[y].nodeType === 1) {
	          binding = xmlMakeTerm(bind.childNodes[y])
	          break
	        }
	      }
	      if (!binding) {
	        $rdf.log.warn('Bad binding')
	        return false
	      }
	      $rdf.log.info('var: ' + bindVar + ' binding: ' + binding)
	      bound = true
	      if (binding !== 'unbound') {
	        resultBindings[bindVar] = binding
	      }
	    }
	    // alert(callback)
	    if (bound && callback) {
	      setTimeout(function () {
	        callback(resultBindings)
	      }, 0)
	    }
	    bindingList.push(resultBindings)
	    return
	  }
	
	  // ****MAIN CODE**********
	  var prefixes = []
	  var bindingList = []
	  var head
	  var results
	  var sparql = xml.childNodes[0]
	  var spns = 'http://www.w3.org/2005/sparql-results#'
	  prefixes[''] = ''
	  var x
	
	  if (sparql.nodeName !== 'sparql') {
	    $rdf.log.error('Bad SPARQL results XML')
	    return
	  }
	
	  for (x = 0; x < sparql.attributes.length; x++) { // deals with all the prefixes beforehand
	    parsePrefix(sparql.attributes[x])
	  }
	  // looks for the head and results childNodes
	  for (x = 0; x < sparql.childNodes.length; x++) {
	    $rdf.log.info('Type: ' + sparql.childNodes[x].nodeType +
	      '\nName: ' + sparql.childNodes[x].nodeName + '\nValue: ' +
	      sparql.childNodes[x].nodeValue
	    )
	
	    if (sparql.childNodes[x].nodeType === 1 &&
	      handleP(sparql.childNodes[x].nodeName) === spns + 'head') {
	      head = sparql.childNodes[x]
	    } else if (sparql.childNodes[x].nodeType === 1 &&
	      handleP(sparql.childNodes[x].nodeName) === spns + 'results') {
	      results = sparql.childNodes[x]
	    }
	  }
	
	  if (!results && !head) {
	    $rdf.log.error('Bad SPARQL results XML')
	    return
	  }
	  // @@does anything need to be done with these?
	  // Should we check against query vars?
	  for (x = 0; x < head.childNodes.length; x++) {
	    if (head.childNodes[x].nodeType === 1 &&
	      handleP(head.childNodes[x].nodeName) === spns + 'variable') {
	      $rdf.log.info('Var: ' + head.childNodes[x].getAttribute('name'))
	    }
	  }
	
	  for (x = 0; x < results.childNodes.length; x++) {
	    if (handleP(results.childNodes[x].nodeName) === spns + 'result') {
	      $rdf.log.info('Result # ' + x)
	      handleResult(results.childNodes[x])
	    }
	  }
	  if (doneCallback) {
	    doneCallback()
	  }
	  return bindingList
	// ****END OF MAIN CODE*****
	}
	// Joe Presbrey <presbrey@mit.edu>
	// 2007-07-15
	// 2010-08-08 TimBL folded in Kenny's WEBDAV
	// 2010-12-07 TimBL addred local file write code
	
	$rdf.UpdateManager = (function () {
	  var sparql = function (store) {
	    this.store = store
	
	    if (!store.fetcher){ // The store must also/already have a fetcher
	      $rdf.fetcher(store)
	    }
	    if (store.updater){
	      throw("You can't have two UpdateManagers for the same store")
	    }
	    store.updater = this
	    this.ifps = {}
	    this.fps = {}
	    this.ns = {}
	    this.ns.link = $rdf.Namespace('http://www.w3.org/2007/ont/link#')
	    this.ns.http = $rdf.Namespace('http://www.w3.org/2007/ont/http#')
	    this.ns.httph = $rdf.Namespace('http://www.w3.org/2007/ont/httph#')
	    this.ns.ldp = $rdf.Namespace('http://www.w3.org/ns/ldp#')
	    this.ns.rdf = $rdf.Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
	    this.ns.rdfs = $rdf.Namespace('http://www.w3.org/2000/01/rdf-schema#')
	    this.ns.rdf = $rdf.Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
	    this.ns.owl = $rdf.Namespace('http://www.w3.org/2002/07/owl#')
	
	    this.patchControl = [] // index of objects fro coordinating incomng and outgoing patches
	  }
	
	  sparql.prototype.patchControlFor = function (doc) {
	    if (!this.patchControl[doc.uri]) {
	      this.patchControl[doc.uri] = []
	    }
	    return this.patchControl[doc.uri]
	  }
	
	  // Returns The method string SPARQL or DAV or LOCALFILE or false if known, undefined if not known.
	  //
	  // Files have to have a specific annotaton that they are machine written, for safety.
	  // We don't actually check for write access on files.
	  //
	  sparql.prototype.editable = function (uri, kb) {
	    if (!uri) {
	      return false // Eg subject is bnode, no known doc to write to
	    }
	    if (!kb) {
	      kb = this.store
	    }
	
	    if (uri.slice(0, 8) === 'file:///') {
	      if (kb.holds(kb.sym(uri), $rdf.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),
	        $rdf.sym('http://www.w3.org/2007/ont/link#MachineEditableDocument'))) {
	        return 'LOCALFILE'
	      }
	
	      var sts = kb.statementsMatching(kb.sym(uri), undefined, undefined)
	
	      console.log('sparql.editable: Not MachineEditableDocument file ' +
	        uri + '\n')
	      console.log(sts.map(function (x) {
	        return x.toNT()
	      }).join('\n'))
	      return false
	    // @@ Would be nifty of course to see whether we actually have write acess first.
	    }
	
	    var request
	    var definitive = false
	    var requests = kb.each(undefined, this.ns.link('requestedURI'), $rdf.uri.docpart(uri))
	
	    // Hack for the moment @@@@ 2016-02-12
	    if (kb.holds($rdf.sym(uri), this.ns.rdf('type'), this.ns.ldp('Resource'))) {
	      return 'SPARQL'
	    }
	    var i
	    var method
	    for (var r = 0; r < requests.length; r++) {
	      request = requests[r]
	      if (request !== undefined) {
	        var response = kb.any(request, this.ns.link('response'))
	        if (request !== undefined) {
	          var acceptPatch = kb.each(response, this.ns.httph('accept-patch'))
	          if (acceptPatch.length) {
	            for (i = 0; i < acceptPatch.length; i++) {
	              method = acceptPatch[i].value.trim()
	              if (method.indexOf('application/sparql-update') >= 0) return 'SPARQL'
	            }
	          }
	          var author_via = kb.each(response, this.ns.httph('ms-author-via'))
	          if (author_via.length) {
	            for (i = 0; i < author_via.length; i++) {
	              method = author_via[i].value.trim()
	              if (method.indexOf('SPARQL') >= 0) {
	                return 'SPARQL'
	              }
	              if (method.indexOf('DAV') >= 0) {
	                return 'DAV'
	              }
	            }
	          }
	          var status = kb.each(response, this.ns.http('status'))
	          if (status.length) {
	            for (i = 0; i < status.length; i++) {
	              if (status[i] === 200 || status[i] === 404) {
	                definitive = true
	              // return false // A definitive answer
	              }
	            }
	          }
	        } else {
	          console.log('sparql.editable: No response for ' + uri + '\n')
	        }
	      }
	    }
	    if (requests.length === 0) {
	      console.log('sparql.editable: No request for ' + uri + '\n')
	    } else {
	      if (definitive) {
	        return false // We have got a request and it did NOT say editable => not editable
	      }
	    }
	    console.log('sparql.editable: inconclusive for ' + uri + '\n')
	    return undefined // We don't know (yet) as we haven't had a response (yet)
	  }
	
	  // /////////  The identification of bnodes
	
	  sparql.prototype.anonymize = function (obj) {
	    return (obj.toNT().substr(0, 2) === '_:' && this._mentioned(obj))
	      ? '?' + obj.toNT().substr(2)
	      : obj.toNT()
	  }
	
	  sparql.prototype.anonymizeNT = function (stmt) {
	    return this.anonymize(stmt.subject) + ' ' +
	    this.anonymize(stmt.predicate) + ' ' +
	    this.anonymize(stmt.object) + ' .'
	  }
	
	  // A list of all bnodes occuring in a statement
	  sparql.prototype._statement_bnodes = function (st) {
	    return [st.subject, st.predicate, st.object].filter(function (x) {
	      return x.isBlank
	    })
	  }
	
	  // A list of all bnodes occuring in a list of statements
	  sparql.prototype._statement_array_bnodes = function (sts) {
	    var bnodes = []
	    for (var i = 0; i < sts.length; i++) {
	      bnodes = bnodes.concat(this._statement_bnodes(sts[i]))
	    }
	    bnodes.sort() // in place sort - result may have duplicates
	    var bnodes2 = []
	    for (var j = 0; j < bnodes.length; j++) {
	      if (j === 0 || !bnodes[j].sameTerm(bnodes[j - 1])) {
	        bnodes2.push(bnodes[j])
	      }
	    }
	    return bnodes2
	  }
	
	  sparql.prototype._cache_ifps = function () {
	    // Make a cached list of [Inverse-]Functional properties
	    // Call this once before calling context_statements
	    this.ifps = {}
	    var a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('InverseFunctionalProperty'))
	    for (var i = 0; i < a.length; i++) {
	      this.ifps[a[i].uri] = true
	    }
	    this.fps = {}
	    a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('FunctionalProperty'))
	    for (i = 0; i < a.length; i++) {
	      this.fps[a[i].uri] = true
	    }
	  }
	
	  // Returns a context to bind a given node, up to a given depth
	  sparql.prototype._bnode_context2 = function (x, source, depth) {
	    // Return a list of statements which indirectly identify a node
	    //  Depth > 1 if try further indirection.
	    //  Return array of statements (possibly empty), or null if failure
	    var sts = this.store.statementsMatching(undefined, undefined, x, source) // incoming links
	    var y
	    var res
	    for (var i = 0; i < sts.length; i++) {
	      if (this.fps[sts[i].predicate.uri]) {
	        y = sts[i].subject
	        if (!y.isBlank) {
	          return [ sts[i] ]
	        }
	        if (depth) {
	          res = this._bnode_context2(y, source, depth - 1)
	          if (res) {
	            return res.concat([ sts[i] ])
	          }
	        }
	      }
	    }
	    // outgoing links
	    sts = this.store.statementsMatching(x, undefined, undefined, source)
	    for (i = 0; i < sts.length; i++) {
	      if (this.ifps[sts[i].predicate.uri]) {
	        y = sts[i].object
	        if (!y.isBlank) {
	          return [ sts[i] ]
	        }
	        if (depth) {
	          res = this._bnode_context2(y, source, depth - 1)
	          if (res) {
	            return res.concat([ sts[i] ])
	          }
	        }
	      }
	    }
	    return null // Failure
	  }
	
	  // Returns the smallest context to bind a given single bnode
	  sparql.prototype._bnode_context_1 = function (x, source) {
	    // Return a list of statements which indirectly identify a node
	    //   Breadth-first
	    for (var depth = 0; depth < 3; depth++) { // Try simple first
	      var con = this._bnode_context2(x, source, depth)
	      if (con !== null) return con
	    }
	    throw new Error('Unable to uniquely identify bnode: ' + x.toNT())
	  }
	
	  sparql.prototype._mentioned = function (x) {
	    return (this.store.statementsMatching(x).length !== 0) || // Don't pin fresh bnodes
	    (this.store.statementsMatching(undefined, x).length !== 0) ||
	    (this.store.statementsMatching(undefined, undefined, x).length !== 0)
	  }
	
	  sparql.prototype._bnode_context = function (bnodes, doc) {
	    var context = []
	    if (bnodes.length) {
	      this._cache_ifps()
	      for (var i = 0; i < bnodes.length; i++) { // Does this occur in old graph?
	        var bnode = bnodes[i]
	        if (!this._mentioned(bnode)) continue
	        context = context.concat(this._bnode_context_1(bnode, doc))
	      }
	    }
	    return context
	  }
	
	  /*  Weird code does not make sense -- some code corruption along the line -- st undefined -- weird
	      sparql.prototype._bnode_context = function(bnodes) {
	          var context = []
	          if (bnodes.length) {
	              if (this.store.statementsMatching(st.subject.isBlank?undefined:st.subject,
	                                        st.predicate.isBlank?undefined:st.predicate,
	                                        st.object.isBlank?undefined:st.object,
	                                        st.why).length <= 1) {
	                  context = context.concat(st)
	              } else {
	                  this._cache_ifps()
	                  for (x in bnodes) {
	                      context = context.concat(this._bnode_context_1(bnodes[x], st.why))
	                  }
	              }
	          }
	          return context
	      }
	  */
	  // Returns the best context for a single statement
	  sparql.prototype._statement_context = function (st) {
	    var bnodes = this._statement_bnodes(st)
	    return this._bnode_context(bnodes, st.why)
	  }
	
	  sparql.prototype._context_where = function (context) {
	    var sparql = this
	    return (!context || context.length === 0)
	      ? ''
	      : 'WHERE { ' +
	        context.map(function (x) {
	          return sparql.anonymizeNT(x)
	        }).join('\n') + ' }\n'
	  }
	
	  sparql.prototype._fire = function (uri, query, callback) {
	    if (!uri) {
	      throw new Error('No URI given for remote editing operation: ' + query)
	    }
	    console.log('sparql: sending update to <' + uri + '>')
	    var xhr = $rdf.Util.XMLHTTPFactory()
	    xhr.options = {}
	
	    xhr.onreadystatechange = function () {
	      // dump("SPARQL update ready state for <"+uri+"> readyState="+xhr.readyState+"\n"+query+"\n")
	      if (xhr.readyState === 4) {
	        var success = (!xhr.status || (xhr.status >= 200 && xhr.status < 300))
	        if (!success) {
	          console.log('sparql: update failed for <' + uri + '> status=' +
	              xhr.status + ', ' + xhr.statusText + ', body length=' + xhr.responseText.length + '\n   for query: ' + query)
	        } else {
	          console.log('sparql: update Ok for <' + uri + '>')
	        }
	        callback(uri, success, xhr.responseText, xhr)
	      }
	    }
	
	    xhr.open('PATCH', uri, true) // async=true
	    xhr.setRequestHeader('Content-type', 'application/sparql-update')
	    xhr.send(query)
	  }
	
	  // This does NOT update the statement.
	  // It returns an object whcih includes
	  //  function which can be used to change the object of the statement.
	  //
	  sparql.prototype.update_statement = function (statement) {
	    if (statement && !statement.why) {
	      return
	    }
	    var sparql = this
	    var context = this._statement_context(statement)
	
	    return {
	      statement: statement ? [statement.subject, statement.predicate, statement.object, statement.why] : undefined,
	      statementNT: statement ? this.anonymizeNT(statement) : undefined,
	      where: sparql._context_where(context),
	
	      set_object: function (obj, callback) {
	        var query = this.where
	        query += 'DELETE DATA { ' + this.statementNT + ' } ;\n'
	        query += 'INSERT DATA { ' +
	          this.anonymize(this.statement[0]) + ' ' +
	          this.anonymize(this.statement[1]) + ' ' +
	          this.anonymize(obj) + ' ' + ' . }\n'
	
	        sparql._fire(this.statement[3].uri, query, callback)
	      }
	    }
	  }
	
	  sparql.prototype.insert_statement = function (st, callback) {
	    var st0 = st instanceof Array ? st[0] : st
	    var query = this._context_where(this._statement_context(st0))
	
	    if (st instanceof Array) {
	      var stText = ''
	      for (var i = 0; i < st.length; i++) stText += st[i] + '\n'
	      query += 'INSERT DATA { ' + stText + ' }\n'
	    } else {
	      query += 'INSERT DATA { ' +
	        this.anonymize(st.subject) + ' ' +
	        this.anonymize(st.predicate) + ' ' +
	        this.anonymize(st.object) + ' ' + ' . }\n'
	    }
	
	    this._fire(st0.why.uri, query, callback)
	  }
	
	  sparql.prototype.delete_statement = function (st, callback) {
	    var st0 = st instanceof Array ? st[0] : st
	    var query = this._context_where(this._statement_context(st0))
	
	    if (st instanceof Array) {
	      var stText = ''
	      for (var i = 0; i < st.length; i++) stText += st[i] + '\n'
	      query += 'DELETE DATA { ' + stText + ' }\n'
	    } else {
	      query += 'DELETE DATA { ' +
	        this.anonymize(st.subject) + ' ' +
	        this.anonymize(st.predicate) + ' ' +
	        this.anonymize(st.object) + ' ' + ' . }\n'
	    }
	
	    this._fire(st0.why.uri, query, callback)
	  }
	
	  //  Request a now or future action to refresh changes coming downstream
	  //
	  // This is designed to allow the system to re-request the server version,
	  // when a websocket has pinged to say there are changes.
	  // If thewebsocket, by contrast, has sent a patch, then this may not be necessary.
	
	  sparql.prototype.requestDownstreamAction = function (doc, action) {
	    var control = this.patchControlFor(doc)
	    if (!control.pendingUpstream) {
	      action(doc)
	    } else {
	      if (control.downstreamAction) {
	        if (control.downstreamAction === action) {
	          return this
	        } else {
	          throw new Error("Can't wait for > 1 differnt downstream actions")
	        }
	      } else {
	        control.downstreamAction = action
	      }
	    }
	  }
	
	  // We want to start counting websockt notifications
	  // to distinguish the ones from others from our own.
	  sparql.prototype.clearUpstreamCount = function (doc) {
	    var control = this.patchControlFor(doc)
	    control.upstreamCount = 0
	  }
	
	  sparql.prototype.getUpdatesVia = function (doc) {
	    var linkHeaders = this.store.fetcher.getHeader(doc, 'updates-via')
	    if (!linkHeaders || !linkHeaders.length) return null
	    return linkHeaders[0].trim()
	  }
	
	  sparql.prototype.addDownstreamChangeListener = function (doc, listener) {
	    var control = this.patchControlFor(doc)
	    if (!control.downstreamChangeListeners) control.downstreamChangeListeners = []
	    control.downstreamChangeListeners.push(listener)
	    this.setRefreshHandler(doc, this.reloadAndSync)
	  }
	
	  sparql.prototype.reloadAndSync = function (doc) {
	    var control = this.patchControlFor(doc)
	
	    if (control.reloading) {
	      console.log('   Already reloading - stop')
	      return // once only needed
	    }
	    control.reloading = true
	    var retryTimeout = 1000 // ms
	    var tryReload = function () {
	      console.log('try reload - timeout = ' + retryTimeout)
	      this.reload(this.store, doc, function (ok, message, xhr) {
	        control.reloading = false
	        if (ok) {
	          if (control.downstreamChangeListeners) {
	            for (var i = 0; i < control.downstreamChangeListeners.length; i++) {
	              console.log('        Calling downstream listener ' + i)
	              control.downstreamChangeListeners[i]()
	            }
	          }
	        } else {
	          if (xhr.status === 0) {
	            console.log('Network error refreshing the data. Retrying in ' +
	              retryTimeout / 1000)
	            control.reloading = true
	            retryTimeout = retryTimeout * 2
	            setTimeout(tryReload, retryTimeout)
	          } else {
	            console.log('Error ' + xhr.status + 'refreshing the data:' +
	              message + '. Stopped' + doc)
	          }
	        }
	      })
	    }
	    tryReload()
	  }
	
	  // Set up websocket to listen on
	  //
	  // There is coordination between upstream changes and downstream ones
	  // so that a reload is not done in the middle of an upsteeam patch.
	  // If you usie this API then you get called when a change happens, and you
	  // have to reload the file yourself, and then refresh the UI.
	  // Alternative is addDownstreamChangeListener(), where you do not
	  // have to do the reload yourslf. Do mot mix them.
	  //
	  //  kb contains the HTTP  metadata from prefvious operations
	  //
	  sparql.prototype.setRefreshHandler = function (doc, handler) {
	    var wssURI = this.getUpdatesVia(doc) // relative
	    var kb = this.store
	    var theHandler = handler
	    var self = this
	    var updater = this
	    var retryTimeout = 1500 // *2 will be 3 Seconds, 6, 12, etc
	    var retries = 0
	
	    if (!wssURI) {
	      console.log('Server doies not support live updates thoughUpdates-Via :-(')
	      return false
	    }
	
	    wssURI = $rdf.uri.join(wssURI, doc.uri)
	    wssURI = wssURI.replace(/^http:/, 'ws:').replace(/^https:/, 'wss:')
	    console.log('Web socket URI ' + wssURI)
	
	    var openWebsocket = function () {
	      // From https://github.com/solid/solid-spec#live-updates
	      var socket
	      if (typeof WebSocket !== 'undefined') {
	        socket = new WebSocket(wssURI)
	      } else if (typeof Services !== 'undefined') { // Firefox add on http://stackoverflow.com/questions/24244886/is-websocket-supported-in-firefox-for-android-addons
	        socket = (Services.wm.getMostRecentWindow('navigator:browser').WebSocket)(wssURI)
	      } else if (typeof window !== 'undefined' && window.WebSocket) {
	        socket = window.WebSocket(wssURI)
	      } else {
	        console.log('Live update disabled, as WebSocket not supported by platform :-(')
	        return
	      }
	      socket.onopen = function () {
	        console.log('    websocket open')
	        retryTimeout = 1500 // reset timeout to fast on success
	        this.send('sub ' + doc.uri)
	        if (retries) {
	          console.log('Web socket has been down, better check for any news.')
	          updater.requestDownstreamAction(doc, theHandler)
	        }
	      }
	      var control = self.patchControlFor(doc)
	      control.upstreamCount = 0
	
	      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
	      //
	      // 1000	CLOSE_NORMAL	Normal closure; the connection successfully completed whatever purpose for which it was created.
	      // 1001	CLOSE_GOING_AWAY	The endpoint is going away, either
	      //                                  because of a server failure or because the browser is navigating away from the page that opened the connection.
	      // 1002	CLOSE_PROTOCOL_ERROR	The endpoint is terminating the connection due to a protocol error.
	      // 1003	CLOSE_UNSUPPORTED	The connection is being terminated because the endpoint
	      //                                  received data of a type it cannot accept (for example, a text-only endpoint received binary data).
	      // 1004                             Reserved. A meaning might be defined in the future.
	      // 1005	CLOSE_NO_STATUS	Reserved.  Indicates that no status code was provided even though one was expected.
	      // 1006	CLOSE_ABNORMAL	Reserved. Used to indicate that a connection was closed abnormally (
	      //
	      //
	      socket.onclose = function (event) {
	        console.log('*** Websocket closed with code ' + event.code +
	          ", reason '" + event.reason + "' clean = " + event.clean)
	        retryTimeout *= 2
	        retries += 1
	        console.log('Retrying in ' + retryTimeout + 'ms') // (ask user?)
	        setTimeout(function () {
	          console.log('Trying websocket again')
	          openWebsocket()
	        }, retryTimeout)
	      }
	      socket.onmessage = function (msg) {
	        if (msg.data && msg.data.slice(0, 3) === 'pub') {
	          if (control.upstreamCount) {
	            control.upstreamCount -= 1
	            if (control.upstreamCount >= 0) {
	              console.log('just an echo')
	              return // Just an echo
	            }
	          }
	          control.upstreamCount = 0
	          console.log('Assume a real downstream change')
	          self.requestDownstreamAction(doc, theHandler)
	        }
	      }
	    } // openWebsocket
	    openWebsocket()
	
	    return true
	  }
	
	  // This high-level function updates the local store iff the web is changed successfully.
	  //
	  //  - deletions, insertions may be undefined or single statements or lists or formulae.
	  //
	  //  - callback is called as callback(uri, success, errorbody)
	  //
	  sparql.prototype.update = function (deletions, insertions, callback) {
	    try {
	      var kb = this.store
	      var ds = !deletions ? []
	        : deletions instanceof $rdf.IndexedFormula ? deletions.statements
	          : deletions instanceof Array ? deletions : [ deletions ]
	      var is = !insertions ? []
	        : insertions instanceof $rdf.IndexedFormula ? insertions.statements
	          : insertions instanceof Array ? insertions : [ insertions ]
	      if (!(ds instanceof Array)) {
	        throw new Error('Type Error ' + (typeof ds) + ': ' + ds)
	      }
	      if (!(is instanceof Array)) {
	        throw new Error('Type Error ' + (typeof is) + ': ' + is)
	      }
	      if (ds.length === 0 && is.length === 0) {
	        return callback(null, true) // success -- nothing needed to be done.
	      }
	      var doc = ds.length ? ds[0].why : is[0].why
	      var control = this.patchControlFor(doc)
	      var startTime = Date.now()
	
	      var props = ['subject', 'predicate', 'object', 'why']
	      var verbs = ['insert', 'delete']
	      var clauses = { 'delete': ds, 'insert': is }
	      verbs.map(function (verb) {
	        clauses[verb].map(function (st) {
	          if (!doc.sameTerm(st.why)) {
	            throw new Error('update: destination ' + doc +
	              ' inconsistent with delete quad ' + st.why)
	          }
	          props.map(function (prop) {
	            if (typeof st[prop] === 'undefined') {
	              throw new Error('update: undefined ' + prop + ' of statement.')
	            }
	          })
	        })
	      })
	
	      var protocol = this.editable(doc.uri, kb)
	      if (!protocol) {
	        throw new Error("Can't make changes in uneditable " + doc)
	      }
	      var i
	      var newSts
	      var documentString
	      var sz
	      if (protocol.indexOf('SPARQL') >= 0) {
	        var bnodes = []
	        if (ds.length) bnodes = this._statement_array_bnodes(ds)
	        if (is.length) bnodes = bnodes.concat(this._statement_array_bnodes(is))
	        var context = this._bnode_context(bnodes, doc)
	        var whereClause = this._context_where(context)
	        var query = ''
	        if (whereClause.length) { // Is there a WHERE clause?
	          if (ds.length) {
	            query += 'DELETE { '
	            for (i = 0; i < ds.length; i++) {
	              query += this.anonymizeNT(ds[i]) + '\n'
	            }
	            query += ' }\n'
	          }
	          if (is.length) {
	            query += 'INSERT { '
	            for (i = 0; i < is.length; i++) {
	              query += this.anonymizeNT(is[i]) + '\n'
	            }
	            query += ' }\n'
	          }
	          query += whereClause
	        } else { // no where clause
	          if (ds.length) {
	            query += 'DELETE DATA { '
	            for (i = 0; i < ds.length; i++) {
	              query += this.anonymizeNT(ds[i]) + '\n'
	            }
	            query += ' } \n'
	          }
	          if (is.length) {
	            if (ds.length) query += ' ; '
	            query += 'INSERT DATA { '
	            for (i = 0; i < is.length; i++) {
	              query += this.anonymizeNT(is[i]) + '\n'
	            }
	            query += ' }\n'
	          }
	        }
	        // Track pending upstream patches until they have fnished their callback
	        control.pendingUpstream = control.pendingUpstream ? control.pendingUpstream + 1 : 1
	        if (typeof control.upstreamCount !== 'undefined') {
	          control.upstreamCount += 1 // count changes we originated ourselves
	        }
	
	        this._fire(doc.uri, query,
	          function (uri, success, body, xhr) {
	            xhr.elapsedTime_ms = Date.now() - startTime
	            console.log('    sparql: Return ' + (success ? 'success' : 'FAILURE ' + xhr.status) +
	              ' elapsed ' + xhr.elapsedTime_ms + 'ms')
	            if (success) {
	              try {
	                kb.remove(ds)
	              } catch (e) {
	                success = false
	                body = 'Remote Ok BUT error deleting ' + ds.length + ' from store!!! ' + e
	              } // Add in any case -- help recover from weirdness??
	              for (var i = 0; i < is.length; i++) {
	                kb.add(is[i].subject, is[i].predicate, is[i].object, doc)
	              }
	            }
	
	            callback(uri, success, body, xhr)
	            control.pendingUpstream -= 1
	            // When upstream patches have been sent, reload state if downstream waiting
	            if (control.pendingUpstream === 0 && control.downstreamAction) {
	              var downstreamAction = control.downstreamAction
	              delete control.downstreamAction
	              console.log('delayed downstream action:')
	              downstreamAction(doc)
	            }
	          })
	      } else if (protocol.indexOf('DAV') >= 0) {
	        // The code below is derived from Kenny's UpdateCenter.js
	        documentString
	        var request = kb.any(doc, this.ns.link('request'))
	        if (!request) {
	          throw new Error('No record of our HTTP GET request for document: ' +
	            doc)
	        } // should not happen
	        var response = kb.any(request, this.ns.link('response'))
	        if (!response) {
	          return null // throw "No record HTTP GET response for document: "+doc
	        }
	        var content_type = kb.the(response, this.ns.httph('content-type')).value
	
	        // prepare contents of revised document
	        newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice() // copy!
	        for (i = 0; i < ds.length; i++) {
	          $rdf.Util.RDFArrayRemove(newSts, ds[i])
	        }
	        for (i = 0; i < is.length; i++) {
	          newSts.push(is[i])
	        }
	
	        // serialize to te appropriate format
	        sz = $rdf.Serializer(kb)
	        sz.suggestNamespaces(kb.namespaces)
	        sz.setBase(doc.uri) // ?? beware of this - kenny (why? tim)
	        switch (content_type) {
	          case 'application/rdf+xml':
	            documentString = sz.statementsToXML(newSts)
	            break
	          case 'text/n3':
	          case 'text/turtle':
	          case 'application/x-turtle': // Legacy
	          case 'application/n3': // Legacy
	            documentString = sz.statementsToN3(newSts)
	            break
	          default:
	            throw new Error('Content-type ' + content_type + ' not supported for data write')
	        }
	
	        // Write the new version back
	
	        var candidateTarget = kb.the(response, this.ns.httph('content-location'))
	        var targetURI
	        if (candidateTarget) {
	          targetURI = $rdf.uri.join(candidateTarget.value, targetURI)
	        }
	        var xhr = $rdf.Util.XMLHTTPFactory()
	        xhr.options = {}
	        xhr.onreadystatechange = function () {
	          if (xhr.readyState === 4) {
	            // formula from sparqlUpdate.js, what about redirects?
	            var success = (!xhr.status || (xhr.status >= 200 && xhr.status < 300))
	            if (success) {
	              for (var i = 0; i < ds.length; i++) {
	                kb.remove(ds[i])
	              }
	              for (i = 0; i < is.length; i++) {
	                kb.add(is[i].subject, is[i].predicate, is[i].object, doc)
	              }
	            }
	            callback(doc.uri, success, xhr.responseText)
	          }
	        }
	        xhr.open('PUT', targetURI, true)
	        // assume the server does PUT content-negotiation.
	        xhr.setRequestHeader('Content-type', content_type) // OK?
	        xhr.send(documentString)
	      } else {
	        if (protocol.indexOf('LOCALFILE') >= 0) {
	          try {
	            console.log('Writing back to local file\n')
	            // See http://simon-jung.blogspot.com/2007/10/firefox-extension-file-io.html
	            // prepare contents of revised document
	            newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice() // copy!
	            for (i = 0; i < ds.length; i++) {
	              $rdf.Util.RDFArrayRemove(newSts, ds[i])
	            }
	            for (i = 0; i < is.length; i++) {
	              newSts.push(is[i])
	            }
	            // serialize to the appropriate format
	            documentString
	            sz = $rdf.Serializer(kb)
	            sz.suggestNamespaces(kb.namespaces)
	            sz.setBase(doc.uri) // ?? beware of this - kenny (why? tim)
	            var dot = doc.uri.lastIndexOf('.')
	            if (dot < 1) {
	              throw new Error('Rewriting file: No filename extension: ' + doc.uri)
	            }
	            var ext = doc.uri.slice(dot + 1)
	            switch (ext) {
	              case 'rdf':
	              case 'owl': // Just my experence   ...@@ we should keep the format in which it was parsed
	              case 'xml':
	                documentString = sz.statementsToXML(newSts)
	                break
	              case 'n3':
	              case 'nt':
	              case 'ttl':
	                documentString = sz.statementsToN3(newSts)
	                break
	              default:
	                throw new Error('File extension .' + ext + ' not supported for data write')
	            }
	            // Write the new version back
	            // create component for file writing
	            console.log('Writing back: <<<' + documentString + '>>>')
	            var filename = doc.uri.slice(7) // chop off   file://  leaving /path
	            // console.log("Writeback: Filename: "+filename+"\n")
	            var file = Components.classes['@mozilla.org/file/local;1']
	              .createInstance(Components.interfaces.nsILocalFile)
	            file.initWithPath(filename)
	            if (!file.exists()) {
	              throw new Error('Rewriting file <' + doc.uri +
	                '> but it does not exist!')
	            }
	            // {
	            // file.create( Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420)
	            // }
	            // create file output stream and use write/create/truncate mode
	            // 0x02 writing, 0x08 create file, 0x20 truncate length if exist
	            var stream = Components.classes['@mozilla.org/network/file-output-stream;1']
	              .createInstance(Components.interfaces.nsIFileOutputStream)
	
	            // Various JS systems object to 0666 in struct mode as dangerous
	            stream.init(file, 0x02 | 0x08 | 0x20, parseInt('0666', 8), 0)
	
	            // write data to file then close output stream
	            stream.write(documentString, documentString.length)
	            stream.close()
	
	            for (i = 0; i < ds.length; i++) {
	              kb.remove(ds[i])
	            }
	            for (i = 0; i < is.length; i++) {
	              kb.add(is[i].subject, is[i].predicate, is[i].object, doc)
	            }
	            callback(doc.uri, true, '') // success!
	          } catch (e) {
	            callback(doc.uri, false,
	              'Exception trying to write back file <' + doc.uri + '>\n'
	              // + tabulator.Util.stackString(e))
	            )
	          }
	        } else {
	          throw new Error("Unhandled edit method: '" + protocol + "' for " + doc)
	        }
	      }
	    } catch (e) {
	      callback(undefined, false, 'Exception in update: ' + e)
	    }
	  } // wnd update
	
	  // This suitable for an inital creation of a document
	  //
	  // data:    string, or array of statements
	  //
	  sparql.prototype.put = function (doc, data, content_type, callback) {
	    var documentString
	    var kb = this.store
	
	    if (typeof data === typeof '') {
	      documentString = data
	    } else {
	      // serialize to te appropriate format
	      var sz = $rdf.Serializer(kb)
	      sz.suggestNamespaces(kb.namespaces)
	      sz.setBase(doc.uri)
	      switch (content_type) {
	        case 'application/rdf+xml':
	          documentString = sz.statementsToXML(data)
	          break
	        case 'text/n3':
	        case 'text/turtle':
	        case 'application/x-turtle': // Legacy
	        case 'application/n3': // Legacy
	          documentString = sz.statementsToN3(data)
	          break
	        default:
	          throw new Error('Content-type ' + content_type +
	            ' not supported for data PUT')
	      }
	    }
	    var xhr = $rdf.Util.XMLHTTPFactory()
	    xhr.options = {}
	    xhr.onreadystatechange = function () {
	      if (xhr.readyState === 4) {
	        // formula from sparqlUpdate.js, what about redirects?
	        var success = (!xhr.status || (xhr.status >= 200 && xhr.status < 300))
	        if (success && typeof data !== 'string') {
	          data.map(function (st) {
	            kb.addStatement(st)
	          })
	        // kb.fetcher.requested[doc.uri] = true // as though fetched
	        }
	        if (success) {
	          delete kb.fetcher.nonexistant[doc.uri]
	          delete kb.fetcher.requested[doc.uri]
	        // @@ later we can fake it has been requestd if put gives us the header sand we save them.
	        }
	        callback(doc.uri, success, xhr.responseText, xhr)
	      }
	    }
	    xhr.open('PUT', doc.uri, true)
	    xhr.setRequestHeader('Content-type', content_type)
	    xhr.send(documentString)
	  }
	
	  // Reload a document.
	  //
	  // Fast and cheap, no metaata
	  // Measure times for the document
	  // Load it provisionally
	  // Don't delete the statemenst before the load, or it will leave a broken document
	  // in the meantime.
	
	  sparql.prototype.reload = function (kb, doc, callback) {
	    var startTime = Date.now()
	    // force sets no-cache and
	    kb.fetcher.nowOrWhenFetched(doc.uri, {force: true, noMeta: true, clearPreviousData: true}, function (ok, body, xhr) {
	      if (!ok) {
	        console.log('    ERROR reloading data: ' + body)
	        callback(false, 'Error reloading data: ' + body, xhr)
	      } else if (xhr.onErrorWasCalled || xhr.status !== 200) {
	        console.log('    Non-HTTP error reloading data! onErrorWasCalled=' +
	          xhr.onErrorWasCalled + ' status: ' + xhr.status)
	        callback(false, 'Non-HTTP error reloading data: ' + body, xhr)
	      } else {
	        var elapsedTime_ms = Date.now() - startTime
	        if (!doc.reloadTime_total) doc.reloadTime_total = 0
	        if (!doc.reloadTime_count) doc.reloadTime_count = 0
	        doc.reloadTime_total += elapsedTime_ms
	        doc.reloadTime_count += 1
	        console.log('    Fetch took ' + elapsedTime_ms + 'ms, av. of ' +
	          doc.reloadTime_count + ' = ' +
	          (doc.reloadTime_total / doc.reloadTime_count) + 'ms.')
	        callback(true)
	      }
	    })
	  }
	
	  sparql.prototype.oldReload = function (kb, doc, callback) {
	    var g2 = $rdf.graph() // A separate store to hold the data as we load it
	    var f2 = $rdf.fetcher(g2)
	    var startTime = Date.now()
	    // force sets no-cache and
	    f2.nowOrWhenFetched(doc.uri, {force: true, noMeta: true, clearPreviousData: true}, function (ok, body, xhr) {
	      if (!ok) {
	        console.log('    ERROR reloading data: ' + body)
	        callback(false, 'Error reloading data: ' + body, xhr)
	      } else if (xhr.onErrorWasCalled || xhr.status !== 200) {
	        console.log('    Non-HTTP error reloading data! onErrorWasCalled=' +
	          xhr.onErrorWasCalled + ' status: ' + xhr.status)
	        callback(false, 'Non-HTTP error reloading data: ' + body, xhr)
	      } else {
	        var sts1 = kb.statementsMatching(undefined, undefined, undefined, doc).slice() // Take a copy!!
	        var sts2 = g2.statementsMatching(undefined, undefined, undefined, doc).slice()
	        console.log('    replacing ' + sts1.length + ' with ' + sts2.length +
	          ' out of total statements ' + kb.statements.length)
	        kb.remove(sts1)
	        kb.add(sts2)
	        var elapsedTime_ms = Date.now() - startTime
	        if (sts2.length === 0) {
	          console.log('????????????????? 0000000')
	        }
	        if (!doc.reloadTime_total) doc.reloadTime_total = 0
	        if (!doc.reloadTime_count) doc.reloadTime_count = 0
	        doc.reloadTime_total += elapsedTime_ms
	        doc.reloadTime_count += 1
	        console.log('    fetch took ' + elapsedTime_ms + 'ms, av. of ' + doc.reloadTime_count + ' = ' +
	          (doc.reloadTime_total / doc.reloadTime_count) + 'ms.')
	        callback(true)
	      }
	    })
	  }
	  return sparql
	})()
	$rdf.jsonParser = (function () {
	  return {
	    parseJSON: function (data, source, store) {
	      var subject, predicate, object
	      var bnodes = {}
	      var why = store.sym(source)
	      for (var x in data) {
	        if (x.indexOf('_:') === 0) {
	          if (bnodes[x]) {
	            subject = bnodes[x]
	          } else {
	            subject = store.bnode(x)
	            bnodes[x] = subject
	          }
	        } else {
	          subject = store.sym(x)
	        }
	        var preds = data[x]
	        for (var y in preds) {
	          var objects = preds[y]
	          predicate = store.sym(y)
	          for (var z in objects) {
	            var obj = objects[z]
	            if (obj.type === 'uri') {
	              object = store.sym(obj.value)
	              store.add(subject, predicate, object, why)
	            } else if (obj.type === 'bnode') {
	              if (bnodes[obj.value]) {
	                object = bnodes[obj.value]
	              } else {
	                object = store.bnode(obj.value)
	                bnodes[obj.value] = object
	              }
	              store.add(subject, predicate, object, why)
	            } else if (obj.type === 'literal') {
	              var datatype
	              if (obj.datatype) {
	                object = store.literal(obj.value, undefined, store.sym(obj.datatype))
	              } else if (obj.lang) {
	                object = store.literal(obj.value, obj.lang)
	              } else {
	                object = store.literal(obj.value)
	              }
	              store.add(subject, predicate, object, why)
	            } else {
	              throw new Error('error: unexpected termtype: ' + z.type)
	            }
	          }
	        }
	      }
	    }
	  }
	})()
	/*      Serialization of RDF Graphs
	**
	** Tim Berners-Lee 2006
	** This is or was http://dig.csail.mit.edu/2005/ajar/ajaw/js/rdf/serialize.js
	**
	** Bug: can't serialize  http://data.semanticweb.org/person/abraham-bernstein/rdf
	** in XML (from mhausenblas)
	*/
	
	// @@@ Check the whole toStr thing tosee whetehr it still makes sense -- tbl
	//
	$rdf.Serializer = function() {
	
	var __Serializer = function( store ){
	    this.flags = "";
	    this.base = null;
	
	    this.prefixes = [];    // suggested prefixes
	    this.namespaces = []; // complementary indexes
	
	    this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'); // XML code assumes this!
	    this.suggestPrefix('xml', 'reserved:reservedForFutureUse'); // XML reserves xml: in the spec.
	
	    this.namespacesUsed = []; // Count actually used and so needed in @prefixes
	    this.keywords = ['a']; // The only one we generate at the moment
	    this.prefixchars = "abcdefghijklmnopqustuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	    this.incoming = null;  // Array not calculated yet
	    this.formulas = [];  // remebering original formulae from hashes
	    this.store = store;
	
	    /* pass */
	}
	
	__Serializer.prototype.setBase = function(base)
	    { this.base = base };
	
	__Serializer.prototype.setFlags = function(flags)
	    { this.flags = flags?flags: '' };
	
	
	__Serializer.prototype.toStr = function(x) {
	    var s = x.toNT();
	    if (x.termType == 'formula') {
	        this.formulas[s] = x; // remember as reverse does not work
	    }
	    return s;
	};
	
	__Serializer.prototype.fromStr = function(s) {
	    if (s[0] == '{') {
	        var x = this.formulas[s];
	        if (!x) alert('No formula object for '+s)
	        return x;
	    }
	    return this.store.fromNT(s);
	};
	
	
	
	
	
	/* Accumulate Namespaces
	**
	** These are only hints.  If two overlap, only one gets used
	** There is therefore no guarantee in general.
	*/
	
	__Serializer.prototype.suggestPrefix = function(prefix, uri) {
	    if (prefix.slice(0,7) === 'default') return; // Try to weed these out
	    if (prefix.slice(0,2) === 'ns') return; //  From others inferior algos
	    if (!prefix || !uri) return; // empty strings not suitable
	    if (prefix in this.namespaces || uri in this.prefixes) return; // already used
	    this.prefixes[uri] = prefix;
	    this.namespaces[prefix] = uri;
	}
	
	// Takes a namespace -> prefix map
	__Serializer.prototype.suggestNamespaces = function(namespaces) {
	    for (var px in namespaces) {
	        this.suggestPrefix(px, namespaces[px]);
	    }
	}
	
	__Serializer.prototype.checkIntegrity = function() {
	    var p, ns;
	    for (p in this.namespaces) {
	        if (this.prefixes[this.namespaces[p]] !== p) {
	            throw "Serializer integity error 1: " + p + ", " +
	                this.namespaces[p] + ", "+ this.prefixes[this.namespaces[p]] +"!";
	        }
	    }
	    for (ns in this.prefixes) {
	        if (this.namespaces[this.prefixes[ns]] !== ns) {
	            throw "Serializer integity error 2: " + ns + ", " +
	                this.prefixs[ns] + ", "+ this.namespaces[this.prefixes[ns]] +"!";
	
	        }
	    }
	}
	
	// Make up an unused prefix for a random namespace
	__Serializer.prototype.makeUpPrefix = function(uri) {
	    var p = uri;
	    var pok;
	    function canUse(pp) {
	        if (! __Serializer.prototype.validPrefix.test(pp)) return false; // bad format
	        if (pp === 'ns') return false; // boring
	        if (pp in this.namespaces) return false; // already used
	        this.prefixes[uri] = pp;
	        this.namespaces[pp] = uri;
	        pok = pp;
	        return true
	    }
	    canUse = canUse.bind(this);
	/*    for (var ns in this.prefixes) {
	        namespaces[this.prefixes[ns]] = ns; // reverse index foo
	    }
	    */
	    if ('#/'.indexOf(p[p.length-1]) >= 0) p = p.slice(0, -1);
	    var slash = p.lastIndexOf('/');
	    if (slash >= 0) p = p.slice(slash+1);
	    var i = 0;
	    while (i < p.length)
	        if (this.prefixchars.indexOf(p[i])) i++; else break;
	    p = p.slice(0,i);
	    if (p.length < 6 && canUse(p)) return pok; // exact i sbest
	    if (canUse(p.slice(0,3))) return pok;
	    if (canUse(p.slice(0,2))) return pok;
	    if (canUse(p.slice(0,4))) return pok;
	    if (canUse(p.slice(0,1))) return pok;
	    if (canUse(p.slice(0,5))) return pok;
	    if (! __Serializer.prototype.validPrefix.test(p)) {
	        p = 'n';  // Otherwise the loop below may never termimnate
	    }
	    for (var i=0;; i++) if (canUse(p.slice(0,3)+i)) return pok;
	}
	
	
	
	// Todo:
	//  - Sort the statements by subject, pred, object
	//  - do stuff about the docu first and then (or first) about its primary topic.
	
	__Serializer.prototype.rootSubjects = function(sts) {
	    var incoming = {};
	    var subjects = {};
	    var allBnodes = {};
	
	/* This scan is to find out which nodes will have to be the roots of trees
	** in the serialized form. This will be any symbols, and any bnodes
	** which hve more or less than one incoming arc, and any bnodes which have
	** one incoming arc but it is an uninterrupted loop of such nodes back to itself.
	** This should be kept linear time with repect to the number of statements.
	** Note it does not use any indexing of the store.
	*/
	
	
	    // $rdf.log.debug('serialize.js Find bnodes with only one incoming arc\n')
	    for (var i = 0; i<sts.length; i++) {
	        var st = sts[i];
	        [ st.subject, st.predicate, st.object].map(function(y){
	            if (y.termType =='bnode'){allBnodes[y.toNT()] = true}});
	        var x = sts[i].object;
	        if (!incoming.hasOwnProperty(x)) incoming[x] = [];
	        incoming[x].push(st.subject) // List of things which will cause this to be printed
	        var ss =  subjects[this.toStr(st.subject)]; // Statements with this as subject
	        if (!ss) ss = [];
	        ss.push(st);
	        subjects[this.toStr(st.subject)] = ss; // Make hash. @@ too slow for formula?
	        // $rdf.log.debug(' sz potential subject: '+sts[i].subject)
	    }
	
	    var roots = [];
	    for (var xNT in subjects) {
	        if (!subjects.hasOwnProperty(xNT)) continue;
	        var x = this.fromStr(xNT);
	        if ((x.termType != 'bnode') || !incoming[x] || (incoming[x].length != 1)){
	            roots.push(x);
	            //$rdf.log.debug(' sz actual subject -: ' + x)
	            continue;
	        }
	    }
	    this.incoming = incoming; // Keep for serializing @@ Bug for nested formulas
	
	//////////// New bit for CONNECTED bnode loops:frootshash
	
	// This scans to see whether the serialization is gpoing to lead to a bnode loop
	// and at the same time accumulates a list of all bnodes mentioned.
	// This is in fact a cut down N3 serialization
	/*
	    // $rdf.log.debug('serialize.js Looking for connected bnode loops\n')
	    for (var i=0; i<sts.length; i++) { // @@TBL
	        // dump('\t'+sts[i]+'\n');
	    }
	    var doneBnodesNT = {};
	    function dummyPropertyTree(subject, subjects, rootsHash) {
	        // dump('dummyPropertyTree('+subject+'...)\n');
	        var sts = subjects[sz.toStr(subject)]; // relevant statements
	        for (var i=0; i<sts.length; i++) {
	            dummyObjectTree(sts[i].object, subjects, rootsHash);
	        }
	    }
	
	    // Convert a set of statements into a nested tree of lists and strings
	    // @param force,    "we know this is a root, do it anyway. It isn't a loop."
	    function dummyObjectTree(obj, subjects, rootsHash, force) {
	        // dump('dummyObjectTree('+obj+'...)\n');
	        if (obj.termType == 'bnode' && (subjects[sz.toStr(obj)]  &&
	            (force || (rootsHash[obj.toNT()] == undefined )))) {// and there are statements
	            if (doneBnodesNT[obj.toNT()]) { // Ah-ha! a loop
	                throw "Serializer: Should be no loops "+obj;
	            }
	            doneBnodesNT[obj.toNT()] = true;
	            return  dummyPropertyTree(obj, subjects, rootsHash);
	        }
	        return dummyTermToN3(obj, subjects, rootsHash);
	    }
	
	    // Scan for bnodes nested inside lists too
	    function dummyTermToN3(expr, subjects, rootsHash) {
	        if (expr.termType == 'bnode') doneBnodesNT[expr.toNT()] = true;
	        // $rdf.log.debug('serialize: seen '+expr);
	        if (expr.termType == 'collection') {
	            for (i=0; i<expr.elements.length; i++) {
	                if (expr.elements[i].termType == 'bnode')
	                    dummyObjectTree(expr.elements[i], subjects, rootsHash);
	            }
	        return;
	        }
	    }
	
	    // The tree for a subject
	    function dummySubjectTree(subject, subjects, rootsHash) {
	        // dump('dummySubjectTree('+subject+'...)\n');
	        if (subject.termType == 'bnode' && !incoming[subject])
	            return dummyObjectTree(subject, subjects, rootsHash, true); // Anonymous bnode subject
	        dummyTermToN3(subject, subjects, rootsHash);
	        dummyPropertyTree(subject, subjects, rootsHash);
	    }
	*/
	    // Now do the scan using existing roots
	    // $rdf.log.debug('serialize.js Dummy serialize to check for missing nodes')
	    var rootsHash = {};
	    for (var i = 0; i< roots.length; i++) rootsHash[roots[i].toNT()] = true;
	/*
	    for (var i=0; i<roots.length; i++) {
	        var root = roots[i];
	        dummySubjectTree(root, subjects, rootsHash);
	    }
	    // dump('Looking for mising bnodes...\n')
	
	// Now in new roots for anythig not acccounted for
	// Now we check for any bndoes which have not been covered.
	// Such bnodes must be in isolated rings of pure bnodes.
	// They each have incoming link of 1.
	
	    // $rdf.log.debug('serialize.js Looking for connected bnode loops\n')
	    for (;;) {
	        var bnt;
	        var found = null;
	        for (bnt in allBnodes) { // @@ Note: not repeatable. No canonicalisation
	            if (doneBnodesNT[bnt]) continue;
	            found = bnt; // Ah-ha! not covered
	            break;
	        }
	        if (found == null) break; // All done - no bnodes left out/
	        // dump('Found isolated bnode:'+found+'\n');
	        doneBnodesNT[bnt] = true;
	        var root = this.store.fromNT(found);
	        roots.push(root); // Add a new root
	        rootsHash[found] = true;
	        // $rdf.log.debug('isolated bnode:'+found+', subjects[found]:'+subjects[found]+'\n');
	        if (subjects[found] == undefined) {
	            for (var i=0; i<sts.length; i++) {
	                // dump('\t'+sts[i]+'\n');
	            }
	            throw "Isolated node should be a subject" +found;
	        }
	        dummySubjectTree(root, subjects, rootsHash); // trace out the ring
	    }
	    // dump('Done bnode adjustments.\n')
	*/
	    return {'roots':roots, 'subjects':subjects,
	                'rootsHash': rootsHash, 'incoming': incoming};
	}
	
	////////////////////////////////////////////////////////
	
	__Serializer.prototype.toN3 = function(f) {
	    return this.statementsToN3(f.statements);
	}
	
	__Serializer.prototype._notQNameChars = "\t\r\n !\"#$%&'()*.,+/;<=>?@[\\]^`{|}~";
	__Serializer.prototype._notNameChars =
	                    ( __Serializer.prototype._notQNameChars + ":" ) ;
	
	
	__Serializer.prototype.statementsToN3 = function(sts) {
	    var indent = 4;
	    var width = 80;
	
	    var predMap = {}
	
	    if (this.flags.indexOf('s') < 0 ){
	      predMap['http://www.w3.org/2002/07/owl#sameAs'] = '='
	    }
	    if (this.flags.indexOf('t') < 0 ){
	      predMap['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'] = 'a'
	    }
	    if (this.flags.indexOf('i') < 0 ){
	      predMap['http://www.w3.org/2000/10/swap/log#implies'] = '=>'
	    }
	
	
	    ////////////////////////// Arrange the bits of text
	
	    var spaces=function(n) {
	        var s='';
	        for(var i=0; i<n; i++) s+=' ';
	        return s
	    }
	
	    var treeToLine = function(tree) {
	        var str = '';
	        for (var i=0; i<tree.length; i++) {
	            var branch = tree[i];
	            var s2 = (typeof branch == 'string') ? branch : treeToLine(branch);
	             // Note the space before the dot in case statement ends 123. which is in fact allowed but be conservative.
	            if (i!=0 && s2 != ',' && s2 != ';') str += ' '; // was also:  && s2 != '.'
	            str += s2;
	        }
	        return str;
	    }
	
	    // Convert a nested tree of lists and strings to a string
	    var treeToString = function(tree, level) {
	        var str = '';
	        var lastLength = 100000;
	        if (!level) level = 0;
	        for (var i=0; i<tree.length; i++) {
	            var branch = tree[i];
	            if (typeof branch != 'string') {
	                var substr = treeToString(branch, level +1);
	                if (
	                    substr.length < 10*(width-indent*level)
	                    && substr.indexOf('"""') < 0) {// Don't mess up multiline strings
	                    var line = treeToLine(branch);
	                    if (line.length < (width-indent*level)) {
	                        branch = '   '+line; //   @@ Hack: treat as string below
	                        substr = ''
	                    }
	                }
	                if (substr) lastLength = 10000;
	                str += substr;
	            }
	            if (typeof branch == 'string') {
	                if (branch.length == '1' && str.slice(-1) == '\n') {
	                    if (",.;".indexOf(branch) >=0) {
	                        str = str.slice(0,-1) + branch + '\n'; //  slip punct'n on end
	                        lastLength += 1;
	                        continue;
	                    } else if ("])}".indexOf(branch) >=0) {
	                        str = str.slice(0,-1) + ' ' + branch + '\n';
	                        lastLength += 2;
	                        continue;
	                    }
	                }
	                if (lastLength < (indent*level+4)) { // continue
	                    str = str.slice(0,-1) + ' ' + branch + '\n';
	                    lastLength += branch.length + 1;
	                } else {
	                    var line = spaces(indent*level) +branch;
	                    str += line +'\n';
	                    lastLength = line.length;
	                }
	
	            } else { // not string
	            }
	        }
	        return str;
	    };
	
	    ////////////////////////////////////////////// Structure for N3
	
	
	    // Convert a set of statements into a nested tree of lists and strings
	    function statementListToTree(statements) {
	        // print('Statement tree for '+statements.length);
	        var res = [];
	        var stats = this.rootSubjects(statements);
	        var roots = stats.roots;
	        var results = []
	        for (var i=0; i<roots.length; i++) {
	            var root = roots[i];
	            results.push(subjectTree(root, stats))
	        }
	        return results;
	    }
	    statementListToTree = statementListToTree.bind(this);
	
	    // The tree for a subject
	    function subjectTree(subject, stats) {
	        if (subject.termType == 'bnode' && !stats.incoming[subject])
	            return objectTree(subject, stats, true).concat(['.']); // Anonymous bnode subject
	        return [ termToN3(subject, stats) ].concat([propertyTree(subject, stats)]).concat(['.']);
	    }
	
	
	    // The property tree for a single subject or anonymous node
	    function propertyTree(subject, stats) {
	        // print('Proprty tree for '+subject);
	        var results = []
	        var lastPred = null;
	        var sts = stats.subjects[this.toStr(subject)]; // relevant statements
	        if (typeof sts == 'undefined') {
	            throw('Cant find statements for '+subject);
	        }
	
	        var SPO = function(x, y) {
	            return $rdf.Util.heavyCompareSPO(x, y, this.store)
	        }
	        sts.sort(); // 2014-09-30
	//        sts.sort(SPO); // 2014-09-30
	        var objects = [];
	        for (var i=0; i<sts.length; i++) {
	            var st = sts[i];
	            if (st.predicate.uri == lastPred) {
	                objects.push(',');
	            } else {
	                if (lastPred) {
	                    results=results.concat([objects]).concat([';']);
	                    objects = [];
	                }
	                results.push(predMap[st.predicate.uri] ?
	                            predMap[st.predicate.uri] : termToN3(st.predicate, stats));
	            }
	            lastPred = st.predicate.uri;
	            objects.push(objectTree(st.object, stats));
	        }
	        results=results.concat([objects]);
	        return results;
	    }
	    propertyTree = propertyTree.bind(this);
	
	    function objectTree(obj, stats, force) {
	        if (obj.termType == 'bnode' &&
	                stats.subjects[this.toStr(obj)] && // and there are statements
	                (force || stats.rootsHash[obj.toNT()] == undefined)) // and not a root
	            return  ['['].concat(propertyTree(obj, stats)).concat([']']);
	        return termToN3(obj, stats);
	    }
	    objectTree = objectTree.bind(this);
	
	    function termToN3(expr, stats) {
	        switch(expr.termType) {
	
	            case 'formula':
	                var res = ['{'];
	                res = res.concat(statementListToTree(expr.statements));
	                return  res.concat(['}']);
	
	            case 'collection':
	                var res = ['('];
	                for (i=0; i<expr.elements.length; i++) {
	                    res.push(   [ objectTree(expr.elements[i], stats) ]);
	                }
	                res.push(')');
	                return res;
	
	           default:
	                return this.atomicTermToN3(expr);
	        }
	    }
	    __Serializer.prototype.termToN3 = termToN3;
	    termToN3 = termToN3.bind(this);
	
	    function prefixDirectives() {
	        var str = '';
	        if (this.defaultNamespace)
	          str += '@prefix : <'+this.defaultNamespace+'>.\n';
	        for (var ns in this.prefixes) {
	            if (!this.prefixes.hasOwnProperty(ns)) continue;
	            if (!this.namespacesUsed[ns]) continue;
	            str += '@prefix ' + this.prefixes[ns] + ': <' +
	                 $rdf.uri.refTo(this.base, ns) + '>.\n';
	        }
	        return str + '\n';
	    }
	    prefixDirectives = prefixDirectives.bind(this);
	
	    // Body of statementsToN3:
	
	    var tree = statementListToTree(sts);
	    return prefixDirectives() + treeToString(tree, -1);
	
	}
	
	
	////////////////////////////////////////////// Atomic Terms
	
	//  Deal with term level things and nesting with no bnode structure
	
	
	__Serializer.prototype.atomicTermToN3 = function atomicTermToN3(expr, stats) {
	    switch(expr.termType) {
	        case 'bnode':
	        case 'variable':  return expr.toNT();
	        case 'literal':
	            if (expr.datatype) {
	                switch (expr.datatype.uri) {
	                case 'http://www.w3.org/2001/XMLSchema#integer':
	                    return expr.value.toString();
	
	                //case 'http://www.w3.org/2001/XMLSchema#double': // Must force use of 'e'
	
	                case 'http://www.w3.org/2001/XMLSchema#boolean':
	                    return expr.value? 'true' : 'false';
	                }
	            }
	            var str = this.stringToN3(expr.value);
	            if (expr.lang){
	                str+= '@' + expr.lang;
	            } else if (expr.datatype) {
	                str+= '^^' + this.termToN3(expr.datatype, stats);
	            }
	            return str;
	        case 'symbol':
	            return this.symbolToN3(expr);
	       default:
	            throw "Internal: atomicTermToN3 cannot handle "+expr+" of termType+"+expr.termType
	            return ''+expr;
	    }
	};
	
	    //  stringToN3:  String escaping for N3
	
	__Serializer.prototype.validPrefix = new RegExp(/^[a-zA-Z][a-zA-Z0-9]*$/);
	
	__Serializer.prototype.forbidden1 = new RegExp(/[\\"\b\f\r\v\t\n\u0080-\uffff]/gm);
	__Serializer.prototype.forbidden3 = new RegExp(/[\\"\b\f\r\v\u0080-\uffff]/gm);
	__Serializer.prototype.stringToN3 = function stringToN3(str, flags) {
	    if (!flags) flags = "e";
	    var res = '', i=0, j=0;
	    var delim;
	    var forbidden;
	    if (str.length > 20 // Long enough to make sense
	            && str.slice(-1) != '"'  // corner case'
	            && flags.indexOf('n') <0  // Force single line
	            && (str.indexOf('\n') >0 || str.indexOf('"') > 0)) {
	        delim = '"""';
	        forbidden =  __Serializer.prototype.forbidden3;
	    } else {
	        delim = '"';
	        forbidden = __Serializer.prototype.forbidden1;
	    }
	    for(i=0; i<str.length;) {
	        forbidden.lastIndex = 0;
	        var m = forbidden.exec(str.slice(i));
	        if (m == null) break;
	        j = i + forbidden.lastIndex -1;
	        res += str.slice(i,j);
	        var ch = str[j];
	        if (ch=='"' && delim == '"""' &&  str.slice(j,j+3) != '"""') {
	            res += ch;
	
	
	
	        } else {
	
	            var k = '\b\f\r\t\v\n\\"'.indexOf(ch); // No escaping of bell (7)?
	            if (k >= 0) {
	                res += "\\" + 'bfrtvn\\"'[k];
	            } else  {
	                if (flags.indexOf('e')>=0) {
	                    res += '\\u' + ('000'+
	                     ch.charCodeAt(0).toString(16).toLowerCase()).slice(-4)
	                } else { // no 'e' flag
	                    res += ch;
	
	                }
	            }
	        }
	        i = j+1;
	    }
	    return delim + res + str.slice(i) + delim
	}
	
	
	
	//  A single symbol, either in  <> or namespace notation
	
	
	__Serializer.prototype.symbolToN3 = function symbolToN3(x) {  // c.f. symbolString() in notation3.py
	    var uri = x.uri;
	    var j = uri.indexOf('#');
	    if (j<0 && this.flags.indexOf('/') < 0) {
	        j = uri.lastIndexOf('/');
	    }
	    if (j >= 0 && this.flags.indexOf('p') < 0 &&
	        // Can split at namespace but only if http[s]: URI or file: or ws[s] (why not others?)
	        (uri.indexOf('http') === 0 || uri.indexOf('ws') === 0 || uri.indexOf('file') === 0))  {
	        var canSplit = true;
	        for (var k=j+1; k<uri.length; k++) {
	            if (__Serializer.prototype._notNameChars.indexOf(uri[k]) >=0) {
	                canSplit = false; break;
	            }
	        }
	
	        if (uri.slice(0, j+1) == this.base + '#') { // base-relative
	            return '<#' + uri.slice(j+1) + '>';
	        }
	        if (canSplit) {
	            var localid = uri.slice(j+1);
	            var namesp = uri.slice(0,j+1);
	            if (this.defaultNamespace && this.defaultNamespace == namesp
	                && this.flags.indexOf('d') < 0) {// d -> suppress default
	                if (this.flags.indexOf('k') >= 0 &&
	                    this.keyords.indexOf(localid) <0)
	                    return localid;
	                return ':' + localid;
	            }
	            this.checkIntegrity(); //  @@@ Remove when not testing
	            var prefix = this.prefixes[namesp];
	            if (!prefix) prefix = this.makeUpPrefix(namesp);
	            if (prefix) {
	                this.namespacesUsed[namesp] = true;
	                return prefix + ':' + localid;
	            }
	            // Fall though if can't do qname
	        }
	    }
	    if (this.flags.indexOf('r') < 0 && this.base)
	        uri = $rdf.uri.refTo(this.base, uri);
	    else if (this.flags.indexOf('u') >= 0)
	        uri = backslashUify(uri);
	    else uri = hexify(uri);
	    return '<'+uri+'>';
	}
	
	
	// String escaping utilities
	
	
	function hexify(str) { // also used in parser
	  return encodeURI(str);
	}
	
	
	function backslashUify(str) {
	    var res = '', k;
	    for (var i=0; i<str.length; i++) {
	        k = str.charCodeAt(i);
	        if (k>65535)
	            res += '\\U' + ('00000000'+k.toString(16)).slice(-8); // convert to upper?
	        else if (k>126)
	            res += '\\u' + ('0000'+k.toString(16)).slice(-4);
	        else
	            res += str[i];
	    }
	    return res;
	}
	
	
	///////////////////////////// Quad store serialization
	
	
	// @para. write  - a function taking a single string to be output
	//
	__Serializer.prototype.writeStore = function(write) {
	
	    var kb = this.store;
	    var fetcher = kb.fetcher;
	    var session = fetcher && fetcher.appNode;
	
	    // The core data
	
	    var sources = this.store.index[3];
	    for (s in sources) {  // -> assume we can use -> as short for log:semantics
	        var source = kb.fromNT(s);
	        if (session && source.sameTerm(session)) continue;
	        write('\n'+ this.atomicTermToN3(source)+' ' +
	                this.atomicTermToN3(kb.sym('http://www.w3.org/2000/10/swap/log#semantics'))
	                 + ' { '+ this.statementsToN3(kb.statementsMatching(
	                            undefined, undefined, undefined, source)) + ' }.\n');
	    }
	
	
	    // The metadata from HTTP interactions:
	
	    kb.statementsMatching(undefined,
	            kb.sym('http://www.w3.org/2007/ont/link#requestedURI')).map(
	                function(st){
	                    write('\n<' + st.object.value + '> log:metadata {\n');
	                    var sts = kb.statementsMatching(undefined, undefined, undefined,  st.subject);
	                    write(this.statementsToN3(this.statementsToN3(sts)));
	                    write('}.\n');
	                });
	
	    // Inferences we have made ourselves not attributable to anyone else
	
	    if (session) metaSources.push(session);
	    var metadata = [];
	    metaSources.map(function(source){
	        metadata = metadata.concat(kb.statementsMatching(undefined, undefined, undefined, source));
	    });
	    write(this.statementsToN3(metadata));
	
	}
	
	
	
	
	
	//////////////////////////////////////////////// XML serialization
	
	__Serializer.prototype.statementsToXML = function(sts) {
	    var indent = 4;
	    var width = 80;
	
	    var namespaceCounts = []; // which have been used
	    namespaceCounts['http://www.w3.org/1999/02/22-rdf-syntax-ns#'] = true;
	
	    var liPrefix = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#_';	//prefix for ordered list items
	
	    ////////////////////////// Arrange the bits of XML text
	
	    var spaces=function(n) {
	        var s='';
	        for(var i=0; i<n; i++) s+=' ';
	        return s
	    }
	
	    var XMLtreeToLine = function(tree) {
	        var str = '';
	        for (var i=0; i<tree.length; i++) {
	            var branch = tree[i];
	            var s2 = (typeof branch == 'string') ? branch : XMLtreeToLine(branch);
	            str += s2;
	        }
	        return str;
	    }
	
	    // Convert a nested tree of lists and strings to a string
	    var XMLtreeToString = function(tree, level) {
	        var str = '';
	        var lastLength = 100000;
	        if (!level) level = 0;
	        for (var i=0; i<tree.length; i++) {
	            var branch = tree[i];
	            if (typeof branch != 'string') {
	                var substr = XMLtreeToString(branch, level +1);
	                if (
	                    substr.length < 10*(width-indent*level)
	                    && substr.indexOf('"""') < 0) {// Don't mess up multiline strings
	                    var line = XMLtreeToLine(branch);
	                    if (line.length < (width-indent*level)) {
	                        branch = '   '+line; //   @@ Hack: treat as string below
	                        substr = ''
	                    }
	                }
	                if (substr) lastLength = 10000;
	                str += substr;
	            }
	            if (typeof branch == 'string') {
	                if (lastLength < (indent*level+4)) { // continue
	                    str = str.slice(0,-1) + ' ' + branch + '\n';
	                    lastLength += branch.length + 1;
	                } else {
	                    var line = spaces(indent*level) +branch;
	                    str += line +'\n';
	                    lastLength = line.length;
	                }
	
	            } else { // not string
	            }
	        }
	        return str;
	    };
	
	    function statementListToXMLTree(statements) {
	        this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
	        var stats = this.rootSubjects(statements);
	        var roots = stats.roots;
	        var results = []
	        for (var i=0; i<roots.length; i++) {
	            root = roots[i];
	            results.push(subjectXMLTree(root, stats))
	        }
	        return results;
	    }
	    statementListToXMLTree = statementListToXMLTree.bind(this);
	
	    function escapeForXML(str) {
	        if (typeof str == 'undefined') return '@@@undefined@@@@';
	        return str.replace(/[&<"]/g, function(m) {
	          switch(m[0]) {
	            case '&':
	              return '&amp;';
	            case '<':
	              return '&lt;';
	            case '"':
	              return '&quot;'; //'
	          }
	        });
	    }
	
	    function relURI(term) {
	        return escapeForXML((this.base) ? $rdf.Util.uri.refTo(this.base, term.uri) : term.uri);
	    }
	    relURI = relURI.bind(this);
	
	    // The tree for a subject
	    function subjectXMLTree(subject, stats) {
	      var results = [];
	      var type, t, st, pred;
	      var sts = stats.subjects[this.toStr(subject)]; // relevant statements
	      if (typeof sts == 'undefined') {
	        throw('Serializing XML - Cant find statements for '+subject);
	      }
	
	
	      // Sort only on the predicate, leave the order at object
	      // level undisturbed.  This leaves multilingual content in
	      // the order of entry (for partner literals), which helps
	      // readability.
	      //
	      // For the predicate sort, we attempt to split the uri
	      // as a hint to the sequence
	      sts.sort(function(a,b) {
	        var ap = a.predicate.uri;
	        var bp = b.predicate.uri;
	        if(ap.substring(0,liPrefix.length) == liPrefix || bp.substring(0,liPrefix.length) == liPrefix) {	//we're only interested in sorting list items
	          return ap.localeCompare(bp);
	        }
	
	        var as = ap.substring(liPrefix.length);
	        var bs = bp.substring(liPrefix.length);
	        var an = parseInt(as);
	        var bn = parseInt(bs);
	        if(isNaN(an) || isNaN(bn) ||
	            an != as || bn != bs) {	//we only care about integers
	          return ap.localeCompare(bp);
	        }
	
	        return an - bn;
	      });
	
	
	      for (var i=0; i<sts.length; i++) {
	        st = sts[i];
	        // look for a type
	        if(st.predicate.uri == 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' && !type && st.object.termType == "symbol") {
	          type = st.object;
	          continue;	//don't include it as a child element
	        }
	
	        // see whether predicate can be replaced with "li"
	        pred = st.predicate;
	        if(pred.uri.substr(0, liPrefix.length) == liPrefix) {
	          var number = pred.uri.substr(liPrefix.length);
	          // make sure these are actually numeric list items
	          var intNumber = parseInt(number);
	          if(number == intNumber.toString()) {
	            // was numeric; don't need to worry about ordering since we've already
	            // sorted the statements
	            pred = new $rdf.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#li');
	          }
	        }
	
	        t = qname(pred);
	        switch (st.object.termType) {
	          case 'bnode':
	            if(stats.incoming[st.object].length == 1) {	//there should always be something in the incoming array for a bnode
	              results = results.concat(['<'+ t +'>',
	                subjectXMLTree(st.object, stats),
	                '</'+ t +'>']);
	            } else {
	              results = results.concat(['<'+ t +' rdf:nodeID="'
	                +st.object.toNT().slice(2)+'"/>']);
	            }
	          break;
	          case 'symbol':
	            results = results.concat(['<'+ t +' rdf:resource="'
	              + relURI(st.object)+'"/>']);
	          break;
	          case 'literal':
	            results = results.concat(['<'+ t
	              + (st.object.datatype ? ' rdf:datatype="'+escapeForXML(st.object.datatype.uri)+'"' : '')
	              + (st.object.lang ? ' xml:lang="'+st.object.lang+'"' : '')
	              + '>' + escapeForXML(st.object.value)
	              + '</'+ t +'>']);
	          break;
	          case 'collection':
	            results = results.concat(['<'+ t +' rdf:parseType="Collection">',
	              collectionXMLTree(st.object, stats),
	              '</'+ t +'>']);
	          break;
	          default:
	            throw "Can't serialize object of type "+st.object.termType +" into XML";
	        } // switch
	      }
	
	      var tag = type ? qname(type) : 'rdf:Description';
	
	      var attrs = '';
	      if (subject.termType == 'bnode') {
	          if(!stats.incoming[subject] || stats.incoming[subject].length != 1) { // not an anonymous bnode
	              attrs = ' rdf:nodeID="'+subject.toNT().slice(2)+'"';
	          }
	      } else {
	          attrs = ' rdf:about="'+ relURI(subject)+'"';
	      }
	
	      return [ '<' + tag + attrs + '>' ].concat([results]).concat(["</"+ tag +">"]);
	    }
	
	    subjectXMLTree = subjectXMLTree.bind(this);
	
	    function collectionXMLTree(subject, stats) {
	        var res = []
	        for (var i=0; i< subject.elements.length; i++) {
	            res.push(subjectXMLTree(subject.elements[i], stats));
	         }
	         return res;
	    }
	
	    // The property tree for a single subject or anonymos node
	    function propertyXMLTree(subject, stats) {
	        var results = []
	        var sts = stats.subjects[this.toStr(subject)]; // relevant statements
	        if (sts == undefined) return results;  // No relevant statements
	        sts.sort();
	        for (var i=0; i<sts.length; i++) {
	            var st = sts[i];
	            switch (st.object.termType) {
	                case 'bnode':
	                    if(stats.rootsHash[st.object.toNT()]) { // This bnode has been done as a root -- no content here @@ what bout first time
	                        results = results.concat(['<'+qname(st.predicate)+' rdf:nodeID="'+st.object.toNT().slice(2)+'">',
	                        '</'+qname(st.predicate)+'>']);
	                    } else {
	                    results = results.concat(['<'+qname(st.predicate)+' rdf:parseType="Resource">',
	                        propertyXMLTree(st.object, stats),
	                        '</'+qname(st.predicate)+'>']);
	                    }
	                    break;
	                case 'symbol':
	                    results = results.concat(['<'+qname(st.predicate)+' rdf:resource="'
	                            + relURI(st.object)+'"/>']);
	                    break;
	                case 'literal':
	                    results = results.concat(['<'+qname(st.predicate)
	                        + (st.object.datatype ? ' rdf:datatype="'+escapeForXML(st.object.datatype.uri)+'"' : '')
	                        + (st.object.lang ? ' xml:lang="'+st.object.lang+'"' : '')
	                        + '>' + escapeForXML(st.object.value)
	                        + '</'+qname(st.predicate)+'>']);
	                    break;
	                case 'collection':
	                    results = results.concat(['<'+qname(st.predicate)+' rdf:parseType="Collection">',
	                        collectionXMLTree(st.object, stats),
	                        '</'+qname(st.predicate)+'>']);
	                    break;
	                default:
	                    throw "Can't serialize object of type "+st.object.termType +" into XML";
	
	            } // switch
	        }
	        return results;
	    }
	    propertyXMLTree = propertyXMLTree.bind(this);
	
	    function qname(term) {
	        var uri = term.uri;
	
	        var j = uri.indexOf('#');
	        if (j<0 && this.flags.indexOf('/') < 0) {
	            j = uri.lastIndexOf('/');
	        }
	        if (j < 0) throw ("Cannot make qname out of <"+uri+">")
	
	        var canSplit = true;
	        for (var k=j+1; k<uri.length; k++) {
	            if (__Serializer.prototype._notNameChars.indexOf(uri[k]) >=0) {
	                throw ('Invalid character "'+uri[k] +'" cannot be in XML qname for URI: '+uri);
	            }
	        }
	        var localid = uri.slice(j+1);
	        var namesp = uri.slice(0,j+1);
	        if (this.defaultNamespace && this.defaultNamespace == namesp
	            && this.flags.indexOf('d') < 0) {// d -> suppress default
	            return localid;
	        }
	        var prefix = this.prefixes[namesp];
	        if (!prefix) prefix = this.makeUpPrefix(namesp);
	        namespaceCounts[namesp] = true;
	        return prefix + ':' + localid;
	//        throw ('No prefix for namespace "'+namesp +'" for XML qname for '+uri+', namespaces: '+sz.prefixes+' sz='+sz);
	    }
	    qname = qname.bind(this);
	
	    // Body of toXML:
	
	    var tree = statementListToXMLTree(sts);
	    var str = '<rdf:RDF';
	    if (this.defaultNamespace)
	      str += ' xmlns="'+escapeForXML(this.defaultNamespace)+'"';
	    for (var ns in namespaceCounts) {
	        if (!namespaceCounts.hasOwnProperty(ns)) continue;
	        str += '\n xmlns:' + this.prefixes[ns] + '="'+escapeForXML(ns)+'"';
	    }
	    str += '>';
	
	    var tree2 = [str, tree, '</rdf:RDF>'];  //@@ namespace declrations
	    return XMLtreeToString(tree2, -1);
	
	
	} // End @@ body
	
	var Serializer = function( store ) {return new __Serializer( store )};
	return Serializer;
	
	}();
	/*
	 * Updates-Via
	 */
	var $rdf
	var k
	var v
	var bind = function (fn, me) {
	  return function () {
	    return fn.apply(me, arguments)
	  }
	}
	var hasProp = {}.hasOwnProperty
	
	if (typeof $rdf === 'undefined' || $rdf === null) {
	  $rdf = {}
	}
	
	$rdf.UpdatesSocket = (function () {
	  function UpdatesSocket (parent, via1) {
	    var error
	    this.parent = parent
	    this.via = via1
	    this.subscribe = bind(this.subscribe, this)
	    this.onError = bind(this.onError, this)
	    this.onMessage = bind(this.onMessage, this)
	    this.onClose = bind(this.onClose, this)
	    this.onOpen = bind(this.onOpen, this)
	    this._subscribe = bind(this._subscribe, this)
	    this._send = bind(this._send, this)
	    this.connected = false
	    this.pending = {}
	    this.subscribed = {}
	    this.socket = {}
	    try {
	      this.socket = new WebSocket(via1)
	      this.socket.onopen = this.onOpen
	      this.socket.onclose = this.onClose
	      this.socket.onmessage = this.onMessage
	      this.socket.onerror = this.onError
	    } catch (error1) {
	      error = error1
	      this.onError(error)
	    }
	  }
	
	  UpdatesSocket.prototype._decode = function (q) {
	    var elt
	    var i
	    var k
	    var r
	    var ref
	    var ref1
	    var v
	    r = {}
	    ref = (function () {
	      var j, len, ref, results
	      ref = q.split('&')
	      results = []
	      for (j = 0, len = ref.length; j < len; j++) {
	        elt = ref[j]
	        results.push(elt.split('='))
	      }
	      return results
	    })()
	    for (i in ref) {
	      elt = ref[i]
	      ref1 = [decodeURIComponent(elt[0]), decodeURIComponent(elt[1])]
	      k = ref1[0]
	      v = ref1[1]
	      if (r[k] == null) {
	        r[k] = []
	      }
	      r[k].push(v)
	    }
	    return r
	  }
	
	  UpdatesSocket.prototype._send = function (method, uri, data) {
	    var base, message
	    message = [method, uri, data].join(' ')
	    return typeof (base = this.socket).send === 'function' ? base.send(message) : void 0
	  }
	
	  UpdatesSocket.prototype._subscribe = function (uri) {
	    this._send('sub', uri, '')
	    this.subscribed[uri] = true
	    return this.subscribed[uri]
	  }
	
	  UpdatesSocket.prototype.onOpen = function (e) {
	    var results, uri
	    this.connected = true
	    results = []
	    for (uri in this.pending) {
	      delete this.pending[uri]
	      results.push(this._subscribe(uri))
	    }
	    return results
	  }
	
	  UpdatesSocket.prototype.onClose = function (e) {
	    var uri
	    this.connected = false
	    for (uri in this.subscribed) {
	      this.pending[uri] = true
	    }
	    this.subscribed = {}
	    return this.subscribed
	  }
	
	  UpdatesSocket.prototype.onMessage = function (e) {
	    var base, message
	    message = e.data.split(' ')
	    if (message[0] === 'ping') {
	      return typeof (base = this.socket).send === 'function' ? base.send('pong ' + message.slice(1).join(' ')) : void 0
	    } else if (message[0] === 'pub') {
	      return this.parent.onUpdate(message[1], this._decode(message[2]))
	    }
	  }
	
	  UpdatesSocket.prototype.onError = function (e) {
	    throw new Error('onError' + e)
	  }
	
	  UpdatesSocket.prototype.subscribe = function (uri) {
	    if (this.connected) {
	      return this._subscribe(uri)
	    } else {
	      this.pending[uri] = true
	      return this.pending[uri]
	    }
	  }
	
	  return UpdatesSocket
	})()
	
	$rdf.UpdatesVia = (function () {
	  function UpdatesVia (fetcher) {
	    this.fetcher = fetcher
	    this.onUpdate = bind(this.onUpdate, this)
	    this.onHeaders = bind(this.onHeaders, this)
	    this.register = bind(this.register, this)
	    this.graph = {}
	    this.via = {}
	    this.fetcher.addCallback('headers', this.onHeaders)
	  }
	
	  UpdatesVia.prototype.register = function (via, uri) {
	    if (this.via[via] == null) {
	      this.via[via] = new $rdf.UpdatesSocket(this, via)
	    }
	    return this.via[via].subscribe(uri)
	  }
	
	  UpdatesVia.prototype.onHeaders = function (d) {
	    var etag, uri, via
	    if (d.headers == null) {
	      return true
	    }
	    if (typeof WebSocket === 'undefined' || WebSocket === null) {
	      return true
	    }
	    etag = d.headers['etag']
	    via = d.headers['updates-via']
	    uri = d.uri
	    if (etag && via) {
	      this.graph[uri] = {
	        etag: etag,
	        via: via
	      }
	      this.register(via, uri)
	    }
	    return true
	  }
	
	  UpdatesVia.prototype.onUpdate = function (uri, d) {
	    return this.fetcher.refresh($rdf.sym(uri))
	  }
	
	  return UpdatesVia
	})()
	
	if ((typeof module !== 'undefined' && module !== null ? module.exports : void 0) != null) {
	  for (k in $rdf) {
	    if (!hasProp.call($rdf, k)) continue
	    v = $rdf[k]
	    module.exports[k] = v
	  }
	}
	/**
	 *
	 * Project: rdflib.js, originally part of Tabulator project
	 *
	 * File: web.js
	 *
	 * Description: contains functions for requesting/fetching/retracting
	 *  This implements quite a lot of the web architecture.
	 * A fetcher is bound to a specific knowledge base graph, into which
	 * it loads stuff and into which it writes its metadata
	 * @@ The metadata should be optionally a separate graph
	 *
	 * - implements semantics of HTTP headers, Internet Content Types
	 * - selects parsers for rdf/xml, n3, rdfa, grddl
	 *
	 * Dependencies:
	 *
	 * needs: util.js uri.js term.js rdfparser.js rdfa.js n3parser.js
	 *      identity.js sparql.js jsonparser.js
	 *
	 * Independent of jQuery
	 */
	
	/**
	 * Things to test: callbacks on request, refresh, retract
	 *   loading from HTTP, HTTPS, FTP, FILE, others?
	 * To do:
	 * Firing up a mail client for mid:  (message:) URLs
	 */
	
	var asyncLib = __webpack_require__(236) // @@ Goal: remove this dependency
	var jsonld = __webpack_require__(239)
	var N3 = __webpack_require__(245)  // @@ Goal: remove this dependency
	
	$rdf.Fetcher = function (store, timeout, async) {
	  this.store = store
	  this.thisURI = 'http://dig.csail.mit.edu/2005/ajar/ajaw/rdf/sources.js' + '#SourceFetcher' // -- Kenny
	  this.timeout = timeout || 30000
	  this.async = async != null ? async : true
	  this.appNode = this.store.bnode() // Denoting this session
	  this.store.fetcher = this // Bi-linked
	  this.requested = {}
	  // this.requested[uri] states:
	  //   undefined     no record of web access or records reset
	  //   true          has been requested, XHR in progress
	  //   'done'        received, Ok
	  //   403           HTTP status unauthorized
	  //   404           Ressource does not exist. Can be created etc.
	  //   'redirected'  In attempt to counter CORS problems retried.
	  //   other strings mean various other erros, such as parse errros.
	  //
	  this.redirectedTo = {} // Wehn 'redireced'
	  this.fetchCallbacks = {} // fetchCallbacks[uri].push(callback)
	
	  this.nonexistant = {} // keep track of explict 404s -> we can overwrite etc
	  this.lookedUp = {}
	  this.handlers = []
	  this.mediatypes = { }
	  var sf = this
	  var kb = this.store
	  var ns = {} // Convenience namespaces needed in this module:
	  // These are delibertely not exported as the user application should
	  // make its own list and not rely on the prefixes used here,
	  // and not be tempted to add to them, and them clash with those of another
	  // application.
	  ns.link = $rdf.Namespace('http://www.w3.org/2007/ont/link#')
	  ns.http = $rdf.Namespace('http://www.w3.org/2007/ont/http#')
	  ns.httph = $rdf.Namespace('http://www.w3.org/2007/ont/httph#')
	  ns.rdf = $rdf.Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
	  ns.rdfs = $rdf.Namespace('http://www.w3.org/2000/01/rdf-schema#')
	  ns.dc = $rdf.Namespace('http://purl.org/dc/elements/1.1/')
	
	  sf.mediatypes['image/*'] = {
	    'q': 0.9
	  }
	
	  $rdf.Fetcher.crossSiteProxy = function (uri) {
	    if ($rdf.Fetcher.crossSiteProxyTemplate) {
	      return $rdf.Fetcher.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri))
	    } else {
	      return undefined
	    }
	  }
	
	  $rdf.Fetcher.RDFXMLHandler = function (args) {
	    if (args) {
	      this.dom = args[0]
	    }
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        // sf.addStatus(xhr.req, 'parsing soon as RDF/XML...')
	        var kb = sf.store
	        if (!this.dom) this.dom = $rdf.Util.parseXML(xhr.responseText)
	        var root = this.dom.documentElement
	        if (root.nodeName === 'parsererror') { // @@ Mozilla only See issue/issue110
	          sf.failFetch(xhr, 'Badly formed XML in ' + xhr.resource.uri) // have to fail the request
	          throw new Error('Badly formed XML in ' + xhr.resource.uri) // @@ Add details
	        }
	        var parser = new $rdf.RDFParser(kb)
	        try {
	          parser.parse(this.dom, xhr.original.uri, xhr.original)
	        } catch (e) {
	          sf.addStatus(xhr.req, 'Syntax error parsing RDF/XML! ' + e)
	          console.log('Syntax error parsing RDF/XML! ' + e)
	        }
	        if (!xhr.options.noMeta) {
	          kb.add(xhr.original, ns.rdf('type'), ns.link('RDFDocument'), sf.appNode)
	        }
	        cb()
	      }
	    }
	  }
	  $rdf.Fetcher.RDFXMLHandler.toString = function () {
	    return 'RDFXMLHandler'
	  }
	  $rdf.Fetcher.RDFXMLHandler.register = function (sf) {
	    sf.mediatypes['application/rdf+xml'] = {}
	  }
	  $rdf.Fetcher.RDFXMLHandler.pattern = new RegExp('application/rdf\\+xml')
	
	  // This would much better use on-board XSLT engine. @@
	  /*  deprocated 2016-02-17  timbl
	  $rdf.Fetcher.doGRDDL = function(kb, doc, xslturi, xmluri) {
	      sf.requestURI('http://www.w3.org/2005/08/' + 'online_xslt/xslt?' + 'xslfile=' + escape(xslturi) + '&xmlfile=' + escape(xmluri), doc)
	  }
	*/
	  $rdf.Fetcher.XHTMLHandler = function (args) {
	    if (args) {
	      this.dom = args[0]
	    }
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        var relation, reverse
	        if (!this.dom) {
	          this.dom = $rdf.Util.parseXML(xhr.responseText)
	        }
	        var kb = sf.store
	
	        // dc:title
	        var title = this.dom.getElementsByTagName('title')
	        if (title.length > 0) {
	          kb.add(xhr.resource, ns.dc('title'), kb.literal(title[0].textContent), xhr.resource)
	        // $rdf.log.info("Inferring title of " + xhr.resource)
	        }
	
	        // link rel
	        var links = this.dom.getElementsByTagName('link')
	        for (var x = links.length - 1; x >= 0; x--) { // @@ rev
	          relation = links[x].getAttribute('rel')
	          reverse = false
	          if (!relation) {
	            relation = links[x].getAttribute('rev')
	            reverse = true
	          }
	          if (relation) {
	            sf.linkData(xhr, relation,
	              links[x].getAttribute('href'), xhr.resource, reverse)
	          }
	        }
	
	        // Data Islands
	
	        var scripts = this.dom.getElementsByTagName('script')
	        for (var i = 0; i < scripts.length; i++) {
	          var contentType = scripts[i].getAttribute('type')
	          if ($rdf.parsable[contentType]) {
	            $rdf.parse(scripts[i].textContent, kb, xhr.original.uri, contentType)
	          }
	        }
	
	        if (!xhr.options.noMeta) {
	          kb.add(xhr.resource, ns.rdf('type'), ns.link('WebPage'), sf.appNode)
	        }
	
	        if (!xhr.options.noRDFa && $rdf.parseRDFaDOM) { // enable by default
	          try {
	            $rdf.parseRDFaDOM(this.dom, kb, xhr.original.uri)
	          } catch (e) {
	            var msg = ('Error trying to parse ' + xhr.resource + ' as RDFa:\n' + e + ':\n' + e.stack)
	            // dump(msg+"\n")
	            sf.failFetch(xhr, msg)
	            return
	          }
	        }
	        cb() // Fire done callbacks
	      }
	    }
	  }
	  $rdf.Fetcher.XHTMLHandler.toString = function () {
	    return 'XHTMLHandler'
	  }
	  $rdf.Fetcher.XHTMLHandler.register = function (sf) {
	    sf.mediatypes['application/xhtml+xml'] = {}
	  }
	  $rdf.Fetcher.XHTMLHandler.pattern = new RegExp('application/xhtml')
	
	  $rdf.Fetcher.XMLHandler = function () {
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        var dom = $rdf.Util.parseXML(xhr.responseText)
	
	        // XML Semantics defined by root element namespace
	        // figure out the root element
	        for (var c = 0; c < dom.childNodes.length; c++) {
	          // is this node an element?
	          if (dom.childNodes[c].nodeType === 1) {
	            // We've found the first element, it's the root
	            var ns = dom.childNodes[c].namespaceURI
	
	            // Is it RDF/XML?
	            if (ns && ns === ns['rdf']) {
	              sf.addStatus(xhr.req, 'Has XML root element in the RDF namespace, so assume RDF/XML.')
	              sf.switchHandler('RDFXMLHandler', xhr, cb, [dom])
	              return
	            }
	            // it isn't RDF/XML or we can't tell
	            // Are there any GRDDL transforms for this namespace?
	            // @@ assumes ns documents have already been loaded
	            /*
	            var xforms = kb.each(kb.sym(ns), kb.sym("http://www.w3.org/2003/g/data-view#namespaceTransformation"))
	            for (var i = 0; i < xforms.length; i++) {
	                var xform = xforms[i]
	                // $rdf.log.info(xhr.resource.uri + " namespace " + ns + " has GRDDL ns transform" + xform.uri)
	                 $rdf.Fetcher.doGRDDL(kb, xhr.resource, xform.uri, xhr.resource.uri)
	            }
	            */
	            break
	          }
	        }
	
	        // Or it could be XHTML?
	        // Maybe it has an XHTML DOCTYPE?
	        if (dom.doctype) {
	          // $rdf.log.info("We found a DOCTYPE in " + xhr.resource)
	          if (dom.doctype.name === 'html' && dom.doctype.publicId.match(/^-\/\/W3C\/\/DTD XHTML/) && dom.doctype.systemId.match(/http:\/\/www.w3.org\/TR\/xhtml/)) {
	            sf.addStatus(xhr.req, 'Has XHTML DOCTYPE. Switching to XHTML Handler.\n')
	            sf.switchHandler('XHTMLHandler', xhr, cb)
	            return
	          }
	        }
	
	        // Or what about an XHTML namespace?
	        var html = dom.getElementsByTagName('html')[0]
	        if (html) {
	          var xmlns = html.getAttribute('xmlns')
	          if (xmlns && xmlns.match(/^http:\/\/www.w3.org\/1999\/xhtml/)) {
	            sf.addStatus(xhr.req, 'Has a default namespace for ' + 'XHTML. Switching to XHTMLHandler.\n')
	            sf.switchHandler('XHTMLHandler', xhr, cb)
	            return
	          }
	        }
	
	        // At this point we should check the namespace document (cache it!) and
	        // look for a GRDDL transform
	        // @@  Get namespace document <n>, parse it, look for  <n> grddl:namespaceTransform ?y
	        // Apply ?y to   dom
	        // We give up. What dialect is this?
	        sf.failFetch(xhr, 'Unsupported dialect of XML: not RDF or XHTML namespace, etc.\n' + xhr.responseText.slice(0, 80))
	      }
	    }
	  }
	
	  $rdf.Fetcher.XMLHandler.toString = function () {
	    return 'XMLHandler'
	  }
	  $rdf.Fetcher.XMLHandler.register = function (sf) {
	    sf.mediatypes['text/xml'] = {
	      'q': 0.2
	    }
	    sf.mediatypes['application/xml'] = {
	      'q': 0.2
	    }
	  }
	  $rdf.Fetcher.XMLHandler.pattern = new RegExp('(text|application)/(.*)xml')
	
	  $rdf.Fetcher.HTMLHandler = function () {
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        var rt = xhr.responseText
	        // We only handle XHTML so we have to figure out if this is XML
	        // $rdf.log.info("Sniffing HTML " + xhr.resource + " for XHTML.")
	
	        if (rt.match(/\s*<\?xml\s+version\s*=[^<>]+\?>/)) {
	          sf.addStatus(xhr.req, "Has an XML declaration. We'll assume " +
	            "it's XHTML as the content-type was text/html.\n")
	          sf.switchHandler('XHTMLHandler', xhr, cb)
	          return
	        }
	
	        // DOCTYPE
	        // There is probably a smarter way to do this
	        if (rt.match(/.*<!DOCTYPE\s+html[^<]+-\/\/W3C\/\/DTD XHTML[^<]+http:\/\/www.w3.org\/TR\/xhtml[^<]+>/)) {
	          sf.addStatus(xhr.req, 'Has XHTML DOCTYPE. Switching to XHTMLHandler.\n')
	          sf.switchHandler('XHTMLHandler', xhr, cb)
	          return
	        }
	
	        // xmlns
	        if (rt.match(/[^(<html)]*<html\s+[^<]*xmlns=['"]http:\/\/www.w3.org\/1999\/xhtml["'][^<]*>/)) {
	          sf.addStatus(xhr.req, 'Has default namespace for XHTML, so switching to XHTMLHandler.\n')
	          sf.switchHandler('XHTMLHandler', xhr, cb)
	          return
	        }
	
	        // dc:title	                       //no need to escape '/' here
	        var titleMatch = (new RegExp('<title>([\\s\\S]+?)</title>', 'im')).exec(rt)
	        if (titleMatch) {
	          var kb = sf.store
	          kb.add(
	            xhr.resource,
	            ns.dc('title'),
	            kb.literal(titleMatch[1]),
	            xhr.resource
	          ) // think about xml:lang later
	          kb.add(xhr.resource, ns.rdf('type'), ns.link('WebPage'), sf.appNode)
	          cb() // doneFetch, not failed
	          return
	        }
	        sf.addStatus(xhr.req, 'non-XML HTML document, not parsed for data.')
	        sf.doneFetch(xhr)
	        // sf.failFetch(xhr, "Sorry, can't yet parse non-XML HTML")
	      }
	    }
	  }
	
	  $rdf.Fetcher.HTMLHandler.toString = function () {
	    return 'HTMLHandler'
	  }
	  $rdf.Fetcher.HTMLHandler.register = function (sf) {
	    sf.mediatypes['text/html'] = {
	      'q': 0.3
	    }
	  }
	  $rdf.Fetcher.HTMLHandler.pattern = new RegExp('text/html')
	
	  $rdf.Fetcher.TextHandler = function () {
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        // We only speak dialects of XML right now. Is this XML?
	        var rt = xhr.responseText
	
	        // Look for an XML declaration
	        if (rt.match(/\s*<\?xml\s+version\s*=[^<>]+\?>/)) {
	          sf.addStatus(xhr.req, 'Warning: ' + xhr.resource + " has an XML declaration. We'll assume " +
	            "it's XML but its content-type wasn't XML.\n")
	          sf.switchHandler('XMLHandler', xhr, cb)
	          return
	        }
	
	        // Look for an XML declaration
	        if (rt.slice(0, 500).match(/xmlns:/)) {
	          sf.addStatus(xhr.req, "May have an XML namespace. We'll assume " +
	            "it's XML but its content-type wasn't XML.\n")
	          sf.switchHandler('XMLHandler', xhr, cb)
	          return
	        }
	
	        // We give up finding semantics - this is not an error, just no data
	        sf.addStatus(xhr.req, 'Plain text document, no known RDF semantics.')
	        sf.doneFetch(xhr)
	        //                sf.failFetch(xhr, "unparseable - text/plain not visibly XML")
	        //                dump(xhr.resource + " unparseable - text/plain not visibly XML, starts:\n" + rt.slice(0, 500)+"\n")
	      }
	    }
	  }
	
	  $rdf.Fetcher.TextHandler.toString = function () {
	    return 'TextHandler'
	  }
	  $rdf.Fetcher.TextHandler.register = function (sf) {
	    sf.mediatypes['text/plain'] = {
	      'q': 0.1
	    }
	  }
	  $rdf.Fetcher.TextHandler.pattern = new RegExp('text/plain')
	
	  $rdf.Fetcher.N3Handler = function () {
	    this.handlerFactory = function (xhr) {
	      xhr.handle = function (cb) {
	        // Parse the text of this non-XML file
	
	        // console.log('web.js: Parsing as N3 ' + xhr.resource.uri + ' base: ' + xhr.original.uri) // @@@@ comment me out
	        // sf.addStatus(xhr.req, "N3 not parsed yet...")
	        var p = $rdf.N3Parser(kb, kb, xhr.original.uri, xhr.original.uri, null, null, '', null)
	        //                p.loadBuf(xhr.responseText)
	        try {
	          p.loadBuf(xhr.responseText)
	        } catch (e) {
	          var msg = ('Error trying to parse ' + xhr.resource + ' as Notation3:\n' + e + ':\n' + e.stack)
	          // dump(msg+"\n")
	          sf.failFetch(xhr, msg)
	          return
	        }
	
	        sf.addStatus(xhr.req, 'N3 parsed: ' + p.statementCount + ' triples in ' + p.lines + ' lines.')
	        sf.store.add(xhr.original, ns.rdf('type'), ns.link('RDFDocument'), sf.appNode)
	        // var args = [xhr.original.uri] // Other args needed ever?
	        sf.doneFetch(xhr)
	      }
	    }
	  }
	
	  $rdf.Fetcher.N3Handler.toString = function () {
	    return 'N3Handler'
	  }
	  $rdf.Fetcher.N3Handler.register = function (sf) {
	    sf.mediatypes['text/n3'] = {
	      'q': '1.0'
	    } // as per 2008 spec
	    sf.mediatypes['application/x-turtle'] = {
	      'q': 1.0
	    } // pre 2008
	    sf.mediatypes['text/turtle'] = {
	      'q': 1.0
	    } // pre 2008
	  }
	  $rdf.Fetcher.N3Handler.pattern = new RegExp('(application|text)/(x-)?(rdf\\+)?(n3|turtle)')
	
	  $rdf.Util.callbackify(this, ['request', 'recv', 'headers', 'load', 'fail', 'refresh', 'retract', 'done'])
	
	  this.addHandler = function (handler) {
	    sf.handlers.push(handler)
	    handler.register(sf)
	  }
	
	  this.switchHandler = function (name, xhr, cb, args) {
	    var Handler = null
	    for (var i = 0; i < this.handlers.length; i++) {
	      if ('' + this.handlers[i] === name) {
	        Handler = this.handlers[i]
	      }
	    }
	    if (!Handler) {
	      throw new Error('web.js: switchHandler: name=' + name + ' , this.handlers =' + this.handlers + '\n' +
	      'switchHandler: switching to ' + Handler + '; sf=' + sf +
	      '; typeof $rdf.Fetcher=' + typeof $rdf.Fetcher +
	      ';\n\t $rdf.Fetcher.HTMLHandler=' + $rdf.Fetcher.HTMLHandler + '\n' +
	      '\n\tsf.handlers=' + sf.handlers + '\n')
	    }
	    (new Handler(args)).handlerFactory(xhr)
	    xhr.handle(cb)
	  }
	
	  this.addStatus = function (req, status) {
	    // <Debug about="parsePerformance">
	    var now = new Date()
	    status = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '.' + now.getMilliseconds() + '] ' + status
	    // </Debug>
	    var kb = this.store
	    var s = kb.the(req, ns.link('status'))
	    if (s && s.append) {
	      s.append(kb.literal(status))
	    } else {
	      $rdf.log.warn('web.js: No list to add to: ' + s + ',' + status) // @@@
	    }
	  }
	
	  // Record errors in the system on failure
	  // Returns xhr so can just do return this.failfetch(...)
	  this.failFetch = function (xhr, status) {
	    this.addStatus(xhr.req, status)
	    if (!xhr.options.noMeta) {
	      kb.add(xhr.original, ns.link('error'), status)
	    }
	    if (!xhr.resource.sameTerm(xhr.original)) {
	      console.log('@@ Recording failure original ' + xhr.original + '( as ' + xhr.resource + ') : ' + xhr.status)
	    } else {
	      console.log('@@ Recording failure for ' + xhr.original + ': ' + xhr.status)
	    }
	    this.requested[$rdf.uri.docpart(xhr.original.uri)] = xhr.status // changed 2015 was false
	    while (this.fetchCallbacks[xhr.original.uri] && this.fetchCallbacks[xhr.original.uri].length) {
	      this.fetchCallbacks[xhr.original.uri].shift()(false, 'Fetch of <' + xhr.original.uri + '> failed: ' + status, xhr)
	    }
	    delete this.fetchCallbacks[xhr.original.uri]
	    this.fireCallbacks('fail', [xhr.original.uri, status])
	    xhr.abort()
	    return xhr
	  }
	
	  // in the why part of the quad distinguish between HTML and HTTP header
	  // Reverse is set iif the link was rev= as opposed to rel=
	  this.linkData = function (xhr, rel, uri, why, reverse) {
	    if (!uri) return
	    var predicate
	    // See http://www.w3.org/TR/powder-dr/#httplink for describedby 2008-12-10
	    var obj = kb.sym($rdf.uri.join(uri, xhr.original.uri))
	    if (rel === 'alternate' || rel === 'seeAlso' || rel === 'meta' || rel === 'describedby') {
	      if (obj.uri === xhr.original.uri) return
	      predicate = ns.rdfs('seeAlso')
	    } else if (rel === 'type') {
	      predicate = $rdf.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type')
	    } else {
	      // See https://www.iana.org/assignments/link-relations/link-relations.xml
	      // Alas not yet in RDF yet for each predicate
	      predicate = kb.sym($rdf.uri.join(rel, 'http://www.iana.org/assignments/link-relations/'))
	    }
	    if (reverse) {
	      kb.add(obj, predicate, xhr.original, why)
	    } else {
	      kb.add(xhr.original, predicate, obj, why)
	    }
	  }
	
	  this.parseLinkHeader = function (xhr, thisReq) {
	    var link
	    try {
	      link = xhr.getResponseHeader('link') // May crash from CORS error
	    } catch (e) {}
	    if (link) {
	      var linkexp = /<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g
	      var paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g
	
	      var matches = link.match(linkexp)
	      for (var i = 0; i < matches.length; i++) {
	        var split = matches[i].split('>')
	        var href = split[0].substring(1)
	        var ps = split[1]
	        var s = ps.match(paramexp)
	        for (var j = 0; j < s.length; j++) {
	          var p = s[j]
	          var paramsplit = p.split('=')
	          // var name = paramsplit[0]
	          var rel = paramsplit[1].replace(/["']/g, '') // '"
	          this.linkData(xhr, rel, href, thisReq)
	        }
	      }
	    }
	  }
	
	  this.doneFetch = function (xhr) {
	    this.addStatus(xhr.req, 'Done.')
	    this.requested[xhr.original.uri] = 'done' // Kenny
	    while (this.fetchCallbacks[xhr.original.uri] && this.fetchCallbacks[xhr.original.uri].length) {
	      this.fetchCallbacks[xhr.original.uri].shift()(true, undefined, xhr)
	    }
	    delete this.fetchCallbacks[xhr.original.uri]
	    this.fireCallbacks('done', [xhr.original.uri])
	  }
	  var handlerList = [
	    $rdf.Fetcher.RDFXMLHandler, $rdf.Fetcher.XHTMLHandler,
	    $rdf.Fetcher.XMLHandler, $rdf.Fetcher.HTMLHandler,
	    $rdf.Fetcher.TextHandler, $rdf.Fetcher.N3Handler
	  ]
	  handlerList.map(this.addHandler)
	
	  /** Note two nodes are now smushed
	   **
	   ** If only one was flagged as looked up, then
	   ** the new node is looked up again, which
	   ** will make sure all the URIs are dereferenced
	   */
	  this.nowKnownAs = function (was, now) {
	    if (this.lookedUp[was.uri]) {
	      if (!this.lookedUp[now.uri]) this.lookUpThing(now, was) //  @@@@  Transfer userCallback
	    } else if (this.lookedUp[now.uri]) {
	      if (!this.lookedUp[was.uri]) this.lookUpThing(was, now)
	    }
	  }
	
	  // Returns promise of XHR
	  //
	  this.webOperation = function (method, uri, options) {
	    uri = uri.uri || uri; options = options || {}
	    var fetcher = this
	    return new Promise(function (resolve, reject) {
	      var xhr = $rdf.Util.XMLHTTPFactory()
	      xhr.options = options
	      xhr.original = $rdf.sym(uri)
	      if (!options.noMeta && typeof tabulator !== 'undefined') {
	        fetcher.saveRequestMetadata(xhr, fetcher.store, uri)
	      }
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState === 4) { // NOte a 404 can be not afailure
	          var ok = (!xhr.status || (xhr.status >= 200 && xhr.status < 300))
	          if (!options.noMeta && typeof tabulator !== 'undefined') {
	            fetcher.saveResponseMetadata(xhr, fetcher.store)
	          }
	          if (ok) {
	            resolve(xhr)
	          } else {
	            reject(xhr.status + ' ' + xhr.statusText)
	          }
	        }
	      }
	      xhr.open(method, uri, true)
	      if (options.contentType) {
	        xhr.setRequestHeader('Content-type', options.contentType)
	      }
	      xhr.send(options.data ? options.data : undefined)
	    })
	  }
	
	  this.webCopy = function (here, there, content_type) {
	    var fetcher = this
	    here = here.uri || here
	    return new Promise(function (resolve, reject) {
	      fetcher.webOperation('GET', here)
	        .then(function (xhr) {
	          fetcher.webOperation('PUT', // @@@ change to binary from text
	            there, { data: xhr.responseText, contentType: content_type })
	              .then(function (xhr) {
	                resolve(xhr)
	              })
	              .catch(function (e) {
	                reject(e)
	              })
	        })
	        .catch(function (e) {
	          reject(e)
	        })
	    })
	  }
	
	  // Looks up something.
	  //
	  // Looks up all the URIs a things has.
	  //
	  // Parameters:
	  //
	  //  term:       canonical term for the thing whose URI is to be dereferenced
	  //  rterm:      the resource which refered to this (for tracking bad links)
	  //  options:    (old: force paraemter) or dictionary of options:
	  //      force:      Load the data even if loaded before
	  //  oneDone:   is called as callback(ok, errorbody, xhr) for each one
	  //  allDone:   is called as callback(ok, errorbody) for all of them
	  // Returns      the number of URIs fetched
	  //
	  this.lookUpThing = function (term, rterm, options, oneDone, allDone) {
	    var uris = kb.uris(term) // Get all URIs
	    var success = true
	    var errors = ''
	    var outstanding = {}
	    var force
	    if (options === false || options === true) { // Old signature
	      force = options
	      options = { force: force }
	    } else {
	      if (options === undefined) options = {}
	      force = !!options.force
	    }
	
	    if (typeof uris !== 'undefined') {
	      for (var i = 0; i < uris.length; i++) {
	        var u = uris[i]
	        outstanding[u] = true
	        this.lookedUp[u] = true
	        var sf = this
	
	        var requestOne = function requestOne (u1) {
	          sf.requestURI($rdf.uri.docpart(u1), rterm, options,
	            function (ok, body, xhr) {
	              if (ok) {
	                if (oneDone) oneDone(true, u1)
	              } else {
	                if (oneDone) oneDone(false, body)
	                success = false
	                errors += body + '\n'
	              }
	              delete outstanding[u]
	              if (Object.keys(outstanding).length > 0) {
	                return
	              }
	              if (allDone) {
	                allDone(success, errors)
	              }
	            }
	          )
	        }
	        requestOne(u)
	      }
	    }
	    return uris.length
	  }
	
	  /* Promise-based load function
	  **
	  ** NamedNode -> Promise of xhr
	  ** uri string -> Promise of xhr
	  ** Array of the above -> Promise of array of xhr
	  **
	  ** @@ todo: If p1 is array then sequence or parallel fetch of all
	  */
	  this.load = function (uri, options) {
	    var fetcher = this
	    if (uri instanceof Array) {
	      var ps = uri.map(function (x) {
	        return fetcher.load(x)
	      })
	      return Promise.all(ps)
	    }
	    uri = uri.uri || uri // NamedNode or URI string
	    return new Promise(function (resolve, reject) {
	      fetcher.nowOrWhenFetched(uri, options, function (ok, message, xhr) {
	        if (ok) {
	          resolve(xhr)
	        } else {
	          reject(message)
	        }
	      })
	    })
	  }
	
	  /*  Ask for a doc to be loaded if necessary then call back
	  **
	  ** Changed 2013-08-20:  Added (ok, errormessage) params to callback
	  **
	  ** Calling methods:
	  **   nowOrWhenFetched (uri, userCallback)
	  **   nowOrWhenFetched (uri, options, userCallback)
	  **   nowOrWhenFetched (uri, referringTerm, userCallback, options)  <-- old
	  **   nowOrWhenFetched (uri, referringTerm, userCallback) <-- old
	  **
	  **  Options include:
	  **   referringTerm    The docuemnt in which this link was found.
	  **                    this is valuable when finding the source of bad URIs
	  **   force            boolean.  Never mind whether you have tried before,
	  **                    load this from scratch.
	  **   forceContentType Override the incoming header to force the data to be
	  **                    treaed as this content-type.
	  **/
	  this.nowOrWhenFetched = function (uri, p2, userCallback, options) {
	    uri = uri.uri || uri // allow symbol object or string to be passed
	    if (typeof p2 === 'function') {
	      options = {}
	      userCallback = p2
	    } else if (typeof p2 === 'undefined') { // original calling signature
	      // referingTerm = undefined
	    } else if (p2 instanceof $rdf.NamedNode) {
	      // referingTerm = p2
	      options = {referingTerm: p2}
	    } else {
	      options = p2
	    }
	
	    this.requestURI(uri, p2, options || {}, userCallback)
	  }
	
	  this.get = this.nowOrWhenFetched
	
	  // Look up response header
	  //
	  // Returns: a list of header values found in a stored HTTP response
	  //      or [] if response was found but no header found
	  //      or undefined if no response is available.
	  //
	  this.getHeader = function (doc, header) {
	    var kb = this.store
	    var requests = kb.each(undefined, ns.link('requestedURI'), doc.uri)
	    for (var r = 0; r < requests.length; r++) {
	      var request = requests[r]
	      if (request !== undefined) {
	        var response = kb.any(request, ns.link('response'))
	        if (request !== undefined) {
	          var results = kb.each(response, ns.httph(header.toLowerCase()))
	          if (results.length) {
	            return results.map(function (v) {
	              return v.value
	            })
	          }
	          return []
	        }
	      }
	    }
	    return undefined
	  }
	
	  this.proxyIfNecessary = function (uri) {
	    if (typeof tabulator !== 'undefined' && tabulator.isExtension) return uri // Extenstion does not need proxy
	    // browser does 2014 on as https browser script not trusted
	    // If the web app origin is https: then the mixed content rules
	    // prevent it loading insecure http: stuff so we need proxy.
	    if ($rdf.Fetcher.crossSiteProxyTemplate &&
	        (typeof document !== 'undefined') &&
	        document.location &&
	        ('' + document.location).slice(0, 6) === 'https:' && // origin is secure
	        uri.slice(0, 5) === 'http:') { // requested data is not
	      return $rdf.Fetcher.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri))
	    }
	    return uri
	  }
	
	  this.saveRequestMetadata = function (xhr, kb, docuri) {
	    var request = kb.bnode()
	    xhr.resource = $rdf.sym(docuri)
	
	    xhr.req = request
	    if (!xhr.options.noMeta) { // Store no triples but do mind the bnode for req
	      var now = new Date()
	      var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] '
	      kb.add(request, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + docuri), this.appNode)
	      kb.add(request, ns.link('requestedURI'), kb.literal(docuri), this.appNode)
	      if (xhr.original && xhr.original.uri !== docuri) {
	        kb.add(request, ns.link('orginalURI'), kb.literal(xhr.original.uri), this.appNode)
	      }
	      kb.add(request, ns.link('status'), kb.collection(), this.appNode)
	    }
	    return request
	  }
	
	  this.saveResponseMetadata = function (xhr, kb) {
	    var response = kb.bnode()
	
	    if (xhr.req) kb.add(xhr.req, ns.link('response'), response)
	    kb.add(response, ns.http('status'), kb.literal(xhr.status), response)
	    kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response)
	
	    xhr.headers = {}
	    if ($rdf.uri.protocol(xhr.resource.uri) === 'http' || $rdf.uri.protocol(xhr.resource.uri) === 'https') {
	      xhr.headers = $rdf.Util.getHTTPHeaders(xhr)
	      for (var h in xhr.headers) { // trim below for Safari - adds a CR!
	        kb.add(response, ns.httph(h.toLowerCase()), xhr.headers[h].trim(), response)
	      }
	    }
	    return response
	  }
	
	  /** Requests a document URI and arranges to load the document.
	   ** Parameters:
	   **	    term:  term for the thing whose URI is to be dereferenced
	   **      rterm:  the resource which refered to this (for tracking bad links)
	   **      options:
	   **              force:  Load the data even if loaded before
	   **              withCredentials:   flag for XHR/CORS etc
	   **      userCallback:  Called with (true) or (false, errorbody, {status: 400}) after load is done or failed
	   ** Return value:
	   **	    The xhr object for the HTTP access
	   **      null if the protocol is not a look-up protocol,
	   **              or URI has already been loaded
	   */
	  this.requestURI = function (docuri, rterm, options, userCallback) { // sources_request_new
	
	    // Various calling conventions
	    docuri = docuri.uri || docuri // NamedNode or string
	    docuri = docuri.split('#')[0]
	    if (typeof options === 'boolean') {
	      options = { 'force': options } // Ols dignature
	    }
	    if (typeof options === 'undefined') options = {}
	
	    var force = !!options.force
	    var kb = this.store
	    var args = arguments
	    var baseURI = options.baseURI || docuri  // Preseve though proxying etc
	    options.userCallback = userCallback
	
	    var pcol = $rdf.uri.protocol(docuri)
	    if (pcol === 'tel' || pcol === 'mailto' || pcol === 'urn') {
	      // "No look-up operation on these, but they are not errors?"
	      console.log('Unsupported protocol in: ' + docuri)
	      return userCallback(false, 'Unsupported protocol', { 'status': 900 }) ||
	        undefined
	    }
	    var docterm = kb.sym(docuri)
	
	    var sta = this.getState(docuri)
	    if (!force) {
	      if (sta === 'fetched') {
	        return userCallback ? userCallback(true) : undefined
	      }
	      if (sta === 'failed') {
	        return userCallback
	          ? userCallback(false, 'Previously failed. ' + this.requested[docuri],
	              {'status': this.requested[docuri]})
	          : undefined // An xhr standin
	      }
	    // if (sta === 'requested') return userCallback? userCallback(false, "Sorry already requested - pending already.", {'status': 999 }) : undefined
	    } else {
	      delete this.nonexistant[docuri]
	    }
	    // @@ Should allow concurrent requests
	
	    // If it is 'failed', then shoulkd we try again?  I think so so an old error doens't get stuck
	    // if (sta === 'unrequested')
	
	    this.fireCallbacks('request', args) // Kenny: fire 'request' callbacks here
	    // dump( "web.js: Requesting uri: " + docuri + "\n" )
	
	    if (userCallback) {
	      if (!this.fetchCallbacks[docuri]) {
	        this.fetchCallbacks[docuri] = [ userCallback ]
	      } else {
	        this.fetchCallbacks[docuri].push(userCallback)
	      }
	    }
	
	    if (this.requested[docuri] === true) {
	      return // Don't ask again - wait for existing call
	    } else {
	      this.requested[docuri] = true
	    }
	
	    if (!options.noMeta && rterm && rterm.uri) {
	      kb.add(docterm.uri, ns.link('requestedBy'), rterm.uri, this.appNode)
	    }
	
	    var xhr = $rdf.Util.XMLHTTPFactory()
	    var req = xhr.req = kb.bnode()
	    xhr.original = $rdf.sym(baseURI)
	    // console.log('XHR original: ' + xhr.original)
	    xhr.options = options
	    xhr.resource = docterm  // This might be proxified
	    var sf = this
	
	    var now = new Date()
	    var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] '
	    if (!options.noMeta) {
	      kb.add(req, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + docuri), this.appNode)
	      kb.add(req, ns.link('requestedURI'), kb.literal(docuri), this.appNode)
	      kb.add(req, ns.link('status'), kb.collection(), this.appNode)
	    }
	
	    var checkCredentialsRetry = function () {
	      if (!xhr.withCredentials) return false // not dealt with
	
	      if (xhr.retriedWithCredentials) {
	        return true
	      }
	      xhr.retriedWithCredentials = true // protect against called twice
	      console.log('web: Retrying with no credentials for ' + xhr.resource)
	      xhr.abort()
	      delete sf.requested[docuri] // forget the original request happened
	      var newopt = {}
	      for (var opt in options) { // transfer baseURI etc
	        if (options.hasOwnProperty(opt)) {
	          newopt[opt] = options[opt]
	        }
	      }
	      newopt.withCredentials = false
	      sf.addStatus(xhr.req, 'Abort: Will retry with credentials SUPPRESSED to see if that helps')
	      sf.requestURI(docuri, rterm, newopt, xhr.userCallback) // userCallback already registered (with where?)
	      return true
	    }
	
	    var onerrorFactory = function (xhr) {
	      return function (event) {
	        xhr.onErrorWasCalled = true // debugging and may need it
	        if (typeof document !== 'undefined') { // Mashup situation, not node etc
	          if ($rdf.Fetcher.crossSiteProxyTemplate && document.location && !xhr.proxyUsed) {
	            var hostpart = $rdf.uri.hostpart
	            var here = '' + document.location
	            var uri = xhr.resource.uri
	            if (hostpart(here) && hostpart(uri) && hostpart(here) !== hostpart(uri)) { // If cross-site
	              if (xhr.status === 401 || xhr.status === 403 || xhr.status === 404) {
	                onreadystatechangeFactory(xhr)()
	              } else {
	                // IT IS A PAIN THAT NO PROPER ERROR REPORTING
	                if (checkCredentialsRetry(xhr)) { // If credentials flag set, retry without,
	                  return
	                }
	                // If it wasn't, or we already tried that
	                var newURI = $rdf.Fetcher.crossSiteProxy(uri)
	                console.log('web: Direct failed so trying proxy ' + newURI)
	                sf.addStatus(xhr.req, 'BLOCKED -> Cross-site Proxy to <' + newURI + '>')
	                if (xhr.aborted) return
	
	                var kb = sf.store
	                var oldreq = xhr.req
	                if (!xhr.options.noMeta) {
	                  kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), oldreq)
	                }
	                xhr.abort()
	                xhr.aborted = true
	
	                sf.addStatus(oldreq, 'redirected to new request') // why
	                // the callback throws an exception when called from xhr.onerror (so removed)
	                // sf.fireCallbacks('done', args) // Are these args right? @@@   Not done yet! done means success
	                sf.requested[xhr.resource.uri] = 'redirected'
	                sf.redirectedTo[xhr.resource.uri] = newURI
	
	                if (sf.fetchCallbacks[xhr.resource.uri]) {
	                  if (!sf.fetchCallbacks[newURI]) {
	                    sf.fetchCallbacks[newURI] = []
	                  }
	                  sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri])
	                  delete sf.fetchCallbacks[xhr.resource.uri]
	                }
	
	                var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback)
	                if (xhr2) {
	                  xhr2.proxyUsed = true // only try the proxy once
	                  xhr2.original = xhr.original
	                  console.log('Proxying but original still ' + xhr2.original)
	                }
	                if (xhr2 && xhr2.req) {
	                  if (!xhr.options.noMeta) {
	                    kb.add(xhr.req,
	                      kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'),
	                      xhr2.req,
	                      sf.appNode)
	                  }
	                  return
	                }
	              }
	            }
	
	            xhr.status = 999 //
	          }
	        } // mashu
	      } // function of event
	    } // onerrorFactory
	
	    // Set up callbacks
	    var onreadystatechangeFactory = function (xhr) {
	      return function () {
	        var handleResponse = function () {
	          if (xhr.handleResponseDone) return
	          xhr.handleResponseDone = true
	          var handler = null
	          var thisReq = xhr.req // Might have changes by redirect
	          sf.fireCallbacks('recv', args)
	          var kb = sf.store
	          sf.saveResponseMetadata(xhr, kb)
	          sf.fireCallbacks('headers', [{uri: docuri, headers: xhr.headers}])
	
	          // Check for masked errors.
	          // For "security reasons" theboraser hides errors such as CORS errors from
	          // the calling code (2015). oneror() used to be called but is not now.
	          //
	          if (xhr.status === 0) {
	            console.log('Masked error - status 0 for ' + xhr.resource.uri)
	            if (checkCredentialsRetry(xhr)) { // retry is could be credentials flag CORS issue
	              return
	            }
	            xhr.status = 900 // unknown masked error
	            return
	          }
	          if (xhr.status >= 400) { // For extra dignostics, keep the reply
	            //  @@@ 401 should cause  a retry with credential son
	            // @@@ cache the credentials flag by host ????
	            if (xhr.status === 404) {
	              kb.fetcher.nonexistant[xhr.resource.uri] = true
	            }
	            if (xhr.responseText.length > 10) {
	              var response2 = kb.bnode()
	              kb.add(response2, ns.http('content'), kb.literal(xhr.responseText), response2)
	              if (xhr.statusText) {
	                kb.add(response2, ns.http('statusText'), kb.literal(xhr.statusText), response2)
	              }
	            // dump("HTTP >= 400 responseText:\n"+xhr.responseText+"\n"); // @@@@
	            }
	            sf.failFetch(xhr, 'HTTP error for ' + xhr.resource + ': ' + xhr.status + ' ' + xhr.statusText)
	            return
	          }
	
	          var loc = xhr.headers['content-location']
	
	          // deduce some things from the HTTP transaction
	          var addType = function (cla) { // add type to all redirected resources too
	            var prev = thisReq
	            if (loc) {
	              var docURI = kb.any(prev, ns.link('requestedURI'))
	              if (docURI !== loc) {
	                kb.add(kb.sym(loc), ns.rdf('type'), cla, sf.appNode)
	              }
	            }
	            for (;;) {
	              var doc = kb.any(prev, ns.link('requestedURI'))
	              if (doc && doc.value) {
	                kb.add(kb.sym(doc.value), ns.rdf('type'), cla, sf.appNode)
	              } // convert Literal
	              prev = kb.any(undefined, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), prev)
	              if (!prev) break
	              var response = kb.any(prev, kb.sym('http://www.w3.org/2007/ont/link#response'))
	              if (!response) break
	              var redirection = kb.any(response, kb.sym('http://www.w3.org/2007/ont/http#status'))
	              if (!redirection) break
	              if (redirection !== '301' && redirection !== '302') break
	            }
	          }
	          // This is a minimal set to allow the use of damaged servers if necessary
	          var extensionToContentType = {
	            'rdf': 'application/rdf+xml', 'owl': 'application/rdf+xml',
	            'n3': 'text/n3', 'ttl': 'text/turtle', 'nt': 'text/n3', 'acl': 'text/n3',
	            'html': 'text/html',
	            'xml': 'text/xml'
	          }
	          var guess
	          if (xhr.status === 200) {
	            addType(ns.link('Document'))
	            var ct = xhr.headers['content-type']
	            if (options.forceContentType) {
	              xhr.headers['content-type'] = options.forceContentType
	            }
	            if (!ct || ct.indexOf('application/octet-stream') >= 0) {
	              guess = extensionToContentType[xhr.resource.uri.split('.').pop()]
	              if (guess) {
	                xhr.headers['content-type'] = guess
	              }
	            }
	            if (ct) {
	              if (ct.indexOf('image/') === 0 || ct.indexOf('application/pdf') === 0) addType(kb.sym('http://purl.org/dc/terms/Image'))
	            }
	            if (options.clearPreviousData) { // Before we parse new data clear old but only on 200
	              kb.removeDocument(xhr.resource)
	            }
	          }
	          // application/octet-stream; charset=utf-8
	
	          if ($rdf.uri.protocol(xhr.resource.uri) === 'file' || $rdf.uri.protocol(xhr.resource.uri) === 'chrome') {
	            if (options.forceContentType) {
	              xhr.headers['content-type'] = options.forceContentType
	            } else {
	              guess = extensionToContentType[xhr.resource.uri.split('.').pop()]
	              if (guess) {
	                xhr.headers['content-type'] = guess
	              } else {
	                xhr.headers['content-type'] = 'text/xml'
	              }
	            }
	          }
	
	          // If we have alread got the thing at this location, abort
	          if (loc) {
	            var udoc = $rdf.uri.join(xhr.resource.uri, loc)
	            if (!force && udoc !== xhr.resource.uri &&
	                sf.requested[udoc] && sf.requested[udoc] === 'done') { // we have already fetched this in fact.
	              // should we smush too?
	              // $rdf.log.info("HTTP headers indicate we have already" + " retrieved " + xhr.resource + " as " + udoc + ". Aborting.")
	              sf.doneFetch(xhr)
	              xhr.abort()
	              return
	            }
	            sf.requested[udoc] = true
	          }
	
	          for (var x = 0; x < sf.handlers.length; x++) {
	            if (xhr.headers['content-type'] && xhr.headers['content-type'].match(sf.handlers[x].pattern)) {
	              handler = new sf.handlers[x]()
	              break
	            }
	          }
	
	          sf.parseLinkHeader(xhr, thisReq)
	
	          if (handler) {
	            try {
	              handler.handlerFactory(xhr)
	            } catch (e) { // Try to avoid silent errors
	              sf.failFetch(xhr, 'Exception handling content-type ' + xhr.headers['content-type'] + ' was: ' + e)
	            }
	          } else {
	            sf.doneFetch(xhr) //  Not a problem, we just don't extract data.
	            /*
	            // sf.failFetch(xhr, "Unhandled content type: " + xhr.headers['content-type']+
	            //        ", readyState = "+xhr.readyState)
	            */
	            return
	          }
	        }
	
	        // DONE: 4
	        // HEADERS_RECEIVED: 2
	        // LOADING: 3
	        // OPENED: 1
	        // UNSENT: 0
	
	        // $rdf.log.debug("web.js: XHR " + xhr.resource.uri + ' readyState='+xhr.readyState); // @@@@ comment me out
	
	        switch (xhr.readyState) {
	          case 0:
	            var uri = xhr.resource.uri
	            var newURI
	            if (this.crossSiteProxyTemplate && (typeof document !== 'undefined') && document.location) { // In mashup situation
	              var hostpart = $rdf.uri.hostpart
	              var here = '' + document.location
	              if (hostpart(here) && hostpart(uri) && hostpart(here) !== hostpart(uri)) {
	                newURI = this.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri))
	                sf.addStatus(xhr.req, 'BLOCKED -> Cross-site Proxy to <' + newURI + '>')
	                if (xhr.aborted) return
	
	                var kb = sf.store
	                var oldreq = xhr.req
	                kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), oldreq)
	
	                // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate?
	                var newreq = xhr.req = kb.bnode() // Make NEW reqest for everything else
	                kb.add(oldreq, ns.http('redirectedRequest'), newreq, xhr.req)
	
	                var now = new Date()
	                var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] '
	                kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode)
	                kb.add(newreq, ns.link('status'), kb.collection(), this.appNode)
	                kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode)
	
	                var response = kb.bnode()
	                kb.add(oldreq, ns.link('response'), response)
	                // kb.add(response, ns.http('status'), kb.literal(xhr.status), response)
	                // if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response)
	
	                xhr.abort()
	                xhr.aborted = true
	                xhr.redirected = true
	
	                sf.addStatus(oldreq, 'redirected XHR') // why
	
	                if (sf.fetchCallbacks[xhr.resource.uri]) {
	                  if (!sf.fetchCallbacks[newURI]) {
	                    sf.fetchCallbacks[newURI] = []
	                  }
	                  sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri])
	                  delete sf.fetchCallbacks[xhr.resource.uri]
	                }
	
	                sf.fireCallbacks('redirected', args) // Are these args right? @@@
	                sf.requested[xhr.resource.uri] = 'redirected'
	
	                var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options || {}, xhr.userCallback)
	                if (xhr2 && xhr2.req) {
	                  kb.add(
	                    xhr.req,
	                    kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'),
	                    xhr2.req, sf.appNode
	                  )
	                  return
	                }
	              }
	            }
	            sf.failFetch(xhr, 'HTTP Blocked. (ReadyState 0) Cross-site violation for <' +
	              docuri + '>')
	
	            break
	
	          case 3:
	            // Intermediate state -- 3 may OR MAY NOT be called, selon browser.
	            // handleResponse();   // In general it you can't do it yet as the headers are in but not the data
	            break
	          case 4:
	            // Final state for this XHR but may be redirected
	            handleResponse()
	            // Now handle
	            if (xhr.handle && xhr.responseText !== undefined) { // can be validly zero length
	              if (sf.requested[xhr.resource.uri] === 'redirected') {
	                break
	              }
	              sf.fireCallbacks('load', args)
	              xhr.handle(function () {
	                sf.doneFetch(xhr)
	              })
	            } else {
	              if (xhr.redirected) {
	                sf.addStatus(xhr.req, 'Aborted and redirected to new request.')
	              } else {
	                sf.addStatus(xhr.req, 'Fetch over. No data handled. Aborted = ' + xhr.aborted)
	              }
	            // sf.failFetch(xhr, "HTTP failed unusually. (no handler set) (x-site violation? no net?) for <"+
	            //    docuri+">")
	            }
	            break
	        } // switch
	      }
	    }
	
	    // Map the URI to a localhost proxy if we are running on localhost
	    // This is used for working offline, e.g. on planes.
	    // Is the script istelf is running in localhost, then access all data in a localhost mirror.
	    // Do not remove without checking with TimBL
	    var uri2 = docuri
	    if (typeof tabulator !== 'undefined' && tabulator.preferences.get('offlineModeUsingLocalhost')) {
	      if (uri2.slice(0, 7) === 'http://' && uri2.slice(7, 17) !== 'localhost/') {
	        uri2 = 'http://localhost/' + uri2.slice(7)
	        $rdf.log.warn('Localhost kludge for offline use: actually getting <' + uri2 + '>')
	      } else {
	        // $rdf.log.warn("Localhost kludge NOT USED <" + uri2 + ">")
	      }
	    } else {
	      // $rdf.log.warn("Localhost kludge OFF offline use: actually getting <" + uri2 + ">")
	    }
	    // 2014 probelm:
	    // XMLHttpRequest cannot load http://www.w3.org/People/Berners-Lee/card.
	    // A wildcard '*' cannot be used in the 'Access-Control-Allow-Origin' header when the credentials flag is true.
	    // @ Many ontology files under http: and need CORS wildcard -> can't have withCredentials
	
	    var withCredentials = (uri2.slice(0, 6) === 'https:') // @@ Kludge -- need for webid which typically is served from https
	    if (options.withCredentials !== undefined) {
	      withCredentials = options.withCredentials
	    }
	    var actualProxyURI = this.proxyIfNecessary(uri2)
	
	    // Setup the request
	    // var xhr
	    // xhr = $rdf.Util.XMLHTTPFactory()
	    xhr.onerror = onerrorFactory(xhr)
	    xhr.onreadystatechange = onreadystatechangeFactory(xhr)
	    xhr.timeout = sf.timeout
	    xhr.withCredentials = withCredentials
	    xhr.actualProxyURI = actualProxyURI
	
	    xhr.req = req
	    xhr.options = options
	    xhr.options = options
	    xhr.resource = docterm
	    xhr.requestedURI = uri2
	
	    xhr.ontimeout = function () {
	      sf.failFetch(xhr, 'requestTimeout')
	    }
	    try {
	      xhr.open('GET', actualProxyURI, this.async)
	    } catch (er) {
	      return this.failFetch(xhr, 'XHR open for GET failed for <' + uri2 + '>:\n\t' + er)
	    }
	    if (force) { // must happen after open
	      xhr.setRequestHeader('Cache-control', 'no-cache')
	    }
	
	    // Set redirect callback and request headers -- alas Firefox Extension Only
	    if (typeof tabulator !== 'undefined' &&
	        tabulator.isExtension && xhr.channel &&
	        ($rdf.uri.protocol(xhr.resource.uri) === 'http' ||
	        $rdf.uri.protocol(xhr.resource.uri) === 'https')) {
	      try {
	        xhr.channel.notificationCallbacks = {
	          getInterface: function (iid) {
	            if (iid.equals(Components.interfaces.nsIChannelEventSink)) {
	              return {
	                onChannelRedirect: function (oldC, newC, flags) {
	                  if (xhr.aborted) return
	                  var kb = sf.store
	                  var newURI = newC.URI.spec
	                  var oldreq = xhr.req
	                  if (!xhr.options.noMeta) {
	                    sf.addStatus(xhr.req, 'Redirected: ' + xhr.status + ' to <' + newURI + '>')
	                    kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), xhr.req)
	
	                    // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate code?
	                    var newreq = xhr.req = kb.bnode() // Make NEW reqest for everything else
	                    kb.add(oldreq, ns.http('redirectedRequest'), newreq, this.appNode)
	
	                    var now = new Date()
	                    var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] '
	                    kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode)
	                    kb.add(newreq, ns.link('status'), kb.collection(), this.appNode)
	                    kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode)
	                    // /////////////
	
	                    // // $rdf.log.info('@@ sources onChannelRedirect'+
	                    //               "Redirected: "+
	                    //               xhr.status + " to <" + newURI + ">"); //@@
	                    var response = kb.bnode()
	                    // kb.add(response, ns.http('location'), newURI, response); Not on this response
	                    kb.add(oldreq, ns.link('response'), response)
	                    kb.add(response, ns.http('status'), kb.literal(xhr.status), response)
	                    if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response)
	                  }
	                  if (xhr.status - 0 !== 303) kb.HTTPRedirects[xhr.resource.uri] = newURI // same document as
	                  if (xhr.status - 0 === 301 && rterm) { // 301 Moved
	                    var badDoc = $rdf.uri.docpart(rterm.uri)
	                    var msg = 'Warning: ' + xhr.resource + ' has moved to <' + newURI + '>.'
	                    if (rterm) {
	                      msg += ' Link in <' + badDoc + ' >should be changed'
	                      kb.add(badDoc, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg, sf.appNode)
	                    }
	                  // dump(msg+"\n")
	                  }
	                  xhr.abort()
	                  xhr.aborted = true
	
	                  if (sf.fetchCallbacks[xhr.resource.uri]) {
	                    if (!sf.fetchCallbacks[newURI]) {
	                      sf.fetchCallbacks[newURI] = []
	                    }
	                    sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri])
	                    delete sf.fetchCallbacks[xhr.resource.uri]
	                  }
	
	                  sf.addStatus(oldreq, 'redirected') // why
	                  sf.fireCallbacks('redirected', args) // Are these args right? @@@
	                  sf.requested[xhr.resource.uri] = 'redirected'
	                  sf.redirectedTo[xhr.resource.uri] = newURI
	
	                  var hash = newURI.indexOf('#')
	                  if (hash >= 0) {
	                    if (!xhr.options.noMeta) {
	                      kb.add(xhr.resource, kb.sym('http://www.w3.org/2007/ont/link#warning'),
	                      'Warning: ' + xhr.resource + ' HTTP redirects to' + newURI + ' which should not contain a "#" sign')
	                    }
	                    newURI = newURI.slice(0, hash)
	                  }
	                  var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback)
	                  if (xhr2 && xhr2.req && !options.noMeta) {
	                    kb.add(
	                      xhr.req,
	                      kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'),
	                      xhr2.req,
	                      sf.appNode
	                    )
	                  }
	                // else dump("No xhr.req available for redirect from "+xhr.resource+" to "+newURI+"\n")
	                },
	
	                // See https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIChannelEventSink
	                asyncOnChannelRedirect: function (oldC, newC, flags, callback) {
	                  if (xhr.aborted) return
	                  var kb = sf.store
	                  var newURI = newC.URI.spec
	                  var oldreq = xhr.req
	                  sf.addStatus(xhr.req, 'Redirected: ' + xhr.status + ' to <' + newURI + '>')
	                  kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), xhr.req)
	
	                  // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate?
	                  var newreq = xhr.req = kb.bnode() // Make NEW reqest for everything else
	                  // xhr.resource = docterm
	                  // xhr.requestedURI = args[0]
	
	                  // kb.add(kb.sym(newURI), ns.link("request"), req, this.appNode)
	                  kb.add(oldreq, ns.http('redirectedRequest'), newreq, xhr.req)
	
	                  var now = new Date()
	                  var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] '
	                  kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode)
	                  kb.add(newreq, ns.link('status'), kb.collection(), this.appNode)
	                  kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode)
	                  // /////////////
	
	                  // // $rdf.log.info('@@ sources onChannelRedirect'+
	                  //               "Redirected: "+
	                  //               xhr.status + " to <" + newURI + ">"); //@@
	                  var response = kb.bnode()
	                  // kb.add(response, ns.http('location'), newURI, response); Not on this response
	                  kb.add(oldreq, ns.link('response'), response)
	                  kb.add(response, ns.http('status'), kb.literal(xhr.status), response)
	                  if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response)
	
	                  if (xhr.status - 0 !== 303) kb.HTTPRedirects[xhr.resource.uri] = newURI // same document as
	                  if (xhr.status - 0 === 301 && rterm) { // 301 Moved
	                    var badDoc = $rdf.uri.docpart(rterm.uri)
	                    var msg = 'Warning: ' + xhr.resource + ' has moved to <' + newURI + '>.'
	                    if (rterm) {
	                      msg += ' Link in <' + badDoc + ' >should be changed'
	                      kb.add(badDoc, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg, sf.appNode)
	                    }
	                  // dump(msg+"\n")
	                  }
	                  xhr.abort()
	                  xhr.aborted = true
	
	                  var hash = newURI.indexOf('#')
	                  if (hash >= 0) {
	                    var msg2 = ('Warning: ' + xhr.resource + ' HTTP redirects to' + newURI + ' which do not normally contain a "#" sign')
	                    // dump(msg+"\n")
	                    kb.add(xhr.resource, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg2)
	                    newURI = newURI.slice(0, hash)
	                  }
	                  /*
	                  if (sf.fetchCallbacks[xhr.resource.uri]) {
	                    if (!sf.fetchCallbacks[newURI]) {
	                      sf.fetchCallbacks[newURI] = []
	                    }
	                    sf.fetchCallbacks[newURI] = sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri])
	                    delete sf.fetchCallbacks[xhr.resource.uri]
	                  }
	                  */
	                  sf.requested[xhr.resource.uri] = 'redirected'
	                  sf.redirectedTo[xhr.resource.uri] = newURI
	
	                  var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback)
	                  if (xhr2) { // may be no XHR is other URI already loaded
	                    xhr2.original = xhr.original  // use this for finding base
	                    if (xhr2.req) {
	                      kb.add(
	                        xhr.req,
	                        kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'),
	                        xhr2.req,
	                        sf.appNode
	                      )
	                    }
	                  }
	                // else dump("No xhr.req available for redirect from "+xhr.resource+" to "+newURI+"\n")
	                } // asyncOnChannelRedirect
	              }
	            }
	            return Components.results.NS_NOINTERFACE
	          }
	        }
	      } catch (err) {
	        return sf.failFetch(xhr,
	          "@@ Couldn't set callback for redirects: " + err)
	      } // try
	    } // if Firefox extension
	
	    try {
	      var acceptstring = ''
	      for (var type in this.mediatypes) {
	        // var attrstring = ''
	        if (acceptstring !== '') {
	          acceptstring += ', '
	        }
	        acceptstring += type
	        for (var attr in this.mediatypes[type]) {
	          acceptstring += ';' + attr + '=' + this.mediatypes[type][attr]
	        }
	      }
	      xhr.setRequestHeader('Accept', acceptstring)
	      this.addStatus(xhr.req, 'Accept: ' + acceptstring)
	
	    // if (requester) { xhr.setRequestHeader('Referer',requester) }
	    } catch (err) {
	      throw new Error("Can't set Accept header: " + err)
	    }
	
	    // Fire
	    try {
	      xhr.send(null)
	    } catch (er) {
	      return this.failFetch(xhr, 'XHR send failed:' + er)
	    }
	    setTimeout(function () {
	      if (xhr.readyState !== 4 && sf.isPending(xhr.resource.uri)) {
	        sf.failFetch(xhr, 'requestTimeout')
	      }
	    },
	      this.timeout)
	    this.addStatus(xhr.req, 'HTTP Request sent.')
	    return xhr
	  } // this.requestURI()
	
	  this.objectRefresh = function (term) {
	    var uris = kb.uris(term) // Get all URIs
	    if (typeof uris !== 'undefined') {
	      for (var i = 0; i < uris.length; i++) {
	        this.refresh(this.store.sym($rdf.uri.docpart(uris[i])))
	      // what about rterm?
	      }
	    }
	  }
	
	  // deprecated -- use IndexedFormula.removeDocument(doc)
	  this.unload = function (term) {
	    this.store.removeMany(undefined, undefined, undefined, term)
	    delete this.requested[term.uri] // So it can be loaded again
	  }
	
	  this.refresh = function (term, userCallback) { // sources_refresh
	    this.fireCallbacks('refresh', arguments)
	    this.requestURI(term.uri, undefined, { force: true, clearPreviousData: true }, userCallback)
	  }
	
	  this.retract = function (term) { // sources_retract
	    this.store.removeMany(undefined, undefined, undefined, term)
	    if (term.uri) {
	      delete this.requested[$rdf.uri.docpart(term.uri)]
	    }
	    this.fireCallbacks('retract', arguments)
	  }
	
	  this.getState = function (docuri) {
	    if (typeof this.requested[docuri] === 'undefined') {
	      return 'unrequested'
	    } else if (this.requested[docuri] === true) {
	      return 'requested'
	    } else if (this.requested[docuri] === 'done') {
	      return 'fetched'
	    } else if (this.requested[docuri] === 'redirected') {
	      return this.getState(this.redirectedTo[docuri])
	    } else { // An non-200 HTTP error status
	      return 'failed'
	    }
	  }
	
	  // doing anyStatementMatching is wasting time
	  this.isPending = function (docuri) { // sources_pending
	    // if it's not pending: false -> flailed 'done' -> done 'redirected' -> redirected
	    return this.requested[docuri] === true
	  }
	  // var updatesVia = new $rdf.UpdatesVia(this) // Subscribe to headers
	  // @@@@@@@@ This is turned off because it causes a websocket to be set up for ANY fetch
	  // whether we want to track it ot not. including ontologies loaed though the XSSproxy
	} // End of fetcher
	
	$rdf.fetcher = function (store, timeout, async) { return new $rdf.Fetcher(store, timeout, async) }
	
	// Parse a string and put the result into the graph kb
	// Normal method is sync.
	// Unfortunately jsdonld is currently written to need to be called async.
	// Hence the mess beolow with executeCallback.
	
	$rdf.parsable = {'text/n3': true, 'text/turtle': true, 'application/rdf+xml': true,
	'application/xhtml+xml': true, 'text/html': true, 'application/ld+json': true }
	
	$rdf.parse = function parse (str, kb, base, contentType, callback) {
	  try {
	    if (contentType === 'text/n3' || contentType === 'text/turtle') {
	      var p = $rdf.N3Parser(kb, kb, base, base, null, null, '', null)
	      p.loadBuf(str)
	      executeCallback()
	    } else if (contentType === 'application/rdf+xml') {
	      var parser = new $rdf.RDFParser(kb)
	      parser.parse($rdf.Util.parseXML(str), base, kb.sym(base))
	      executeCallback()
	    } else if (contentType === 'application/xhtml+xml') {
	      $rdf.parseRDFaDOM($rdf.Util.parseXML(str, {contentType: 'application/xhtml+xml'}), kb, base)
	      executeCallback()
	    } else if (contentType === 'text/html') {
	      $rdf.parseRDFaDOM($rdf.Util.parseXML(str, {contentType: 'text/html'}), kb, base)
	      executeCallback()
	    } else if (contentType === 'application/sparql-update') { // @@ we handle a subset
	      $rdf.sparqlUpdateParser(str, kb, base)
	      executeCallback()
	    } else if (contentType === 'application/ld+json' ||
	      contentType === 'application/nquads' ||
	      contentType === 'application/n-quads') {
	      var n3Parser = N3.Parser()
	      var N3Util = N3.Util
	      var triples = []
	
	      if (contentType === 'application/ld+json') {
	        var jsonDocument
	        try {
	          jsonDocument = JSON.parse(str)
	        } catch (parseErr) {
	          callback(parseErr, null)
	        }
	        jsonld.toRDF(jsonDocument,
	          {format: 'application/nquads'},
	          nquadCallback)
	      } else {
	        nquadCallback(null, str)
	      }
	    } else {
	      throw new Error("Don't know how to parse " + contentType + ' yet')
	    }
	  } catch (e) {
	    executeErrorCallback(e)
	  }
	
	  function executeCallback () {
	    if (callback) {
	      callback(null, kb)
	    } else {
	      return
	    }
	  }
	
	  function executeErrorCallback (e) {
	    if (contentType !== 'application/ld+json' ||
	      contentType !== 'application/nquads' ||
	      contentType !== 'application/n-quads') {
	      if (callback) {
	        callback(e, kb)
	      } else {
	        throw new Error('Error trying to parse <' + base + '> as ' +
	          contentType + ':\n' + e + ':\n' + e.stack)
	      }
	    }
	  }
	/*
	  function setJsonLdBase (doc, base) {
	    if (doc instanceof Array) {
	      return
	    }
	    if (!('@context' in doc)) {
	      doc['@context'] = {}
	    }
	    doc['@context']['@base'] = base
	  }
	*/
	  function nquadCallback (err, nquads) {
	    if (err) {
	      callback(err, kb)
	    }
	    try {
	      n3Parser.parse(nquads, tripleCallback)
	    } catch (err) {
	      callback(err, kb)
	    }
	  }
	
	  function tripleCallback (err, triple, prefixes) {
	    if (err) {
	      callback(err, kb)
	    }
	    if (triple) {
	      triples.push(triple)
	    } else {
	      for (var i = 0; i < triples.length; i++) {
	        addTriple(kb, triples[i])
	      }
	      callback(null, kb)
	    }
	  }
	
	  function addTriple (kb, triple) {
	    var subject = createTerm(triple.subject)
	    var predicate = createTerm(triple.predicate)
	    var object = createTerm(triple.object)
	    var why = null
	    if (triple.graph) {
	      why = createTerm(triple.graph)
	    }
	    kb.add(subject, predicate, object, why)
	  }
	
	  function createTerm (termString) {
	    var value
	    if (N3Util.isLiteral(termString)) {
	      value = N3Util.getLiteralValue(termString)
	      var language = N3Util.getLiteralLanguage(termString)
	      var datatype = new $rdf.NamedNode(N3Util.getLiteralType(termString))
	      return new $rdf.Literal(value, language, datatype)
	    } else if (N3Util.isIRI(termString)) {
	      return new $rdf.NamedNode(termString)
	    } else if (N3Util.isBlank(termString)) {
	      value = termString.substring(2, termString.length)
	      return new $rdf.BlankNode(value)
	    } else {
	      return null
	    }
	  }
	} // $rdf.parse()
	
	//   Serialize to the appropriate format
	//
	// Either
	//
	// @@ Currently NQuads and JSON/LD are deal with extrelemently inefficiently
	// through mutiple conversions.
	//
	$rdf.serialize = function (target, kb, base, contentType, callback) {
	  var documentString = null
	  try {
	    var sz = $rdf.Serializer(kb)
	    var newSts = kb.statementsMatching(undefined, undefined, undefined, target)
	    var n3String
	    sz.suggestNamespaces(kb.namespaces)
	    sz.setBase(base)
	    switch (contentType) {
	      case 'application/rdf+xml':
	        documentString = sz.statementsToXML(newSts)
	        return executeCallback(null, documentString)
	      case 'text/n3':
	      case 'application/n3': // Legacy
	        documentString = sz.statementsToN3(newSts)
	        return executeCallback(null, documentString)
	      case 'text/turtle':
	      case 'application/x-turtle': // Legacy
	        sz.setFlags('si') // Suppress = for sameAs and => for implies
	        documentString = sz.statementsToN3(newSts)
	        return executeCallback(null, documentString)
	      case 'application/ld+json':
	        n3String = sz.statementsToN3(newSts)
	        $rdf.convert.convertToJson(n3String, callback)
	        break
	      case 'application/n-quads':
	      case 'application/nquads': // @@@ just outpout the quads? Does not work for collections
	        n3String = sz.statementsToN3(newSts)
	        documentString = $rdf.convert.convertToNQuads(n3String, callback)
	        break
	      default:
	        throw new Error('Serialize: Content-type ' + contentType + ' not supported for data write.')
	    }
	  } catch (err) {
	    if (callback) {
	      return callback(err)
	    }
	    throw err // Don't hide problems from caller in sync mode
	  }
	
	  function executeCallback (err, result) {
	    if (callback) {
	      callback(err, result)
	      return
	    } else {
	      return result
	    }
	  }
	}
	
	// //////////////// JSON-LD code currently requires Node
	//
	//  Beware of bloat of the library! timbl
	//
	
	if (typeof $rdf.convert === 'undefined') $rdf.convert = {}
	
	$rdf.convert.convertToJson = function (n3String, jsonCallback) {
	  var jsonString
	  var n3Parser = N3.Parser()
	  var n3Writer = N3.Writer({
	    format: 'N-Quads'
	  })
	  asyncLib.waterfall([
	    function (callback) {
	      n3Parser.parse(n3String, callback)
	    },
	    function (triple, prefix, callback) {
	      if (triple !== null) {
	        n3Writer.addTriple(triple)
	      }
	      if (typeof callback === 'function') {
	        n3Writer.end(callback)
	      }
	    },
	    function (result, callback) {
	      try {
	        jsonld.fromRDF(result, {
	          format: 'application/nquads'
	        }, callback)
	      } catch (err) {
	        callback(err)
	      }
	    },
	    function (json, callback) {
	      jsonString = JSON.stringify(json)
	      jsonCallback(null, jsonString)
	    }
	  ], function (err, result) {
	    jsonCallback(err, jsonString)
	  }
	  )
	}
	
	$rdf.convert.convertToNQuads = function (n3String, nquadCallback) {
	  var nquadString
	  var n3Parser = N3.Parser()
	  var n3Writer = N3.Writer({
	    format: 'N-Quads'
	  })
	  asyncLib.waterfall([
	    function (callback) {
	      n3Parser.parse(n3String, callback)
	    },
	    function (triple, prefix, callback) {
	      if (triple !== null) {
	        n3Writer.addTriple(triple)
	      }
	      if (typeof callback === 'function') {
	        n3Writer.end(callback)
	      }
	    },
	    function (result, callback) {
	      nquadString = result
	      nquadCallback(null, nquadString)
	    }
	  ], function (err, result) {
	    nquadCallback(err, nquadString)
	  }
	  )
	}
	
	// ends
	// Handle node, amd, and global systems
	if (true) {
	  if (typeof module !== 'undefined' && module.exports) {
	    exports = module.exports = $rdf
	  }
	  exports.$rdf = $rdf
	} else {
	  if (typeof define === 'function' && define.amd) {
	    define([], function () {
	      return $rdf
	    })
	  }
	
	  // Leak a global regardless of module system
	  root['$rdf'] = $rdf
	}
	$rdf.buildTime = "2016-07-21T15:21:41";
	})(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module)))

/***/ },
/* 232 */
/***/ function(module, exports) {

	module.exports = XMLHttpRequest;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	function DOMParser(options){
		this.options = options ||{locator:{}};
		
	}
	DOMParser.prototype.parseFromString = function(source,mimeType){
		var options = this.options;
		var sax =  new XMLReader();
		var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
		var errorHandler = options.errorHandler;
		var locator = options.locator;
		var defaultNSMap = options.xmlns||{};
		var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"}
		if(locator){
			domBuilder.setDocumentLocator(locator)
		}
		
		sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
		sax.domBuilder = options.domBuilder || domBuilder;
		if(/\/x?html?$/.test(mimeType)){
			entityMap.nbsp = '\xa0';
			entityMap.copy = '\xa9';
			defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
		}
		defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
		if(source){
			sax.parse(source,defaultNSMap,entityMap);
		}else{
			sax.errorHandler.error("invalid doc source");
		}
		return domBuilder.doc;
	}
	function buildErrorHandler(errorImpl,domBuilder,locator){
		if(!errorImpl){
			if(domBuilder instanceof DOMHandler){
				return domBuilder;
			}
			errorImpl = domBuilder ;
		}
		var errorHandler = {}
		var isCallback = errorImpl instanceof Function;
		locator = locator||{}
		function build(key){
			var fn = errorImpl[key];
			if(!fn && isCallback){
				fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
			}
			errorHandler[key] = fn && function(msg){
				fn('[xmldom '+key+']\t'+msg+_locator(locator));
			}||function(){};
		}
		build('warning');
		build('error');
		build('fatalError');
		return errorHandler;
	}
	
	//console.log('#\n\n\n\n\n\n\n####')
	/**
	 * +ContentHandler+ErrorHandler
	 * +LexicalHandler+EntityResolver2
	 * -DeclHandler-DTDHandler 
	 * 
	 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
	 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
	 */
	function DOMHandler() {
	    this.cdata = false;
	}
	function position(locator,node){
		node.lineNumber = locator.lineNumber;
		node.columnNumber = locator.columnNumber;
	}
	/**
	 * @see org.xml.sax.ContentHandler#startDocument
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
	 */ 
	DOMHandler.prototype = {
		startDocument : function() {
	    	this.doc = new DOMImplementation().createDocument(null, null, null);
	    	if (this.locator) {
	        	this.doc.documentURI = this.locator.systemId;
	    	}
		},
		startElement:function(namespaceURI, localName, qName, attrs) {
			var doc = this.doc;
		    var el = doc.createElementNS(namespaceURI, qName||localName);
		    var len = attrs.length;
		    appendElement(this, el);
		    this.currentElement = el;
		    
			this.locator && position(this.locator,el)
		    for (var i = 0 ; i < len; i++) {
		        var namespaceURI = attrs.getURI(i);
		        var value = attrs.getValue(i);
		        var qName = attrs.getQName(i);
				var attr = doc.createAttributeNS(namespaceURI, qName);
				this.locator &&position(attrs.getLocator(i),attr);
				attr.value = attr.nodeValue = value;
				el.setAttributeNode(attr)
		    }
		},
		endElement:function(namespaceURI, localName, qName) {
			var current = this.currentElement
			var tagName = current.tagName;
			this.currentElement = current.parentNode;
		},
		startPrefixMapping:function(prefix, uri) {
		},
		endPrefixMapping:function(prefix) {
		},
		processingInstruction:function(target, data) {
		    var ins = this.doc.createProcessingInstruction(target, data);
		    this.locator && position(this.locator,ins)
		    appendElement(this, ins);
		},
		ignorableWhitespace:function(ch, start, length) {
		},
		characters:function(chars, start, length) {
			chars = _toString.apply(this,arguments)
			//console.log(chars)
			if(chars){
				if (this.cdata) {
					var charNode = this.doc.createCDATASection(chars);
				} else {
					var charNode = this.doc.createTextNode(chars);
				}
				if(this.currentElement){
					this.currentElement.appendChild(charNode);
				}else if(/^\s*$/.test(chars)){
					this.doc.appendChild(charNode);
					//process xml
				}
				this.locator && position(this.locator,charNode)
			}
		},
		skippedEntity:function(name) {
		},
		endDocument:function() {
			this.doc.normalize();
		},
		setDocumentLocator:function (locator) {
		    if(this.locator = locator){// && !('lineNumber' in locator)){
		    	locator.lineNumber = 0;
		    }
		},
		//LexicalHandler
		comment:function(chars, start, length) {
			chars = _toString.apply(this,arguments)
		    var comm = this.doc.createComment(chars);
		    this.locator && position(this.locator,comm)
		    appendElement(this, comm);
		},
		
		startCDATA:function() {
		    //used in characters() methods
		    this.cdata = true;
		},
		endCDATA:function() {
		    this.cdata = false;
		},
		
		startDTD:function(name, publicId, systemId) {
			var impl = this.doc.implementation;
		    if (impl && impl.createDocumentType) {
		        var dt = impl.createDocumentType(name, publicId, systemId);
		        this.locator && position(this.locator,dt)
		        appendElement(this, dt);
		    }
		},
		/**
		 * @see org.xml.sax.ErrorHandler
		 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
		 */
		warning:function(error) {
			console.warn('[xmldom warning]\t'+error,_locator(this.locator));
		},
		error:function(error) {
			console.error('[xmldom error]\t'+error,_locator(this.locator));
		},
		fatalError:function(error) {
			console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
		    throw error;
		}
	}
	function _locator(l){
		if(l){
			return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
		}
	}
	function _toString(chars,start,length){
		if(typeof chars == 'string'){
			return chars.substr(start,length)
		}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
			if(chars.length >= start+length || start){
				return new java.lang.String(chars,start,length)+'';
			}
			return chars;
		}
	}
	
	/*
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
	 * used method of org.xml.sax.ext.LexicalHandler:
	 *  #comment(chars, start, length)
	 *  #startCDATA()
	 *  #endCDATA()
	 *  #startDTD(name, publicId, systemId)
	 *
	 *
	 * IGNORED method of org.xml.sax.ext.LexicalHandler:
	 *  #endDTD()
	 *  #startEntity(name)
	 *  #endEntity(name)
	 *
	 *
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
	 * IGNORED method of org.xml.sax.ext.DeclHandler
	 * 	#attributeDecl(eName, aName, type, mode, value)
	 *  #elementDecl(name, model)
	 *  #externalEntityDecl(name, publicId, systemId)
	 *  #internalEntityDecl(name, value)
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
	 * IGNORED method of org.xml.sax.EntityResolver2
	 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
	 *  #resolveEntity(publicId, systemId)
	 *  #getExternalSubset(name, baseURI)
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
	 * IGNORED method of org.xml.sax.DTDHandler
	 *  #notationDecl(name, publicId, systemId) {};
	 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
	 */
	"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
		DOMHandler.prototype[key] = function(){return null}
	})
	
	/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
	function appendElement (hander,node) {
	    if (!hander.currentElement) {
	        hander.doc.appendChild(node);
	    } else {
	        hander.currentElement.appendChild(node);
	    }
	}//appendChild and setAttributeNS are preformance key
	
	//if(typeof require == 'function'){
		var XMLReader = __webpack_require__(234).XMLReader;
		var DOMImplementation = exports.DOMImplementation = __webpack_require__(235).DOMImplementation;
		exports.XMLSerializer = __webpack_require__(235).XMLSerializer ;
		exports.DOMParser = DOMParser;
	//}


/***/ },
/* 234 */
/***/ function(module, exports) {

	//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
	//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
	//[5]   	Name	   ::=   	NameStartChar (NameChar)*
	var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
	var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
	var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
	//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
	//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')
	
	//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
	//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
	var S_TAG = 0;//tag name offerring
	var S_ATTR = 1;//attr name offerring 
	var S_ATTR_SPACE=2;//attr name end and space offer
	var S_EQ = 3;//=space?
	var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
	var S_ATTR_END = 5;//attr value end and no space(quot end)
	var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
	var S_TAG_CLOSE = 7;//closed el<el />
	
	function XMLReader(){
		
	}
	
	XMLReader.prototype = {
		parse:function(source,defaultNSMap,entityMap){
			var domBuilder = this.domBuilder;
			domBuilder.startDocument();
			_copy(defaultNSMap ,defaultNSMap = {})
			parse(source,defaultNSMap,entityMap,
					domBuilder,this.errorHandler);
			domBuilder.endDocument();
		}
	}
	function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
		function fixedFromCharCode(code) {
			// String.prototype.fromCharCode does not supports
			// > 2 bytes unicode chars directly
			if (code > 0xffff) {
				code -= 0x10000;
				var surrogate1 = 0xd800 + (code >> 10)
					, surrogate2 = 0xdc00 + (code & 0x3ff);
	
				return String.fromCharCode(surrogate1, surrogate2);
			} else {
				return String.fromCharCode(code);
			}
		}
		function entityReplacer(a){
			var k = a.slice(1,-1);
			if(k in entityMap){
				return entityMap[k]; 
			}else if(k.charAt(0) === '#'){
				return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
			}else{
				errorHandler.error('entity not found:'+a);
				return a;
			}
		}
		function appendText(end){//has some bugs
			if(end>start){
				var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
				locator&&position(start);
				domBuilder.characters(xt,0,end-start);
				start = end
			}
		}
		function position(p,m){
			while(p>=lineEnd && (m = linePattern.exec(source))){
				lineStart = m.index;
				lineEnd = lineStart + m[0].length;
				locator.lineNumber++;
				//console.log('line++:',locator,startPos,endPos)
			}
			locator.columnNumber = p-lineStart+1;
		}
		var lineStart = 0;
		var lineEnd = 0;
		var linePattern = /.*(?:\r\n?|\n)|.*$/g
		var locator = domBuilder.locator;
		
		var parseStack = [{currentNSMap:defaultNSMapCopy}]
		var closeMap = {};
		var start = 0;
		while(true){
			try{
				var tagStart = source.indexOf('<',start);
				if(tagStart<0){
					if(!source.substr(start).match(/^\s*$/)){
						var doc = domBuilder.doc;
		    			var text = doc.createTextNode(source.substr(start));
		    			doc.appendChild(text);
		    			domBuilder.currentElement = text;
					}
					return;
				}
				if(tagStart>start){
					appendText(tagStart);
				}
				switch(source.charAt(tagStart+1)){
				case '/':
					var end = source.indexOf('>',tagStart+3);
					var tagName = source.substring(tagStart+2,end);
					var config = parseStack.pop();
					if(end<0){
						
		        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
		        		//console.error('#@@@@@@'+tagName)
		        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
		        		end = tagStart+1+tagName.length;
		        	}else if(tagName.match(/\s</)){
		        		tagName = tagName.replace(/[\s<].*/,'');
		        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
		        		end = tagStart+1+tagName.length;
					}
					//console.error(parseStack.length,parseStack)
					//console.error(config);
					var localNSMap = config.localNSMap;
					var endMatch = config.tagName == tagName;
					var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
			        if(endIgnoreCaseMach){
			        	domBuilder.endElement(config.uri,config.localName,tagName);
						if(localNSMap){
							for(var prefix in localNSMap){
								domBuilder.endPrefixMapping(prefix) ;
							}
						}
						if(!endMatch){
			            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
						}
			        }else{
			        	parseStack.push(config)
			        }
					
					end++;
					break;
					// end elment
				case '?':// <?...?>
					locator&&position(tagStart);
					end = parseInstruction(source,tagStart,domBuilder);
					break;
				case '!':// <!doctype,<![CDATA,<!--
					locator&&position(tagStart);
					end = parseDCC(source,tagStart,domBuilder,errorHandler);
					break;
				default:
					locator&&position(tagStart);
					var el = new ElementAttributes();
					var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
					//elStartEnd
					var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
					var len = el.length;
					
					
					if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
						el.closed = true;
						if(!entityMap.nbsp){
							errorHandler.warning('unclosed xml attribute');
						}
					}
					if(locator && len){
						var locator2 = copyLocator(locator,{});
						//try{//attribute position fixed
						for(var i = 0;i<len;i++){
							var a = el[i];
							position(a.offset);
							a.locator = copyLocator(locator,{});
						}
						//}catch(e){console.error('@@@@@'+e)}
						domBuilder.locator = locator2
						if(appendElement(el,domBuilder,currentNSMap)){
							parseStack.push(el)
						}
						domBuilder.locator = locator;
					}else{
						if(appendElement(el,domBuilder,currentNSMap)){
							parseStack.push(el)
						}
					}
					
					
					
					if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
						end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
					}else{
						end++;
					}
				}
			}catch(e){
				errorHandler.error('element parse error: '+e)
				//errorHandler.error('element parse error: '+e);
				end = -1;
				//throw e;
			}
			if(end>start){
				start = end;
			}else{
				//TODO: 这里有可能sax回退，有位置错误风险
				appendText(Math.max(tagStart,start)+1);
			}
		}
	}
	function copyLocator(f,t){
		t.lineNumber = f.lineNumber;
		t.columnNumber = f.columnNumber;
		return t;
	}
	
	/**
	 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
	 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
	 */
	function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
		var attrName;
		var value;
		var p = ++start;
		var s = S_TAG;//status
		while(true){
			var c = source.charAt(p);
			switch(c){
			case '=':
				if(s === S_ATTR){//attrName
					attrName = source.slice(start,p);
					s = S_EQ;
				}else if(s === S_ATTR_SPACE){
					s = S_EQ;
				}else{
					//fatalError: equal must after attrName or space after attrName
					throw new Error('attribute equal must after attrName');
				}
				break;
			case '\'':
			case '"':
				if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
					){//equal
					if(s === S_ATTR){
						errorHandler.warning('attribute value must after "="')
						attrName = source.slice(start,p)
					}
					start = p+1;
					p = source.indexOf(c,start)
					if(p>0){
						value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
						el.add(attrName,value,start-1);
						s = S_ATTR_END;
					}else{
						//fatalError: no end quot match
						throw new Error('attribute value no end \''+c+'\' match');
					}
				}else if(s == S_ATTR_NOQUOT_VALUE){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					//console.log(attrName,value,start,p)
					el.add(attrName,value,start);
					//console.dir(el)
					errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
					start = p+1;
					s = S_ATTR_END
				}else{
					//fatalError: no equal before
					throw new Error('attribute value must after "="');
				}
				break;
			case '/':
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));
				case S_ATTR_END:
				case S_TAG_SPACE:
				case S_TAG_CLOSE:
					s =S_TAG_CLOSE;
					el.closed = true;
				case S_ATTR_NOQUOT_VALUE:
				case S_ATTR:
				case S_ATTR_SPACE:
					break;
				//case S_EQ:
				default:
					throw new Error("attribute invalid close char('/')")
				}
				break;
			case ''://end document
				//throw new Error('unexpected end of input')
				errorHandler.error('unexpected end of input');
				if(s == S_TAG){
					el.setTagName(source.slice(start,p));
				}
				return p;
			case '>':
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));
				case S_ATTR_END:
				case S_TAG_SPACE:
				case S_TAG_CLOSE:
					break;//normal
				case S_ATTR_NOQUOT_VALUE://Compatible state
				case S_ATTR:
					value = source.slice(start,p);
					if(value.slice(-1) === '/'){
						el.closed  = true;
						value = value.slice(0,-1)
					}
				case S_ATTR_SPACE:
					if(s === S_ATTR_SPACE){
						value = attrName;
					}
					if(s == S_ATTR_NOQUOT_VALUE){
						errorHandler.warning('attribute "'+value+'" missed quot(")!!');
						el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start)
					}else{
						if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
							errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
						}
						el.add(value,value,start)
					}
					break;
				case S_EQ:
					throw new Error('attribute value missed!!');
				}
	//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
				return p;
			/*xml space '\x20' | #x9 | #xD | #xA; */
			case '\u0080':
				c = ' ';
			default:
				if(c<= ' '){//space
					switch(s){
					case S_TAG:
						el.setTagName(source.slice(start,p));//tagName
						s = S_TAG_SPACE;
						break;
					case S_ATTR:
						attrName = source.slice(start,p)
						s = S_ATTR_SPACE;
						break;
					case S_ATTR_NOQUOT_VALUE:
						var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
						errorHandler.warning('attribute "'+value+'" missed quot(")!!');
						el.add(attrName,value,start)
					case S_ATTR_END:
						s = S_TAG_SPACE;
						break;
					//case S_TAG_SPACE:
					//case S_EQ:
					//case S_ATTR_SPACE:
					//	void();break;
					//case S_TAG_CLOSE:
						//ignore warning
					}
				}else{//not space
	//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
	//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
					switch(s){
					//case S_TAG:void();break;
					//case S_ATTR:void();break;
					//case S_ATTR_NOQUOT_VALUE:void();break;
					case S_ATTR_SPACE:
						var tagName =  el.tagName;
						if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
							errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
						}
						el.add(attrName,attrName,start);
						start = p;
						s = S_ATTR;
						break;
					case S_ATTR_END:
						errorHandler.warning('attribute space is required"'+attrName+'"!!')
					case S_TAG_SPACE:
						s = S_ATTR;
						start = p;
						break;
					case S_EQ:
						s = S_ATTR_NOQUOT_VALUE;
						start = p;
						break;
					case S_TAG_CLOSE:
						throw new Error("elements closed character '/' and '>' must be connected to");
					}
				}
			}//end outer switch
			//console.log('p++',p)
			p++;
		}
	}
	/**
	 * @return true if has new namespace define
	 */
	function appendElement(el,domBuilder,currentNSMap){
		var tagName = el.tagName;
		var localNSMap = null;
		//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
		var i = el.length;
		while(i--){
			var a = el[i];
			var qName = a.qName;
			var value = a.value;
			var nsp = qName.indexOf(':');
			if(nsp>0){
				var prefix = a.prefix = qName.slice(0,nsp);
				var localName = qName.slice(nsp+1);
				var nsPrefix = prefix === 'xmlns' && localName
			}else{
				localName = qName;
				prefix = null
				nsPrefix = qName === 'xmlns' && ''
			}
			//can not set prefix,because prefix !== ''
			a.localName = localName ;
			//prefix == null for no ns prefix attribute 
			if(nsPrefix !== false){//hack!!
				if(localNSMap == null){
					localNSMap = {}
					//console.log(currentNSMap,0)
					_copy(currentNSMap,currentNSMap={})
					//console.log(currentNSMap,1)
				}
				currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
				a.uri = 'http://www.w3.org/2000/xmlns/'
				domBuilder.startPrefixMapping(nsPrefix, value) 
			}
		}
		var i = el.length;
		while(i--){
			a = el[i];
			var prefix = a.prefix;
			if(prefix){//no prefix attribute has no namespace
				if(prefix === 'xml'){
					a.uri = 'http://www.w3.org/XML/1998/namespace';
				}if(prefix !== 'xmlns'){
					a.uri = currentNSMap[prefix || '']
					
					//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
				}
			}
		}
		var nsp = tagName.indexOf(':');
		if(nsp>0){
			prefix = el.prefix = tagName.slice(0,nsp);
			localName = el.localName = tagName.slice(nsp+1);
		}else{
			prefix = null;//important!!
			localName = el.localName = tagName;
		}
		//no prefix element has default namespace
		var ns = el.uri = currentNSMap[prefix || ''];
		domBuilder.startElement(ns,localName,tagName,el);
		//endPrefixMapping and startPrefixMapping have not any help for dom builder
		//localNSMap = null
		if(el.closed){
			domBuilder.endElement(ns,localName,tagName);
			if(localNSMap){
				for(prefix in localNSMap){
					domBuilder.endPrefixMapping(prefix) 
				}
			}
		}else{
			el.currentNSMap = currentNSMap;
			el.localNSMap = localNSMap;
			//parseStack.push(el);
			return true;
		}
	}
	function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
		if(/^(?:script|textarea)$/i.test(tagName)){
			var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
			var text = source.substring(elStartEnd+1,elEndStart);
			if(/[&<]/.test(text)){
				if(/^script$/i.test(tagName)){
					//if(!/\]\]>/.test(text)){
						//lexHandler.startCDATA();
						domBuilder.characters(text,0,text.length);
						//lexHandler.endCDATA();
						return elEndStart;
					//}
				}//}else{//text area
					text = text.replace(/&#?\w+;/g,entityReplacer);
					domBuilder.characters(text,0,text.length);
					return elEndStart;
				//}
				
			}
		}
		return elStartEnd+1;
	}
	function fixSelfClosed(source,elStartEnd,tagName,closeMap){
		//if(tagName in closeMap){
		var pos = closeMap[tagName];
		if(pos == null){
			//console.log(tagName)
			pos =  source.lastIndexOf('</'+tagName+'>')
			if(pos<elStartEnd){//忘记闭合
				pos = source.lastIndexOf('</'+tagName)
			}
			closeMap[tagName] =pos
		}
		return pos<elStartEnd;
		//} 
	}
	function _copy(source,target){
		for(var n in source){target[n] = source[n]}
	}
	function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
		var next= source.charAt(start+2)
		switch(next){
		case '-':
			if(source.charAt(start + 3) === '-'){
				var end = source.indexOf('-->',start+4);
				//append comment source.substring(4,end)//<!--
				if(end>start){
					domBuilder.comment(source,start+4,end-start-4);
					return end+3;
				}else{
					errorHandler.error("Unclosed comment");
					return -1;
				}
			}else{
				//error
				return -1;
			}
		default:
			if(source.substr(start+3,6) == 'CDATA['){
				var end = source.indexOf(']]>',start+9);
				domBuilder.startCDATA();
				domBuilder.characters(source,start+9,end-start-9);
				domBuilder.endCDATA() 
				return end+3;
			}
			//<!DOCTYPE
			//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
			var matchs = split(source,start);
			var len = matchs.length;
			if(len>1 && /!doctype/i.test(matchs[0][0])){
				var name = matchs[1][0];
				var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
				var sysid = len>4 && matchs[4][0];
				var lastMatch = matchs[len-1]
				domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
						sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
				domBuilder.endDTD();
				
				return lastMatch.index+lastMatch[0].length
			}
		}
		return -1;
	}
	
	
	
	function parseInstruction(source,start,domBuilder){
		var end = source.indexOf('?>',start);
		if(end){
			var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
			if(match){
				var len = match[0].length;
				domBuilder.processingInstruction(match[1], match[2]) ;
				return end+2;
			}else{//error
				return -1;
			}
		}
		return -1;
	}
	
	/**
	 * @param source
	 */
	function ElementAttributes(source){
		
	}
	ElementAttributes.prototype = {
		setTagName:function(tagName){
			if(!tagNamePattern.test(tagName)){
				throw new Error('invalid tagName:'+tagName)
			}
			this.tagName = tagName
		},
		add:function(qName,value,offset){
			if(!tagNamePattern.test(qName)){
				throw new Error('invalid attribute:'+qName)
			}
			this[this.length++] = {qName:qName,value:value,offset:offset}
		},
		length:0,
		getLocalName:function(i){return this[i].localName},
		getLocator:function(i){return this[i].locator},
		getQName:function(i){return this[i].qName},
		getURI:function(i){return this[i].uri},
		getValue:function(i){return this[i].value}
	//	,getIndex:function(uri, localName)){
	//		if(localName){
	//			
	//		}else{
	//			var qName = uri
	//		}
	//	},
	//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
	//	getType:function(uri,localName){}
	//	getType:function(i){},
	}
	
	
	
	
	function _set_proto_(thiz,parent){
		thiz.__proto__ = parent;
		return thiz;
	}
	if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
		_set_proto_ = function(thiz,parent){
			function p(){};
			p.prototype = parent;
			p = new p();
			for(parent in thiz){
				p[parent] = thiz[parent];
			}
			return p;
		}
	}
	
	function split(source,start){
		var match;
		var buf = [];
		var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
		reg.lastIndex = start;
		reg.exec(source);//skip <
		while(match = reg.exec(source)){
			buf.push(match);
			if(match[1])return buf;
		}
	}
	
	exports.XMLReader = XMLReader;
	


/***/ },
/* 235 */
/***/ function(module, exports) {

	/*
	 * DOM Level 2
	 * Object DOMException
	 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
	 */
	
	function copy(src,dest){
		for(var p in src){
			dest[p] = src[p];
		}
	}
	/**
	^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
	^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
	 */
	function _extends(Class,Super){
		var pt = Class.prototype;
		if(Object.create){
			var ppt = Object.create(Super.prototype)
			pt.__proto__ = ppt;
		}
		if(!(pt instanceof Super)){
			function t(){};
			t.prototype = Super.prototype;
			t = new t();
			copy(pt,t);
			Class.prototype = pt = t;
		}
		if(pt.constructor != Class){
			if(typeof Class != 'function'){
				console.error("unknow Class:"+Class)
			}
			pt.constructor = Class
		}
	}
	var htmlns = 'http://www.w3.org/1999/xhtml' ;
	// Node Types
	var NodeType = {}
	var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
	var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
	var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
	var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
	var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
	var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
	var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
	var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
	var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
	var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
	var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
	var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;
	
	// ExceptionCode
	var ExceptionCode = {}
	var ExceptionMessage = {};
	var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
	var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
	var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
	var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
	var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
	var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
	var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
	var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
	var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
	var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
	//level2
	var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
	var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
	var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
	var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
	var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);
	
	
	function DOMException(code, message) {
		if(message instanceof Error){
			var error = message;
		}else{
			error = this;
			Error.call(this, ExceptionMessage[code]);
			this.message = ExceptionMessage[code];
			if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
		}
		error.code = code;
		if(message) this.message = this.message + ": " + message;
		return error;
	};
	DOMException.prototype = Error.prototype;
	copy(ExceptionCode,DOMException)
	/**
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
	 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
	 * The items in the NodeList are accessible via an integral index, starting from 0.
	 */
	function NodeList() {
	};
	NodeList.prototype = {
		/**
		 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
		 * @standard level1
		 */
		length:0, 
		/**
		 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
		 * @standard level1
		 * @param index  unsigned long 
		 *   Index into the collection.
		 * @return Node
		 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
		 */
		item: function(index) {
			return this[index] || null;
		},
		toString:function(isHTML,nodeFilter){
			for(var buf = [], i = 0;i<this.length;i++){
				serializeToString(this[i],buf,isHTML,nodeFilter);
			}
			return buf.join('');
		}
	};
	function LiveNodeList(node,refresh){
		this._node = node;
		this._refresh = refresh
		_updateLiveList(this);
	}
	function _updateLiveList(list){
		var inc = list._node._inc || list._node.ownerDocument._inc;
		if(list._inc != inc){
			var ls = list._refresh(list._node);
			//console.log(ls.length)
			__set__(list,'length',ls.length);
			copy(ls,list);
			list._inc = inc;
		}
	}
	LiveNodeList.prototype.item = function(i){
		_updateLiveList(this);
		return this[i];
	}
	
	_extends(LiveNodeList,NodeList);
	/**
	 * 
	 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
	 * NamedNodeMap objects in the DOM are live.
	 * used for attributes or DocumentType entities 
	 */
	function NamedNodeMap() {
	};
	
	function _findNodeIndex(list,node){
		var i = list.length;
		while(i--){
			if(list[i] === node){return i}
		}
	}
	
	function _addNamedNode(el,list,newAttr,oldAttr){
		if(oldAttr){
			list[_findNodeIndex(list,oldAttr)] = newAttr;
		}else{
			list[list.length++] = newAttr;
		}
		if(el){
			newAttr.ownerElement = el;
			var doc = el.ownerDocument;
			if(doc){
				oldAttr && _onRemoveAttribute(doc,el,oldAttr);
				_onAddAttribute(doc,el,newAttr);
			}
		}
	}
	function _removeNamedNode(el,list,attr){
		//console.log('remove attr:'+attr)
		var i = _findNodeIndex(list,attr);
		if(i>=0){
			var lastIndex = list.length-1
			while(i<lastIndex){
				list[i] = list[++i]
			}
			list.length = lastIndex;
			if(el){
				var doc = el.ownerDocument;
				if(doc){
					_onRemoveAttribute(doc,el,attr);
					attr.ownerElement = null;
				}
			}
		}else{
			throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
		}
	}
	NamedNodeMap.prototype = {
		length:0,
		item:NodeList.prototype.item,
		getNamedItem: function(key) {
	//		if(key.indexOf(':')>0 || key == 'xmlns'){
	//			return null;
	//		}
			//console.log()
			var i = this.length;
			while(i--){
				var attr = this[i];
				//console.log(attr.nodeName,key)
				if(attr.nodeName == key){
					return attr;
				}
			}
		},
		setNamedItem: function(attr) {
			var el = attr.ownerElement;
			if(el && el!=this._ownerElement){
				throw new DOMException(INUSE_ATTRIBUTE_ERR);
			}
			var oldAttr = this.getNamedItem(attr.nodeName);
			_addNamedNode(this._ownerElement,this,attr,oldAttr);
			return oldAttr;
		},
		/* returns Node */
		setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
			var el = attr.ownerElement, oldAttr;
			if(el && el!=this._ownerElement){
				throw new DOMException(INUSE_ATTRIBUTE_ERR);
			}
			oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
			_addNamedNode(this._ownerElement,this,attr,oldAttr);
			return oldAttr;
		},
	
		/* returns Node */
		removeNamedItem: function(key) {
			var attr = this.getNamedItem(key);
			_removeNamedNode(this._ownerElement,this,attr);
			return attr;
			
			
		},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
		
		//for level2
		removeNamedItemNS:function(namespaceURI,localName){
			var attr = this.getNamedItemNS(namespaceURI,localName);
			_removeNamedNode(this._ownerElement,this,attr);
			return attr;
		},
		getNamedItemNS: function(namespaceURI, localName) {
			var i = this.length;
			while(i--){
				var node = this[i];
				if(node.localName == localName && node.namespaceURI == namespaceURI){
					return node;
				}
			}
			return null;
		}
	};
	/**
	 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
	 */
	function DOMImplementation(/* Object */ features) {
		this._features = {};
		if (features) {
			for (var feature in features) {
				 this._features = features[feature];
			}
		}
	};
	
	DOMImplementation.prototype = {
		hasFeature: function(/* string */ feature, /* string */ version) {
			var versions = this._features[feature.toLowerCase()];
			if (versions && (!version || version in versions)) {
				return true;
			} else {
				return false;
			}
		},
		// Introduced in DOM Level 2:
		createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
			var doc = new Document();
			doc.implementation = this;
			doc.childNodes = new NodeList();
			doc.doctype = doctype;
			if(doctype){
				doc.appendChild(doctype);
			}
			if(qualifiedName){
				var root = doc.createElementNS(namespaceURI,qualifiedName);
				doc.appendChild(root);
			}
			return doc;
		},
		// Introduced in DOM Level 2:
		createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
			var node = new DocumentType();
			node.name = qualifiedName;
			node.nodeName = qualifiedName;
			node.publicId = publicId;
			node.systemId = systemId;
			// Introduced in DOM Level 2:
			//readonly attribute DOMString        internalSubset;
			
			//TODO:..
			//  readonly attribute NamedNodeMap     entities;
			//  readonly attribute NamedNodeMap     notations;
			return node;
		}
	};
	
	
	/**
	 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
	 */
	
	function Node() {
	};
	
	Node.prototype = {
		firstChild : null,
		lastChild : null,
		previousSibling : null,
		nextSibling : null,
		attributes : null,
		parentNode : null,
		childNodes : null,
		ownerDocument : null,
		nodeValue : null,
		namespaceURI : null,
		prefix : null,
		localName : null,
		// Modified in DOM Level 2:
		insertBefore:function(newChild, refChild){//raises 
			return _insertBefore(this,newChild,refChild);
		},
		replaceChild:function(newChild, oldChild){//raises 
			this.insertBefore(newChild,oldChild);
			if(oldChild){
				this.removeChild(oldChild);
			}
		},
		removeChild:function(oldChild){
			return _removeChild(this,oldChild);
		},
		appendChild:function(newChild){
			return this.insertBefore(newChild,null);
		},
		hasChildNodes:function(){
			return this.firstChild != null;
		},
		cloneNode:function(deep){
			return cloneNode(this.ownerDocument||this,this,deep);
		},
		// Modified in DOM Level 2:
		normalize:function(){
			var child = this.firstChild;
			while(child){
				var next = child.nextSibling;
				if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
					this.removeChild(next);
					child.appendData(next.data);
				}else{
					child.normalize();
					child = next;
				}
			}
		},
	  	// Introduced in DOM Level 2:
		isSupported:function(feature, version){
			return this.ownerDocument.implementation.hasFeature(feature,version);
		},
	    // Introduced in DOM Level 2:
	    hasAttributes:function(){
	    	return this.attributes.length>0;
	    },
	    lookupPrefix:function(namespaceURI){
	    	var el = this;
	    	while(el){
	    		var map = el._nsMap;
	    		//console.dir(map)
	    		if(map){
	    			for(var n in map){
	    				if(map[n] == namespaceURI){
	    					return n;
	    				}
	    			}
	    		}
	    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
	    	}
	    	return null;
	    },
	    // Introduced in DOM Level 3:
	    lookupNamespaceURI:function(prefix){
	    	var el = this;
	    	while(el){
	    		var map = el._nsMap;
	    		//console.dir(map)
	    		if(map){
	    			if(prefix in map){
	    				return map[prefix] ;
	    			}
	    		}
	    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
	    	}
	    	return null;
	    },
	    // Introduced in DOM Level 3:
	    isDefaultNamespace:function(namespaceURI){
	    	var prefix = this.lookupPrefix(namespaceURI);
	    	return prefix == null;
	    }
	};
	
	
	function _xmlEncoder(c){
		return c == '<' && '&lt;' ||
	         c == '>' && '&gt;' ||
	         c == '&' && '&amp;' ||
	         c == '"' && '&quot;' ||
	         '&#'+c.charCodeAt()+';'
	}
	
	
	copy(NodeType,Node);
	copy(NodeType,Node.prototype);
	
	/**
	 * @param callback return true for continue,false for break
	 * @return boolean true: break visit;
	 */
	function _visitNode(node,callback){
		if(callback(node)){
			return true;
		}
		if(node = node.firstChild){
			do{
				if(_visitNode(node,callback)){return true}
	        }while(node=node.nextSibling)
	    }
	}
	
	
	
	function Document(){
	}
	function _onAddAttribute(doc,el,newAttr){
		doc && doc._inc++;
		var ns = newAttr.namespaceURI ;
		if(ns == 'http://www.w3.org/2000/xmlns/'){
			//update namespace
			el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
		}
	}
	function _onRemoveAttribute(doc,el,newAttr,remove){
		doc && doc._inc++;
		var ns = newAttr.namespaceURI ;
		if(ns == 'http://www.w3.org/2000/xmlns/'){
			//update namespace
			delete el._nsMap[newAttr.prefix?newAttr.localName:'']
		}
	}
	function _onUpdateChild(doc,el,newChild){
		if(doc && doc._inc){
			doc._inc++;
			//update childNodes
			var cs = el.childNodes;
			if(newChild){
				cs[cs.length++] = newChild;
			}else{
				//console.log(1)
				var child = el.firstChild;
				var i = 0;
				while(child){
					cs[i++] = child;
					child =child.nextSibling;
				}
				cs.length = i;
			}
		}
	}
	
	/**
	 * attributes;
	 * children;
	 * 
	 * writeable properties:
	 * nodeValue,Attr:value,CharacterData:data
	 * prefix
	 */
	function _removeChild(parentNode,child){
		var previous = child.previousSibling;
		var next = child.nextSibling;
		if(previous){
			previous.nextSibling = next;
		}else{
			parentNode.firstChild = next
		}
		if(next){
			next.previousSibling = previous;
		}else{
			parentNode.lastChild = previous;
		}
		_onUpdateChild(parentNode.ownerDocument,parentNode);
		return child;
	}
	/**
	 * preformance key(refChild == null)
	 */
	function _insertBefore(parentNode,newChild,nextChild){
		var cp = newChild.parentNode;
		if(cp){
			cp.removeChild(newChild);//remove and update
		}
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			var newFirst = newChild.firstChild;
			if (newFirst == null) {
				return newChild;
			}
			var newLast = newChild.lastChild;
		}else{
			newFirst = newLast = newChild;
		}
		var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;
	
		newFirst.previousSibling = pre;
		newLast.nextSibling = nextChild;
		
		
		if(pre){
			pre.nextSibling = newFirst;
		}else{
			parentNode.firstChild = newFirst;
		}
		if(nextChild == null){
			parentNode.lastChild = newLast;
		}else{
			nextChild.previousSibling = newLast;
		}
		do{
			newFirst.parentNode = parentNode;
		}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
		_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
		//console.log(parentNode.lastChild.nextSibling == null)
		if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
			newChild.firstChild = newChild.lastChild = null;
		}
		return newChild;
	}
	function _appendSingleChild(parentNode,newChild){
		var cp = newChild.parentNode;
		if(cp){
			var pre = parentNode.lastChild;
			cp.removeChild(newChild);//remove and update
			var pre = parentNode.lastChild;
		}
		var pre = parentNode.lastChild;
		newChild.parentNode = parentNode;
		newChild.previousSibling = pre;
		newChild.nextSibling = null;
		if(pre){
			pre.nextSibling = newChild;
		}else{
			parentNode.firstChild = newChild;
		}
		parentNode.lastChild = newChild;
		_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
		return newChild;
		//console.log("__aa",parentNode.lastChild.nextSibling == null)
	}
	Document.prototype = {
		//implementation : null,
		nodeName :  '#document',
		nodeType :  DOCUMENT_NODE,
		doctype :  null,
		documentElement :  null,
		_inc : 1,
		
		insertBefore :  function(newChild, refChild){//raises 
			if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
				var child = newChild.firstChild;
				while(child){
					var next = child.nextSibling;
					this.insertBefore(child,refChild);
					child = next;
				}
				return newChild;
			}
			if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
				this.documentElement = newChild;
			}
			
			return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
		},
		removeChild :  function(oldChild){
			if(this.documentElement == oldChild){
				this.documentElement = null;
			}
			return _removeChild(this,oldChild);
		},
		// Introduced in DOM Level 2:
		importNode : function(importedNode,deep){
			return importNode(this,importedNode,deep);
		},
		// Introduced in DOM Level 2:
		getElementById :	function(id){
			var rtv = null;
			_visitNode(this.documentElement,function(node){
				if(node.nodeType == ELEMENT_NODE){
					if(node.getAttribute('id') == id){
						rtv = node;
						return true;
					}
				}
			})
			return rtv;
		},
		
		//document factory method:
		createElement :	function(tagName){
			var node = new Element();
			node.ownerDocument = this;
			node.nodeName = tagName;
			node.tagName = tagName;
			node.childNodes = new NodeList();
			var attrs	= node.attributes = new NamedNodeMap();
			attrs._ownerElement = node;
			return node;
		},
		createDocumentFragment :	function(){
			var node = new DocumentFragment();
			node.ownerDocument = this;
			node.childNodes = new NodeList();
			return node;
		},
		createTextNode :	function(data){
			var node = new Text();
			node.ownerDocument = this;
			node.appendData(data)
			return node;
		},
		createComment :	function(data){
			var node = new Comment();
			node.ownerDocument = this;
			node.appendData(data)
			return node;
		},
		createCDATASection :	function(data){
			var node = new CDATASection();
			node.ownerDocument = this;
			node.appendData(data)
			return node;
		},
		createProcessingInstruction :	function(target,data){
			var node = new ProcessingInstruction();
			node.ownerDocument = this;
			node.tagName = node.target = target;
			node.nodeValue= node.data = data;
			return node;
		},
		createAttribute :	function(name){
			var node = new Attr();
			node.ownerDocument	= this;
			node.name = name;
			node.nodeName	= name;
			node.localName = name;
			node.specified = true;
			return node;
		},
		createEntityReference :	function(name){
			var node = new EntityReference();
			node.ownerDocument	= this;
			node.nodeName	= name;
			return node;
		},
		// Introduced in DOM Level 2:
		createElementNS :	function(namespaceURI,qualifiedName){
			var node = new Element();
			var pl = qualifiedName.split(':');
			var attrs	= node.attributes = new NamedNodeMap();
			node.childNodes = new NodeList();
			node.ownerDocument = this;
			node.nodeName = qualifiedName;
			node.tagName = qualifiedName;
			node.namespaceURI = namespaceURI;
			if(pl.length == 2){
				node.prefix = pl[0];
				node.localName = pl[1];
			}else{
				//el.prefix = null;
				node.localName = qualifiedName;
			}
			attrs._ownerElement = node;
			return node;
		},
		// Introduced in DOM Level 2:
		createAttributeNS :	function(namespaceURI,qualifiedName){
			var node = new Attr();
			var pl = qualifiedName.split(':');
			node.ownerDocument = this;
			node.nodeName = qualifiedName;
			node.name = qualifiedName;
			node.namespaceURI = namespaceURI;
			node.specified = true;
			if(pl.length == 2){
				node.prefix = pl[0];
				node.localName = pl[1];
			}else{
				//el.prefix = null;
				node.localName = qualifiedName;
			}
			return node;
		}
	};
	_extends(Document,Node);
	
	
	function Element() {
		this._nsMap = {};
	};
	Element.prototype = {
		nodeType : ELEMENT_NODE,
		hasAttribute : function(name){
			return this.getAttributeNode(name)!=null;
		},
		getAttribute : function(name){
			var attr = this.getAttributeNode(name);
			return attr && attr.value || '';
		},
		getAttributeNode : function(name){
			return this.attributes.getNamedItem(name);
		},
		setAttribute : function(name, value){
			var attr = this.ownerDocument.createAttribute(name);
			attr.value = attr.nodeValue = "" + value;
			this.setAttributeNode(attr)
		},
		removeAttribute : function(name){
			var attr = this.getAttributeNode(name)
			attr && this.removeAttributeNode(attr);
		},
		
		//four real opeartion method
		appendChild:function(newChild){
			if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
				return this.insertBefore(newChild,null);
			}else{
				return _appendSingleChild(this,newChild);
			}
		},
		setAttributeNode : function(newAttr){
			return this.attributes.setNamedItem(newAttr);
		},
		setAttributeNodeNS : function(newAttr){
			return this.attributes.setNamedItemNS(newAttr);
		},
		removeAttributeNode : function(oldAttr){
			//console.log(this == oldAttr.ownerElement)
			return this.attributes.removeNamedItem(oldAttr.nodeName);
		},
		//get real attribute name,and remove it by removeAttributeNode
		removeAttributeNS : function(namespaceURI, localName){
			var old = this.getAttributeNodeNS(namespaceURI, localName);
			old && this.removeAttributeNode(old);
		},
		
		hasAttributeNS : function(namespaceURI, localName){
			return this.getAttributeNodeNS(namespaceURI, localName)!=null;
		},
		getAttributeNS : function(namespaceURI, localName){
			var attr = this.getAttributeNodeNS(namespaceURI, localName);
			return attr && attr.value || '';
		},
		setAttributeNS : function(namespaceURI, qualifiedName, value){
			var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
			attr.value = attr.nodeValue = "" + value;
			this.setAttributeNode(attr)
		},
		getAttributeNodeNS : function(namespaceURI, localName){
			return this.attributes.getNamedItemNS(namespaceURI, localName);
		},
		
		getElementsByTagName : function(tagName){
			return new LiveNodeList(this,function(base){
				var ls = [];
				_visitNode(base,function(node){
					if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
						ls.push(node);
					}
				});
				return ls;
			});
		},
		getElementsByTagNameNS : function(namespaceURI, localName){
			return new LiveNodeList(this,function(base){
				var ls = [];
				_visitNode(base,function(node){
					if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
						ls.push(node);
					}
				});
				return ls;
				
			});
		}
	};
	Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
	Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
	
	
	_extends(Element,Node);
	function Attr() {
	};
	Attr.prototype.nodeType = ATTRIBUTE_NODE;
	_extends(Attr,Node);
	
	
	function CharacterData() {
	};
	CharacterData.prototype = {
		data : '',
		substringData : function(offset, count) {
			return this.data.substring(offset, offset+count);
		},
		appendData: function(text) {
			text = this.data+text;
			this.nodeValue = this.data = text;
			this.length = text.length;
		},
		insertData: function(offset,text) {
			this.replaceData(offset,0,text);
		
		},
		appendChild:function(newChild){
			throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
		},
		deleteData: function(offset, count) {
			this.replaceData(offset,count,"");
		},
		replaceData: function(offset, count, text) {
			var start = this.data.substring(0,offset);
			var end = this.data.substring(offset+count);
			text = start + text + end;
			this.nodeValue = this.data = text;
			this.length = text.length;
		}
	}
	_extends(CharacterData,Node);
	function Text() {
	};
	Text.prototype = {
		nodeName : "#text",
		nodeType : TEXT_NODE,
		splitText : function(offset) {
			var text = this.data;
			var newText = text.substring(offset);
			text = text.substring(0, offset);
			this.data = this.nodeValue = text;
			this.length = text.length;
			var newNode = this.ownerDocument.createTextNode(newText);
			if(this.parentNode){
				this.parentNode.insertBefore(newNode, this.nextSibling);
			}
			return newNode;
		}
	}
	_extends(Text,CharacterData);
	function Comment() {
	};
	Comment.prototype = {
		nodeName : "#comment",
		nodeType : COMMENT_NODE
	}
	_extends(Comment,CharacterData);
	
	function CDATASection() {
	};
	CDATASection.prototype = {
		nodeName : "#cdata-section",
		nodeType : CDATA_SECTION_NODE
	}
	_extends(CDATASection,CharacterData);
	
	
	function DocumentType() {
	};
	DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
	_extends(DocumentType,Node);
	
	function Notation() {
	};
	Notation.prototype.nodeType = NOTATION_NODE;
	_extends(Notation,Node);
	
	function Entity() {
	};
	Entity.prototype.nodeType = ENTITY_NODE;
	_extends(Entity,Node);
	
	function EntityReference() {
	};
	EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
	_extends(EntityReference,Node);
	
	function DocumentFragment() {
	};
	DocumentFragment.prototype.nodeName =	"#document-fragment";
	DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
	_extends(DocumentFragment,Node);
	
	
	function ProcessingInstruction() {
	}
	ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
	_extends(ProcessingInstruction,Node);
	function XMLSerializer(){}
	XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
		return nodeSerializeToString.call(node,isHtml,nodeFilter);
	}
	Node.prototype.toString = nodeSerializeToString;
	function nodeSerializeToString(isHtml,nodeFilter){
		var buf = [];
		var refNode = this.nodeType == 9?this.documentElement:this;
		var prefix = refNode.prefix;
		var uri = refNode.namespaceURI;
		
		if(uri && prefix == null){
			//console.log(prefix)
			var prefix = refNode.lookupPrefix(uri);
			if(prefix == null){
				//isHTML = true;
				var visibleNamespaces=[
				{namespace:uri,prefix:null}
				//{namespace:uri,prefix:''}
				]
			}
		}
		serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
		//console.log('###',this.nodeType,uri,prefix,buf.join(''))
		return buf.join('');
	}
	function needNamespaceDefine(node,isHTML, visibleNamespaces) {
		var prefix = node.prefix||'';
		var uri = node.namespaceURI;
		if (!prefix && !uri){
			return false;
		}
		if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
			|| uri == 'http://www.w3.org/2000/xmlns/'){
			return false;
		}
		
		var i = visibleNamespaces.length 
		//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
		while (i--) {
			var ns = visibleNamespaces[i];
			// get namespace prefix
			//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
			if (ns.prefix == prefix){
				return ns.namespace != uri;
			}
		}
		//console.log(isHTML,uri,prefix=='')
		//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
		//	return false;
		//}
		//node.flag = '11111'
		//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
		return true;
	}
	function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
		if(nodeFilter){
			node = nodeFilter(node);
			if(node){
				if(typeof node == 'string'){
					buf.push(node);
					return;
				}
			}else{
				return;
			}
			//buf.sort.apply(attrs, attributeSorter);
		}
		switch(node.nodeType){
		case ELEMENT_NODE:
			if (!visibleNamespaces) visibleNamespaces = [];
			var startVisibleNamespaces = visibleNamespaces.length;
			var attrs = node.attributes;
			var len = attrs.length;
			var child = node.firstChild;
			var nodeName = node.tagName;
			
			isHTML =  (htmlns === node.namespaceURI) ||isHTML 
			buf.push('<',nodeName);
			
			
			
			for(var i=0;i<len;i++){
				// add namespaces for attributes
				var attr = attrs.item(i);
				if (attr.prefix == 'xmlns') {
					visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
				}else if(attr.nodeName == 'xmlns'){
					visibleNamespaces.push({ prefix: '', namespace: attr.value });
				}
			}
			for(var i=0;i<len;i++){
				var attr = attrs.item(i);
				if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
					var prefix = attr.prefix||'';
					var uri = attr.namespaceURI;
					var ns = prefix ? ' xmlns:' + prefix : " xmlns";
					buf.push(ns, '="' , uri , '"');
					visibleNamespaces.push({ prefix: prefix, namespace:uri });
				}
				serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
			}
			// add namespace for current node		
			if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
				var prefix = node.prefix||'';
				var uri = node.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="' , uri , '"');
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			
			if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
				buf.push('>');
				//if is cdata child node
				if(isHTML && /^script$/i.test(nodeName)){
					while(child){
						if(child.data){
							buf.push(child.data);
						}else{
							serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
						}
						child = child.nextSibling;
					}
				}else
				{
					while(child){
						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
						child = child.nextSibling;
					}
				}
				buf.push('</',nodeName,'>');
			}else{
				buf.push('/>');
			}
			// remove added visible namespaces
			//visibleNamespaces.length = startVisibleNamespaces;
			return;
		case DOCUMENT_NODE:
		case DOCUMENT_FRAGMENT_NODE:
			var child = node.firstChild;
			while(child){
				serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
				child = child.nextSibling;
			}
			return;
		case ATTRIBUTE_NODE:
			return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
		case TEXT_NODE:
			return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
		case CDATA_SECTION_NODE:
			return buf.push( '<![CDATA[',node.data,']]>');
		case COMMENT_NODE:
			return buf.push( "<!--",node.data,"-->");
		case DOCUMENT_TYPE_NODE:
			var pubid = node.publicId;
			var sysid = node.systemId;
			buf.push('<!DOCTYPE ',node.name);
			if(pubid){
				buf.push(' PUBLIC "',pubid);
				if (sysid && sysid!='.') {
					buf.push( '" "',sysid);
				}
				buf.push('">');
			}else if(sysid && sysid!='.'){
				buf.push(' SYSTEM "',sysid,'">');
			}else{
				var sub = node.internalSubset;
				if(sub){
					buf.push(" [",sub,"]");
				}
				buf.push(">");
			}
			return;
		case PROCESSING_INSTRUCTION_NODE:
			return buf.push( "<?",node.target," ",node.data,"?>");
		case ENTITY_REFERENCE_NODE:
			return buf.push( '&',node.nodeName,';');
		//case ENTITY_NODE:
		//case NOTATION_NODE:
		default:
			buf.push('??',node.nodeName);
		}
	}
	function importNode(doc,node,deep){
		var node2;
		switch (node.nodeType) {
		case ELEMENT_NODE:
			node2 = node.cloneNode(false);
			node2.ownerDocument = doc;
			//var attrs = node2.attributes;
			//var len = attrs.length;
			//for(var i=0;i<len;i++){
				//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
			//}
		case DOCUMENT_FRAGMENT_NODE:
			break;
		case ATTRIBUTE_NODE:
			deep = true;
			break;
		//case ENTITY_REFERENCE_NODE:
		//case PROCESSING_INSTRUCTION_NODE:
		////case TEXT_NODE:
		//case CDATA_SECTION_NODE:
		//case COMMENT_NODE:
		//	deep = false;
		//	break;
		//case DOCUMENT_NODE:
		//case DOCUMENT_TYPE_NODE:
		//cannot be imported.
		//case ENTITY_NODE:
		//case NOTATION_NODE：
		//can not hit in level3
		//default:throw e;
		}
		if(!node2){
			node2 = node.cloneNode(false);//false
		}
		node2.ownerDocument = doc;
		node2.parentNode = null;
		if(deep){
			var child = node.firstChild;
			while(child){
				node2.appendChild(importNode(doc,child,deep));
				child = child.nextSibling;
			}
		}
		return node2;
	}
	//
	//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
	//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
	function cloneNode(doc,node,deep){
		var node2 = new node.constructor();
		for(var n in node){
			var v = node[n];
			if(typeof v != 'object' ){
				if(v != node2[n]){
					node2[n] = v;
				}
			}
		}
		if(node.childNodes){
			node2.childNodes = new NodeList();
		}
		node2.ownerDocument = doc;
		switch (node2.nodeType) {
		case ELEMENT_NODE:
			var attrs	= node.attributes;
			var attrs2	= node2.attributes = new NamedNodeMap();
			var len = attrs.length
			attrs2._ownerElement = node2;
			for(var i=0;i<len;i++){
				node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
			}
			break;;
		case ATTRIBUTE_NODE:
			deep = true;
		}
		if(deep){
			var child = node.firstChild;
			while(child){
				node2.appendChild(cloneNode(doc,child,deep));
				child = child.nextSibling;
			}
		}
		return node2;
	}
	
	function __set__(object,key,value){
		object[key] = value
	}
	//do dynamic
	try{
		if(Object.defineProperty){
			Object.defineProperty(LiveNodeList.prototype,'length',{
				get:function(){
					_updateLiveList(this);
					return this.$$length;
				}
			});
			Object.defineProperty(Node.prototype,'textContent',{
				get:function(){
					return getTextContent(this);
				},
				set:function(data){
					switch(this.nodeType){
					case ELEMENT_NODE:
					case DOCUMENT_FRAGMENT_NODE:
						while(this.firstChild){
							this.removeChild(this.firstChild);
						}
						if(data || String(data)){
							this.appendChild(this.ownerDocument.createTextNode(data));
						}
						break;
					default:
						//TODO:
						this.data = data;
						this.value = data;
						this.nodeValue = data;
					}
				}
			})
			
			function getTextContent(node){
				switch(node.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					var buf = [];
					node = node.firstChild;
					while(node){
						if(node.nodeType!==7 && node.nodeType !==8){
							buf.push(getTextContent(node));
						}
						node = node.nextSibling;
					}
					return buf.join('');
				default:
					return node.nodeValue;
				}
			}
			__set__ = function(object,key,value){
				//console.log(value)
				object['$$'+key] = value
			}
		}
	}catch(e){//ie8
	}
	
	//if(typeof require == 'function'){
		exports.DOMImplementation = DOMImplementation;
		exports.XMLSerializer = XMLSerializer;
	//}


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	/*jshint onevar: false, indent:4 */
	/*global setImmediate: false, setTimeout: false, console: false */
	(function () {
	
	    var async = {};
	
	    // global on the server, window in the browser
	    var root, previous_async;
	
	    root = this;
	    if (root != null) {
	      previous_async = root.async;
	    }
	
	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };
	
	    function only_once(fn) {
	        var called = false;
	        return function() {
	            if (called) throw new Error("Callback was already called.");
	            called = true;
	            fn.apply(root, arguments);
	        }
	    }
	
	    //// cross-browser compatiblity functions ////
	
	    var _toString = Object.prototype.toString;
	
	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };
	
	    var _each = function (arr, iterator) {
	        for (var i = 0; i < arr.length; i += 1) {
	            iterator(arr[i], i, arr);
	        }
	    };
	
	    var _map = function (arr, iterator) {
	        if (arr.map) {
	            return arr.map(iterator);
	        }
	        var results = [];
	        _each(arr, function (x, i, a) {
	            results.push(iterator(x, i, a));
	        });
	        return results;
	    };
	
	    var _reduce = function (arr, iterator, memo) {
	        if (arr.reduce) {
	            return arr.reduce(iterator, memo);
	        }
	        _each(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    };
	
	    var _keys = function (obj) {
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };
	
	    //// exported async module functions ////
	
	    //// nextTick implementation with browser-compatible fallback ////
	    if (typeof process === 'undefined' || !(process.nextTick)) {
	        if (typeof setImmediate === 'function') {
	            async.nextTick = function (fn) {
	                // not a direct alias for IE10 compatibility
	                setImmediate(fn);
	            };
	            async.setImmediate = async.nextTick;
	        }
	        else {
	            async.nextTick = function (fn) {
	                setTimeout(fn, 0);
	            };
	            async.setImmediate = async.nextTick;
	        }
	    }
	    else {
	        async.nextTick = process.nextTick;
	        if (typeof setImmediate !== 'undefined') {
	            async.setImmediate = function (fn) {
	              // not a direct alias for IE10 compatibility
	              setImmediate(fn);
	            };
	        }
	        else {
	            async.setImmediate = async.nextTick;
	        }
	    }
	
	    async.each = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        _each(arr, function (x) {
	            iterator(x, only_once(done) );
	        });
	        function done(err) {
	          if (err) {
	              callback(err);
	              callback = function () {};
	          }
	          else {
	              completed += 1;
	              if (completed >= arr.length) {
	                  callback();
	              }
	          }
	        }
	    };
	    async.forEach = async.each;
	
	    async.eachSeries = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        var iterate = function () {
	            iterator(arr[completed], function (err) {
	                if (err) {
	                    callback(err);
	                    callback = function () {};
	                }
	                else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                        callback();
	                    }
	                    else {
	                        iterate();
	                    }
	                }
	            });
	        };
	        iterate();
	    };
	    async.forEachSeries = async.eachSeries;
	
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        var fn = _eachLimit(limit);
	        fn.apply(null, [arr, iterator, callback]);
	    };
	    async.forEachLimit = async.eachLimit;
	
	    var _eachLimit = function (limit) {
	
	        return function (arr, iterator, callback) {
	            callback = callback || function () {};
	            if (!arr.length || limit <= 0) {
	                return callback();
	            }
	            var completed = 0;
	            var started = 0;
	            var running = 0;
	
	            (function replenish () {
	                if (completed >= arr.length) {
	                    return callback();
	                }
	
	                while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                        if (err) {
	                            callback(err);
	                            callback = function () {};
	                        }
	                        else {
	                            completed += 1;
	                            running -= 1;
	                            if (completed >= arr.length) {
	                                callback();
	                            }
	                            else {
	                                replenish();
	                            }
	                        }
	                    });
	                }
	            })();
	        };
	    };
	
	
	    var doParallel = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.each].concat(args));
	        };
	    };
	    var doParallelLimit = function(limit, fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [_eachLimit(limit)].concat(args));
	        };
	    };
	    var doSeries = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.eachSeries].concat(args));
	        };
	    };
	
	
	    var _asyncMap = function (eachfn, arr, iterator, callback) {
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        if (!callback) {
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err) {
	                    callback(err);
	                });
	            });
	        } else {
	            var results = [];
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = function (arr, limit, iterator, callback) {
	        return _mapLimit(limit)(arr, iterator, callback);
	    };
	
	    var _mapLimit = function(limit) {
	        return doParallelLimit(limit, _asyncMap);
	    };
	
	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachSeries(arr, function (x, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	    // inject alias
	    async.inject = async.reduce;
	    // foldl alias
	    async.foldl = async.reduce;
	
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, function (x) {
	            return x;
	        }).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	    // foldr alias
	    async.foldr = async.reduceRight;
	
	    var _filter = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.filter = doParallel(_filter);
	    async.filterSeries = doSeries(_filter);
	    // select alias
	    async.select = async.filter;
	    async.selectSeries = async.filterSeries;
	
	    var _reject = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (!v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.reject = doParallel(_reject);
	    async.rejectSeries = doSeries(_reject);
	
	    var _detect = function (eachfn, arr, iterator, main_callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x, function (result) {
	                if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                }
	                else {
	                    callback();
	                }
	            });
	        }, function (err) {
	            main_callback();
	        });
	    };
	    async.detect = doParallel(_detect);
	    async.detectSeries = doSeries(_detect);
	
	    async.some = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(false);
	        });
	    };
	    // any alias
	    async.any = async.some;
	
	    async.every = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(true);
	        });
	    };
	    // all alias
	    async.all = async.every;
	
	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                var fn = function (left, right) {
	                    var a = left.criteria, b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                };
	                callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                }));
	            }
	        });
	    };
	
	    async.auto = function (tasks, callback) {
	        callback = callback || function () {};
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length
	        if (!remainingTasks) {
	            return callback();
	        }
	
	        var results = {};
	
	        var listeners = [];
	        var addListener = function (fn) {
	            listeners.unshift(fn);
	        };
	        var removeListener = function (fn) {
	            for (var i = 0; i < listeners.length; i += 1) {
	                if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        var taskComplete = function () {
	            remainingTasks--
	            _each(listeners.slice(0), function (fn) {
	                fn();
	            });
	        };
	
	        addListener(function () {
	            if (!remainingTasks) {
	                var theCallback = callback;
	                // prevent final callback from calling itself if it errors
	                callback = function () {};
	
	                theCallback(null, results);
	            }
	        });
	
	        _each(keys, function (k) {
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function(rkey) {
	                        safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            };
	            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	            var ready = function () {
	                return _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            };
	            if (ready()) {
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                var listener = function () {
	                    if (ready()) {
	                        removeListener(listener);
	                        task[task.length - 1](taskCallback, results);
	                    }
	                };
	                addListener(listener);
	            }
	        });
	    };
	
	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var attempts = [];
	        // Use defaults if times not passed
	        if (typeof times === 'function') {
	            callback = task;
	            task = times;
	            times = DEFAULT_TIMES;
	        }
	        // Make sure times is a number
	        times = parseInt(times, 10) || DEFAULT_TIMES;
	        var wrappedTask = function(wrappedCallback, wrappedResults) {
	            var retryAttempt = function(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            };
	            while (times) {
	                attempts.push(retryAttempt(task, !(times-=1)));
	            }
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || callback)(data.err, data.result);
	            });
	        }
	        // If a callback is passed, run this as a controll flow
	        return callback ? wrappedTask() : wrappedTask
	    };
	
	    async.waterfall = function (tasks, callback) {
	        callback = callback || function () {};
	        if (!_isArray(tasks)) {
	          var err = new Error('First argument to waterfall must be an array of functions');
	          return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        var wrapIterator = function (iterator) {
	            return function (err) {
	                if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                }
	                else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                        iterator.apply(null, args);
	                    });
	                }
	            };
	        };
	        wrapIterator(async.iterator(tasks))();
	    };
	
	    var _parallel = function(eachfn, tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            eachfn.map(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            eachfn.each(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.parallel = function (tasks, callback) {
	        _parallel({ map: async.map, each: async.each }, tasks, callback);
	    };
	
	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	    };
	
	    async.series = function (tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            async.mapSeries(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            async.eachSeries(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.iterator = function (tasks) {
	        var makeCallback = function (index) {
	            var fn = function () {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            };
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        };
	        return makeCallback(0);
	    };
	
	    async.apply = function (fn) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return function () {
	            return fn.apply(
	                null, args.concat(Array.prototype.slice.call(arguments))
	            );
	        };
	    };
	
	    var _concat = function (eachfn, arr, fn, callback) {
	        var r = [];
	        eachfn(arr, function (x, cb) {
	            fn(x, function (err, y) {
	                r = r.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, r);
	        });
	    };
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);
	
	    async.whilst = function (test, iterator, callback) {
	        if (test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.whilst(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doWhilst = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (test.apply(null, args)) {
	                async.doWhilst(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.until = function (test, iterator, callback) {
	        if (!test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.until(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doUntil = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (!test.apply(null, args)) {
	                async.doUntil(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.queue = function (worker, concurrency) {
	        if (concurrency === undefined) {
	            concurrency = 1;
	        }
	        function _insert(q, data, pos, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	
	              if (pos) {
	                q.tasks.unshift(item);
	              } else {
	                q.tasks.push(item);
	              }
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	
	        var workers = 0;
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            saturated: null,
	            empty: null,
	            drain: null,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	              _insert(q, data, false, callback);
	            },
	            kill: function () {
	              q.drain = null;
	              q.tasks = [];
	            },
	            unshift: function (data, callback) {
	              _insert(q, data, true, callback);
	            },
	            process: function () {
	                if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                        workers -= 1;
	                        if (task.callback) {
	                            task.callback.apply(task, arguments);
	                        }
	                        if (q.drain && q.tasks.length + workers === 0) {
	                            q.drain();
	                        }
	                        q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                if (q.paused === true) { return; }
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= q.concurrency; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    };
	
	    async.priorityQueue = function (worker, concurrency) {
	
	        function _compareTasks(a, b){
	          return a.priority - b.priority;
	        };
	
	        function _binarySearch(sequence, item, compare) {
	          var beg = -1,
	              end = sequence.length - 1;
	          while (beg < end) {
	            var mid = beg + ((end - beg + 1) >>> 1);
	            if (compare(item, sequence[mid]) >= 0) {
	              beg = mid;
	            } else {
	              end = mid - 1;
	            }
	          }
	          return beg;
	        }
	
	        function _insert(q, data, priority, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	
	              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	
	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);
	
	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	          _insert(q, data, priority, callback);
	        };
	
	        // Remove unshift function
	        delete q.unshift;
	
	        return q;
	    };
	
	    async.cargo = function (worker, payload) {
	        var working     = false,
	            tasks       = [];
	
	        var cargo = {
	            tasks: tasks,
	            payload: payload,
	            saturated: null,
	            empty: null,
	            drain: null,
	            drained: true,
	            push: function (data, callback) {
	                if (!_isArray(data)) {
	                    data = [data];
	                }
	                _each(data, function(task) {
	                    tasks.push({
	                        data: task,
	                        callback: typeof callback === 'function' ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                        cargo.saturated();
	                    }
	                });
	                async.setImmediate(cargo.process);
	            },
	            process: function process() {
	                if (working) return;
	                if (tasks.length === 0) {
	                    if(cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                }
	
	                var ts = typeof payload === 'number'
	                            ? tasks.splice(0, payload)
	                            : tasks.splice(0, tasks.length);
	
	                var ds = _map(ts, function (task) {
	                    return task.data;
	                });
	
	                if(cargo.empty) cargo.empty();
	                working = true;
	                worker(ds, function () {
	                    working = false;
	
	                    var args = arguments;
	                    _each(ts, function (data) {
	                        if (data.callback) {
	                            data.callback.apply(null, args);
	                        }
	                    });
	
	                    process();
	                });
	            },
	            length: function () {
	                return tasks.length;
	            },
	            running: function () {
	                return working;
	            }
	        };
	        return cargo;
	    };
	
	    var _console_fn = function (name) {
	        return function (fn) {
	            var args = Array.prototype.slice.call(arguments, 1);
	            fn.apply(null, args.concat([function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (typeof console !== 'undefined') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _each(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            }]));
	        };
	    };
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/
	
	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || function (x) {
	            return x;
	        };
	        var memoized = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                }]));
	            }
	        };
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };
	
	    async.unmemoize = function (fn) {
	      return function () {
	        return (fn.unmemoized || fn).apply(null, arguments);
	      };
	    };
	
	    async.times = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.map(counter, iterator, callback);
	    };
	
	    async.timesSeries = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.mapSeries(counter, iterator, callback);
	    };
	
	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                }]))
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        };
	    };
	
	    async.compose = function (/* functions... */) {
	      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };
	
	    var _applyEach = function (eachfn, fns /*args...*/) {
	        var go = function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat([cb]));
	            },
	            callback);
	        };
	        if (arguments.length > 2) {
	            var args = Array.prototype.slice.call(arguments, 2);
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    };
	    async.applyEach = doParallel(_applyEach);
	    async.applyEachSeries = doSeries(_applyEach);
	
	    async.forever = function (fn, callback) {
	        function next(err) {
	            if (err) {
	                if (callback) {
	                    return callback(err);
	                }
	                throw err;
	            }
	            fn(next);
	        }
	        next();
	    };
	
	    // Node.js
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }
	
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), __webpack_require__(237).setImmediate))

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(238);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(27)))

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, setImmediate, __dirname) {/**
	 * A JavaScript implementation of the JSON-LD API.
	 *
	 * @author Dave Longley
	 *
	 * @license BSD 3-Clause License
	 * Copyright (c) 2011-2015 Digital Bazaar, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * Redistributions in binary form must reproduce the above copyright
	 * notice, this list of conditions and the following disclaimer in the
	 * documentation and/or other materials provided with the distribution.
	 *
	 * Neither the name of the Digital Bazaar, Inc. nor the names of its
	 * contributors may be used to endorse or promote products derived from
	 * this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
	 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
	 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
	 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	(function() {
	
	// determine if in-browser or using node.js
	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var _browser = !_nodejs &&
	  (typeof window !== 'undefined' || typeof self !== 'undefined');
	if(_browser) {
	  if(typeof global === 'undefined') {
	    if(typeof window !== 'undefined') {
	      global = window;
	    } else if(typeof self !== 'undefined') {
	      global = self;
	    } else if(typeof $ !== 'undefined') {
	      global = $;
	    }
	  }
	}
	
	// attaches jsonld API to the given object
	var wrapper = function(jsonld) {
	
	/* Core API */
	
	/**
	 * Performs JSON-LD compaction.
	 *
	 * @param input the JSON-LD input to compact.
	 * @param ctx the context to compact with.
	 * @param [options] options to use:
	 *          [base] the base IRI to use.
	 *          [compactArrays] true to compact arrays to single values when
	 *            appropriate, false not to (default: true).
	 *          [graph] true to always output a top-level graph (default: false).
	 *          [expandContext] a context to expand with.
	 *          [skipExpansion] true to assume the input is expanded and skip
	 *            expansion, false not to, defaults to false.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, compacted, ctx) called once the operation completes.
	 */
	jsonld.compact = function(input, ctx, options, callback) {
	  if(arguments.length < 2) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not compact, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  if(ctx === null) {
	    return jsonld.nextTick(function() {
	      callback(new JsonLdError(
	        'The compaction context must not be null.',
	        'jsonld.CompactError', {code: 'invalid local context'}));
	    });
	  }
	
	  // nothing to compact
	  if(input === null) {
	    return jsonld.nextTick(function() {
	      callback(null, null);
	    });
	  }
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('compactArrays' in options)) {
	    options.compactArrays = true;
	  }
	  if(!('graph' in options)) {
	    options.graph = false;
	  }
	  if(!('skipExpansion' in options)) {
	    options.skipExpansion = false;
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	  if(!('link' in options)) {
	    options.link = false;
	  }
	  if(options.link) {
	    // force skip expansion when linking, "link" is not part of the public
	    // API, it should only be called from framing
	    options.skipExpansion = true;
	  }
	
	  var expand = function(input, options, callback) {
	    if(options.skipExpansion) {
	      return jsonld.nextTick(function() {
	        callback(null, input);
	      });
	    }
	    jsonld.expand(input, options, callback);
	  };
	
	  // expand input then do compaction
	  expand(input, options, function(err, expanded) {
	    if(err) {
	      return callback(new JsonLdError(
	        'Could not expand input before compaction.',
	        'jsonld.CompactError', {cause: err}));
	    }
	
	    // process context
	    var activeCtx = _getInitialContext(options);
	    jsonld.processContext(activeCtx, ctx, options, function(err, activeCtx) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not process context before compaction.',
	          'jsonld.CompactError', {cause: err}));
	      }
	
	      var compacted;
	      try {
	        // do compaction
	        compacted = new Processor().compact(activeCtx, null, expanded, options);
	      } catch(ex) {
	        return callback(ex);
	      }
	
	      cleanup(null, compacted, activeCtx, options);
	    });
	  });
	
	  // performs clean up after compaction
	  function cleanup(err, compacted, activeCtx, options) {
	    if(err) {
	      return callback(err);
	    }
	
	    if(options.compactArrays && !options.graph && _isArray(compacted)) {
	      if(compacted.length === 1) {
	        // simplify to a single item
	        compacted = compacted[0];
	      } else if(compacted.length === 0) {
	        // simplify to an empty object
	        compacted = {};
	      }
	    } else if(options.graph && _isObject(compacted)) {
	      // always use array if graph option is on
	      compacted = [compacted];
	    }
	
	    // follow @context key
	    if(_isObject(ctx) && '@context' in ctx) {
	      ctx = ctx['@context'];
	    }
	
	    // build output context
	    ctx = _clone(ctx);
	    if(!_isArray(ctx)) {
	      ctx = [ctx];
	    }
	    // remove empty contexts
	    var tmp = ctx;
	    ctx = [];
	    for(var i = 0; i < tmp.length; ++i) {
	      if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
	        ctx.push(tmp[i]);
	      }
	    }
	
	    // remove array if only one context
	    var hasContext = (ctx.length > 0);
	    if(ctx.length === 1) {
	      ctx = ctx[0];
	    }
	
	    // add context and/or @graph
	    if(_isArray(compacted)) {
	      // use '@graph' keyword
	      var kwgraph = _compactIri(activeCtx, '@graph');
	      var graph = compacted;
	      compacted = {};
	      if(hasContext) {
	        compacted['@context'] = ctx;
	      }
	      compacted[kwgraph] = graph;
	    } else if(_isObject(compacted) && hasContext) {
	      // reorder keys so @context is first
	      var graph = compacted;
	      compacted = {'@context': ctx};
	      for(var key in graph) {
	        compacted[key] = graph[key];
	      }
	    }
	
	    callback(null, compacted, activeCtx);
	  }
	};
	
	/**
	 * Performs JSON-LD expansion.
	 *
	 * @param input the JSON-LD input to expand.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
	 *            false not to, defaults to false.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, expanded) called once the operation completes.
	 */
	jsonld.expand = function(input, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not expand, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	  if(!('keepFreeFloatingNodes' in options)) {
	    options.keepFreeFloatingNodes = false;
	  }
	
	  jsonld.nextTick(function() {
	    // if input is a string, attempt to dereference remote document
	    if(typeof input === 'string') {
	      var done = function(err, remoteDoc) {
	        if(err) {
	          return callback(err);
	        }
	        try {
	          if(!remoteDoc.document) {
	            throw new JsonLdError(
	              'No remote document found at the given URL.',
	              'jsonld.NullRemoteDocument');
	          }
	          if(typeof remoteDoc.document === 'string') {
	            remoteDoc.document = JSON.parse(remoteDoc.document);
	          }
	        } catch(ex) {
	          return callback(new JsonLdError(
	            'Could not retrieve a JSON-LD document from the URL. URL ' +
	            'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
	              code: 'loading document failed',
	              cause: ex,
	              remoteDoc: remoteDoc
	          }));
	        }
	        expand(remoteDoc);
	      };
	      var promise = options.documentLoader(input, done);
	      if(promise && 'then' in promise) {
	        promise.then(done.bind(null, null), done);
	      }
	      return;
	    }
	    // nothing to load
	    expand({contextUrl: null, documentUrl: null, document: input});
	  });
	
	  function expand(remoteDoc) {
	    // set default base
	    if(!('base' in options)) {
	      options.base = remoteDoc.documentUrl || '';
	    }
	    // build meta-object and retrieve all @context URLs
	    var input = {
	      document: _clone(remoteDoc.document),
	      remoteContext: {'@context': remoteDoc.contextUrl}
	    };
	    if('expandContext' in options) {
	      var expandContext = _clone(options.expandContext);
	      if(typeof expandContext === 'object' && '@context' in expandContext) {
	        input.expandContext = expandContext;
	      } else {
	        input.expandContext = {'@context': expandContext};
	      }
	    }
	    _retrieveContextUrls(input, options, function(err, input) {
	      if(err) {
	        return callback(err);
	      }
	
	      var expanded;
	      try {
	        var processor = new Processor();
	        var activeCtx = _getInitialContext(options);
	        var document = input.document;
	        var remoteContext = input.remoteContext['@context'];
	
	        // process optional expandContext
	        if(input.expandContext) {
	          activeCtx = processor.processContext(
	            activeCtx, input.expandContext['@context'], options);
	        }
	
	        // process remote context from HTTP Link Header
	        if(remoteContext) {
	          activeCtx = processor.processContext(
	            activeCtx, remoteContext, options);
	        }
	
	        // expand document
	        expanded = processor.expand(
	          activeCtx, null, document, options, false);
	
	        // optimize away @graph with no other properties
	        if(_isObject(expanded) && ('@graph' in expanded) &&
	          Object.keys(expanded).length === 1) {
	          expanded = expanded['@graph'];
	        } else if(expanded === null) {
	          expanded = [];
	        }
	
	        // normalize to an array
	        if(!_isArray(expanded)) {
	          expanded = [expanded];
	        }
	      } catch(ex) {
	        return callback(ex);
	      }
	      callback(null, expanded);
	    });
	  }
	};
	
	/**
	 * Performs JSON-LD flattening.
	 *
	 * @param input the JSON-LD to flatten.
	 * @param ctx the context to use to compact the flattened output, or null.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, flattened) called once the operation completes.
	 */
	jsonld.flatten = function(input, ctx, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not flatten, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  } else if(typeof ctx === 'function') {
	    callback = ctx;
	    ctx = null;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  // expand input
	  jsonld.expand(input, options, function(err, _input) {
	    if(err) {
	      return callback(new JsonLdError(
	        'Could not expand input before flattening.',
	        'jsonld.FlattenError', {cause: err}));
	    }
	
	    var flattened;
	    try {
	      // do flattening
	      flattened = new Processor().flatten(_input);
	    } catch(ex) {
	      return callback(ex);
	    }
	
	    if(ctx === null) {
	      return callback(null, flattened);
	    }
	
	    // compact result (force @graph option to true, skip expansion)
	    options.graph = true;
	    options.skipExpansion = true;
	    jsonld.compact(flattened, ctx, options, function(err, compacted) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not compact flattened output.',
	          'jsonld.FlattenError', {cause: err}));
	      }
	      callback(null, compacted);
	    });
	  });
	};
	
	/**
	 * Performs JSON-LD framing.
	 *
	 * @param input the JSON-LD input to frame.
	 * @param frame the JSON-LD frame to use.
	 * @param [options] the framing options.
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
	 *            (default: '@last').
	 *          [explicit] default @explicit flag (default: false).
	 *          [requireAll] default @requireAll flag (default: true).
	 *          [omitDefault] default @omitDefault flag (default: false).
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, framed) called once the operation completes.
	 */
	jsonld.frame = function(input, frame, options, callback) {
	  if(arguments.length < 2) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not frame, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	  if(!('embed' in options)) {
	    options.embed = '@last';
	  }
	  options.explicit = options.explicit || false;
	  if(!('requireAll' in options)) {
	    options.requireAll = true;
	  }
	  options.omitDefault = options.omitDefault || false;
	
	  jsonld.nextTick(function() {
	    // if frame is a string, attempt to dereference remote document
	    if(typeof frame === 'string') {
	      var done = function(err, remoteDoc) {
	        if(err) {
	          return callback(err);
	        }
	        try {
	          if(!remoteDoc.document) {
	            throw new JsonLdError(
	              'No remote document found at the given URL.',
	              'jsonld.NullRemoteDocument');
	          }
	          if(typeof remoteDoc.document === 'string') {
	            remoteDoc.document = JSON.parse(remoteDoc.document);
	          }
	        } catch(ex) {
	          return callback(new JsonLdError(
	            'Could not retrieve a JSON-LD document from the URL. URL ' +
	            'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
	              code: 'loading document failed',
	              cause: ex,
	              remoteDoc: remoteDoc
	          }));
	        }
	        doFrame(remoteDoc);
	      };
	      var promise = options.documentLoader(frame, done);
	      if(promise && 'then' in promise) {
	        promise.then(done.bind(null, null), done);
	      }
	      return;
	    }
	    // nothing to load
	    doFrame({contextUrl: null, documentUrl: null, document: frame});
	  });
	
	  function doFrame(remoteFrame) {
	    // preserve frame context and add any Link header context
	    var frame = remoteFrame.document;
	    var ctx;
	    if(frame) {
	      ctx = frame['@context'];
	      if(remoteFrame.contextUrl) {
	        if(!ctx) {
	          ctx = remoteFrame.contextUrl;
	        } else if(_isArray(ctx)) {
	          ctx.push(remoteFrame.contextUrl);
	        } else {
	          ctx = [ctx, remoteFrame.contextUrl];
	        }
	        frame['@context'] = ctx;
	      } else {
	        ctx = ctx || {};
	      }
	    } else {
	      ctx = {};
	    }
	
	    // expand input
	    jsonld.expand(input, options, function(err, expanded) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not expand input before framing.',
	          'jsonld.FrameError', {cause: err}));
	      }
	
	      // expand frame
	      var opts = _clone(options);
	      opts.isFrame = true;
	      opts.keepFreeFloatingNodes = true;
	      jsonld.expand(frame, opts, function(err, expandedFrame) {
	        if(err) {
	          return callback(new JsonLdError(
	            'Could not expand frame before framing.',
	            'jsonld.FrameError', {cause: err}));
	        }
	
	        var framed;
	        try {
	          // do framing
	          framed = new Processor().frame(expanded, expandedFrame, opts);
	        } catch(ex) {
	          return callback(ex);
	        }
	
	        // compact result (force @graph option to true, skip expansion,
	        // check for linked embeds)
	        opts.graph = true;
	        opts.skipExpansion = true;
	        opts.link = {};
	        jsonld.compact(framed, ctx, opts, function(err, compacted, ctx) {
	          if(err) {
	            return callback(new JsonLdError(
	              'Could not compact framed output.',
	              'jsonld.FrameError', {cause: err}));
	          }
	          // get graph alias
	          var graph = _compactIri(ctx, '@graph');
	          // remove @preserve from results
	          opts.link = {};
	          compacted[graph] = _removePreserve(ctx, compacted[graph], opts);
	          callback(null, compacted);
	        });
	      });
	    });
	  }
	};
	
	/**
	 * **Experimental**
	 *
	 * Links a JSON-LD document's nodes in memory.
	 *
	 * @param input the JSON-LD document to link.
	 * @param ctx the JSON-LD context to apply.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, linked) called once the operation completes.
	 */
	jsonld.link = function(input, ctx, options, callback) {
	  // API matches running frame with a wildcard frame and embed: '@link'
	  // get arguments
	  var frame = {};
	  if(ctx) {
	    frame['@context'] = ctx;
	  }
	  frame['@embed'] = '@link';
	  jsonld.frame(input, frame, options, callback);
	};
	
	/**
	 * **Deprecated**
	 *
	 * Performs JSON-LD objectification.
	 *
	 * @param input the JSON-LD document to objectify.
	 * @param ctx the JSON-LD context to apply.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, linked) called once the operation completes.
	 */
	jsonld.objectify = function(input, ctx, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  // expand input
	  jsonld.expand(input, options, function(err, _input) {
	    if(err) {
	      return callback(new JsonLdError(
	        'Could not expand input before linking.',
	        'jsonld.LinkError', {cause: err}));
	    }
	
	    var flattened;
	    try {
	      // flatten the graph
	      flattened = new Processor().flatten(_input);
	    } catch(ex) {
	      return callback(ex);
	    }
	
	    // compact result (force @graph option to true, skip expansion)
	    options.graph = true;
	    options.skipExpansion = true;
	    jsonld.compact(flattened, ctx, options, function(err, compacted, ctx) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not compact flattened output before linking.',
	          'jsonld.LinkError', {cause: err}));
	      }
	      // get graph alias
	      var graph = _compactIri(ctx, '@graph');
	      var top = compacted[graph][0];
	
	      var recurse = function(subject) {
	        // can't replace just a string
	        if(!_isObject(subject) && !_isArray(subject)) {
	          return;
	        }
	
	        // bottom out recursion on re-visit
	        if(_isObject(subject)) {
	          if(recurse.visited[subject['@id']]) {
	            return;
	          }
	          recurse.visited[subject['@id']] = true;
	        }
	
	        // each array element *or* object key
	        for(var k in subject) {
	          var obj = subject[k];
	          var isid = (jsonld.getContextValue(ctx, k, '@type') === '@id');
	
	          // can't replace a non-object or non-array unless it's an @id
	          if(!_isArray(obj) && !_isObject(obj) && !isid) {
	            continue;
	          }
	
	          if(_isString(obj) && isid) {
	            subject[k] = obj = top[obj];
	            recurse(obj);
	          } else if(_isArray(obj)) {
	            for(var i = 0; i < obj.length; ++i) {
	              if(_isString(obj[i]) && isid) {
	                obj[i] = top[obj[i]];
	              } else if(_isObject(obj[i]) && '@id' in obj[i]) {
	                obj[i] = top[obj[i]['@id']];
	              }
	              recurse(obj[i]);
	            }
	          } else if(_isObject(obj)) {
	            var sid = obj['@id'];
	            subject[k] = obj = top[sid];
	            recurse(obj);
	          }
	        }
	      };
	      recurse.visited = {};
	      recurse(top);
	
	      compacted.of_type = {};
	      for(var s in top) {
	        if(!('@type' in top[s])) {
	          continue;
	        }
	        var types = top[s]['@type'];
	        if(!_isArray(types)) {
	          types = [types];
	        }
	        for(var t = 0; t < types.length; ++t) {
	          if(!(types[t] in compacted.of_type)) {
	            compacted.of_type[types[t]] = [];
	          }
	          compacted.of_type[types[t]].push(top[s]);
	        }
	      }
	      callback(null, compacted);
	    });
	  });
	};
	
	/**
	 * Performs RDF dataset normalization on the given input. The input is JSON-LD
	 * unless the 'inputFormat' option is used. The output is an RDF dataset
	 * unless the 'format' option is used.
	 *
	 * @param input the input to normalize as JSON-LD or as a format specified by
	 *          the 'inputFormat' option.
	 * @param [options] the options to use:
	 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
	 *            `URGNA2012` (default: `URGNA2012`).
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [inputFormat] the format if input is not JSON-LD:
	 *            'application/nquads' for N-Quads.
	 *          [format] the format if output is a string:
	 *            'application/nquads' for N-Quads.
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, normalized) called once the operation completes.
	 */
	jsonld.normalize = function(input, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not normalize, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('algorithm' in options)) {
	    options.algorithm = 'URGNA2012';
	  }
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  if('inputFormat' in options) {
	    if(options.inputFormat !== 'application/nquads') {
	      return callback(new JsonLdError(
	        'Unknown normalization input format.',
	        'jsonld.NormalizeError'));
	    }
	    var parsedInput = _parseNQuads(input);
	    // do normalization
	    new Processor().normalize(parsedInput, options, callback);
	  } else {
	    // convert to RDF dataset then do normalization
	    var opts = _clone(options);
	    delete opts.format;
	    opts.produceGeneralizedRdf = false;
	    jsonld.toRDF(input, opts, function(err, dataset) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not convert input to RDF dataset before normalization.',
	          'jsonld.NormalizeError', {cause: err}));
	      }
	      // do normalization
	      new Processor().normalize(dataset, options, callback);
	    });
	  }
	};
	
	/**
	 * Converts an RDF dataset to JSON-LD.
	 *
	 * @param dataset a serialized string of RDF in a format specified by the
	 *          format option or an RDF dataset to convert.
	 * @param [options] the options to use:
	 *          [format] the format if dataset param must first be parsed:
	 *            'application/nquads' for N-Quads (default).
	 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
	 *          [useRdfType] true to use rdf:type, false to use @type
	 *            (default: false).
	 *          [useNativeTypes] true to convert XSD types into native types
	 *            (boolean, integer, double), false not to (default: false).
	 * @param callback(err, output) called once the operation completes.
	 */
	jsonld.fromRDF = function(dataset, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not convert from RDF, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('useRdfType' in options)) {
	    options.useRdfType = false;
	  }
	  if(!('useNativeTypes' in options)) {
	    options.useNativeTypes = false;
	  }
	
	  if(!('format' in options) && _isString(dataset)) {
	    // set default format to nquads
	    if(!('format' in options)) {
	      options.format = 'application/nquads';
	    }
	  }
	
	  jsonld.nextTick(function() {
	    // handle special format
	    var rdfParser;
	    if(options.format) {
	      // check supported formats
	      rdfParser = options.rdfParser || _rdfParsers[options.format];
	      if(!rdfParser) {
	        return callback(new JsonLdError(
	          'Unknown input format.',
	          'jsonld.UnknownFormat', {format: options.format}));
	      }
	    } else {
	      // no-op parser, assume dataset already parsed
	      rdfParser = function() {
	        return dataset;
	      };
	    }
	
	    var callbackCalled = false;
	    try {
	      // rdf parser may be async or sync, always pass callback
	      dataset = rdfParser(dataset, function(err, dataset) {
	        callbackCalled = true;
	        if(err) {
	          return callback(err);
	        }
	        fromRDF(dataset, options, callback);
	      });
	    } catch(e) {
	      if(!callbackCalled) {
	        return callback(e);
	      }
	      throw e;
	    }
	    // handle synchronous or promise-based parser
	    if(dataset) {
	      // if dataset is actually a promise
	      if('then' in dataset) {
	        return dataset.then(function(dataset) {
	          fromRDF(dataset, options, callback);
	        }, callback);
	      }
	      // parser is synchronous
	      fromRDF(dataset, options, callback);
	    }
	
	    function fromRDF(dataset, options, callback) {
	      // convert from RDF
	      new Processor().fromRDF(dataset, options, callback);
	    }
	  });
	};
	
	/**
	 * Outputs the RDF dataset found in the given JSON-LD object.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [format] the format to use to output a string:
	 *            'application/nquads' for N-Quads.
	 *          [produceGeneralizedRdf] true to output generalized RDF, false
	 *            to produce only standard RDF (default: false).
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, dataset) called once the operation completes.
	 */
	jsonld.toRDF = function(input, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not convert to RDF, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  // expand input
	  jsonld.expand(input, options, function(err, expanded) {
	    if(err) {
	      return callback(new JsonLdError(
	        'Could not expand input before serialization to RDF.',
	        'jsonld.RdfError', {cause: err}));
	    }
	
	    var dataset;
	    try {
	      // output RDF dataset
	      dataset = Processor.prototype.toRDF(expanded, options);
	      if(options.format) {
	        if(options.format === 'application/nquads') {
	          return callback(null, _toNQuads(dataset));
	        }
	        throw new JsonLdError(
	          'Unknown output format.',
	          'jsonld.UnknownFormat', {format: options.format});
	      }
	    } catch(ex) {
	      return callback(ex);
	    }
	    callback(null, dataset);
	  });
	};
	
	/**
	 * **Experimental**
	 *
	 * Recursively flattens the nodes in the given JSON-LD input into a map of
	 * node ID => node.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [namer] (deprecated)
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, nodeMap) called once the operation completes.
	 */
	jsonld.createNodeMap = function(input, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not create node map, too few arguments.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = (typeof input === 'string') ? input : '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  // expand input
	  jsonld.expand(input, options, function(err, _input) {
	    if(err) {
	      return callback(new JsonLdError(
	        'Could not expand input before creating node map.',
	        'jsonld.CreateNodeMapError', {cause: err}));
	    }
	
	    var nodeMap;
	    try {
	      nodeMap = new Processor().createNodeMap(_input, options);
	    } catch(ex) {
	      return callback(ex);
	    }
	
	    callback(null, nodeMap);
	  });
	};
	
	/**
	 * **Experimental**
	 *
	 * Merges two or more JSON-LD documents into a single flattened document.
	 *
	 * @param docs the JSON-LD documents to merge together.
	 * @param ctx the context to use to compact the merged result, or null.
	 * @param [options] the options to use:
	 *          [base] the base IRI to use.
	 *          [expandContext] a context to expand with.
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [namer] (deprecated).
	 *          [mergeNodes] true to merge properties for nodes with the same ID,
	 *            false to ignore new properties for nodes with the same ID once
	 *            the ID has been defined; note that this may not prevent merging
	 *            new properties where a node is in the `object` position
	 *            (default: true).
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, merged) called once the operation completes.
	 */
	jsonld.merge = function(docs, ctx, options, callback) {
	  if(arguments.length < 1) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not merge, too few arguments.'));
	    });
	  }
	  if(!_isArray(docs)) {
	    return jsonld.nextTick(function() {
	      callback(new TypeError('Could not merge, "docs" must be an array.'));
	    });
	  }
	
	  // get arguments
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  } else if(typeof ctx === 'function') {
	    callback = ctx;
	    ctx = null;
	    options = {};
	  }
	  options = options || {};
	
	  // expand all documents
	  var expanded = [];
	  var error = null;
	  var count = docs.length;
	  for(var i = 0; i < docs.length; ++i) {
	    var opts = {};
	    for(var key in options) {
	      opts[key] = options[key];
	    }
	    jsonld.expand(docs[i], opts, expandComplete);
	  }
	
	  function expandComplete(err, _input) {
	    if(error) {
	      return;
	    }
	    if(err) {
	      error = err;
	      return callback(new JsonLdError(
	        'Could not expand input before flattening.',
	        'jsonld.FlattenError', {cause: err}));
	    }
	    expanded.push(_input);
	    if(--count === 0) {
	      merge(expanded);
	    }
	  }
	
	  function merge(expanded) {
	    var mergeNodes = true;
	    if('mergeNodes' in options) {
	      mergeNodes = options.mergeNodes;
	    }
	
	    var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
	    var graphs = {'@default': {}};
	
	    var defaultGraph;
	    try {
	      for(var i = 0; i < expanded.length; ++i) {
	        // uniquely relabel blank nodes
	        var doc = expanded[i];
	        doc = jsonld.relabelBlankNodes(doc, {
	          issuer: new IdentifierIssuer('_:b' + i + '-')
	        });
	
	        // add nodes to the shared node map graphs if merging nodes, to a
	        // separate graph set if not
	        var _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};
	        _createNodeMap(doc, _graphs, '@default', issuer);
	
	        if(_graphs !== graphs) {
	          // merge document graphs but don't merge existing nodes
	          for(var graphName in _graphs) {
	            var _nodeMap = _graphs[graphName];
	            if(!(graphName in graphs)) {
	              graphs[graphName] = _nodeMap;
	              continue;
	            }
	            var nodeMap = graphs[graphName];
	            for(var key in _nodeMap) {
	              if(!(key in nodeMap)) {
	                nodeMap[key] = _nodeMap[key];
	              }
	            }
	          }
	        }
	      }
	
	      // add all non-default graphs to default graph
	      defaultGraph = _mergeNodeMaps(graphs);
	    } catch(ex) {
	      return callback(ex);
	    }
	
	    // produce flattened output
	    var flattened = [];
	    var keys = Object.keys(defaultGraph).sort();
	    for(var ki = 0; ki < keys.length; ++ki) {
	      var node = defaultGraph[keys[ki]];
	      // only add full subjects to top-level
	      if(!_isSubjectReference(node)) {
	        flattened.push(node);
	      }
	    }
	
	    if(ctx === null) {
	      return callback(null, flattened);
	    }
	
	    // compact result (force @graph option to true, skip expansion)
	    options.graph = true;
	    options.skipExpansion = true;
	    jsonld.compact(flattened, ctx, options, function(err, compacted) {
	      if(err) {
	        return callback(new JsonLdError(
	          'Could not compact merged output.',
	          'jsonld.MergeError', {cause: err}));
	      }
	      callback(null, compacted);
	    });
	  }
	};
	
	/**
	 * Relabels all blank nodes in the given JSON-LD input.
	 *
	 * @param input the JSON-LD input.
	 * @param [options] the options to use:
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [namer] (deprecated).
	 */
	jsonld.relabelBlankNodes = function(input, options) {
	  options = options || {};
	  var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
	  return _labelBlankNodes(issuer, input);
	};
	
	/**
	 * Prepends a base IRI to the given relative IRI.
	 *
	 * @param base the base IRI.
	 * @param iri the relative IRI.
	 *
	 * @return the absolute IRI.
	 */
	jsonld.prependBase = function(base, iri) {
	  return _prependBase(base, iri);
	};
	
	/**
	 * The default document loader for external documents. If the environment
	 * is node.js, a callback-continuation-style document loader is used; otherwise,
	 * a promises-style document loader is used.
	 *
	 * @param url the URL to load.
	 * @param callback(err, remoteDoc) called once the operation completes,
	 *          if using a non-promises API.
	 *
	 * @return a promise, if using a promises API.
	 */
	jsonld.documentLoader = function(url, callback) {
	  var err = new JsonLdError(
	    'Could not retrieve a JSON-LD document from the URL. URL ' +
	    'dereferencing not implemented.', 'jsonld.LoadDocumentError',
	    {code: 'loading document failed'});
	  if(_nodejs) {
	    return callback(err, {contextUrl: null, documentUrl: url, document: null});
	  }
	  return jsonld.promisify(function(callback) {
	    callback(err);
	  });
	};
	
	/**
	 * Deprecated default document loader. Use or override jsonld.documentLoader
	 * instead.
	 */
	jsonld.loadDocument = function(url, callback) {
	  var promise = jsonld.documentLoader(url, callback);
	  if(promise && 'then' in promise) {
	    promise.then(callback.bind(null, null), callback);
	  }
	};
	
	/* Promises API */
	
	/**
	 * Creates a new promises API object.
	 *
	 * @param [options] the options to use:
	 *          [api] an object to attach the API to.
	 *          [version] 'json-ld-1.0' to output a standard JSON-LD 1.0 promises
	 *            API, 'jsonld.js' to output the same with augmented proprietary
	 *            methods (default: 'jsonld.js')
	 *
	 * @return the promises API object.
	 */
	jsonld.promises = function(options) {
	  options = options || {};
	  var slice = Array.prototype.slice;
	  var promisify = jsonld.promisify;
	
	  // handle 'api' option as version, set defaults
	  var api = options.api || {};
	  var version = options.version || 'jsonld.js';
	  if(typeof options.api === 'string') {
	    if(!options.version) {
	      version = options.api;
	    }
	    api = {};
	  }
	
	  api.expand = function(input) {
	    if(arguments.length < 1) {
	      throw new TypeError('Could not expand, too few arguments.');
	    }
	    return promisify.apply(null, [jsonld.expand].concat(slice.call(arguments)));
	  };
	  api.compact = function(input, ctx) {
	    if(arguments.length < 2) {
	      throw new TypeError('Could not compact, too few arguments.');
	    }
	    var compact = function(input, ctx, options, callback) {
	      // ensure only one value is returned in callback
	      jsonld.compact(input, ctx, options, function(err, compacted) {
	        callback(err, compacted);
	      });
	    };
	    return promisify.apply(null, [compact].concat(slice.call(arguments)));
	  };
	  api.flatten = function(input) {
	    if(arguments.length < 1) {
	      throw new TypeError('Could not flatten, too few arguments.');
	    }
	    return promisify.apply(
	      null, [jsonld.flatten].concat(slice.call(arguments)));
	  };
	  api.frame = function(input, frame) {
	    if(arguments.length < 2) {
	      throw new TypeError('Could not frame, too few arguments.');
	    }
	    return promisify.apply(null, [jsonld.frame].concat(slice.call(arguments)));
	  };
	  api.fromRDF = function(dataset) {
	    if(arguments.length < 1) {
	      throw new TypeError('Could not convert from RDF, too few arguments.');
	    }
	    return promisify.apply(
	      null, [jsonld.fromRDF].concat(slice.call(arguments)));
	  };
	  api.toRDF = function(input) {
	    if(arguments.length < 1) {
	      throw new TypeError('Could not convert to RDF, too few arguments.');
	    }
	    return promisify.apply(null, [jsonld.toRDF].concat(slice.call(arguments)));
	  };
	  api.normalize = function(input) {
	    if(arguments.length < 1) {
	      throw new TypeError('Could not normalize, too few arguments.');
	    }
	    return promisify.apply(
	      null, [jsonld.normalize].concat(slice.call(arguments)));
	  };
	
	  if(version === 'jsonld.js') {
	    api.link = function(input, ctx) {
	      if(arguments.length < 2) {
	        throw new TypeError('Could not link, too few arguments.');
	      }
	      return promisify.apply(
	        null, [jsonld.link].concat(slice.call(arguments)));
	    };
	    api.objectify = function(input) {
	      return promisify.apply(
	        null, [jsonld.objectify].concat(slice.call(arguments)));
	    };
	    api.createNodeMap = function(input) {
	      return promisify.apply(
	        null, [jsonld.createNodeMap].concat(slice.call(arguments)));
	    };
	    api.merge = function(input) {
	      return promisify.apply(
	        null, [jsonld.merge].concat(slice.call(arguments)));
	    };
	  }
	
	  try {
	    jsonld.Promise = global.Promise || __webpack_require__(240).Promise;
	  } catch(e) {
	    var f = function() {
	      throw new Error('Unable to find a Promise implementation.');
	    };
	    for(var method in api) {
	      api[method] = f;
	    }
	  }
	
	  return api;
	};
	
	/**
	 * Converts a node.js async op into a promise w/boxed resolved value(s).
	 *
	 * @param op the operation to convert.
	 *
	 * @return the promise.
	 */
	jsonld.promisify = function(op) {
	  if(!jsonld.Promise) {
	    try {
	      jsonld.Promise = global.Promise || __webpack_require__(240).Promise;
	    } catch(e) {
	      throw new Error('Unable to find a Promise implementation.');
	    }
	  }
	  var args = Array.prototype.slice.call(arguments, 1);
	  return new jsonld.Promise(function(resolve, reject) {
	    op.apply(null, args.concat(function(err, value) {
	      if(!err) {
	        resolve(value);
	      } else {
	        reject(err);
	      }
	    }));
	  });
	};
	
	// extend jsonld.promises w/jsonld.js methods
	jsonld.promises({api: jsonld.promises});
	
	/* WebIDL API */
	
	function JsonLdProcessor() {}
	JsonLdProcessor.prototype = jsonld.promises({version: 'json-ld-1.0'});
	JsonLdProcessor.prototype.toString = function() {
	  if(this instanceof JsonLdProcessor) {
	    return '[object JsonLdProcessor]';
	  }
	  return '[object JsonLdProcessorPrototype]';
	};
	jsonld.JsonLdProcessor = JsonLdProcessor;
	
	// IE8 has Object.defineProperty but it only
	// works on DOM nodes -- so feature detection
	// requires try/catch :-(
	var canDefineProperty = !!Object.defineProperty;
	if(canDefineProperty) {
	  try {
	    Object.defineProperty({}, 'x', {});
	  } catch(e) {
	    canDefineProperty = false;
	  }
	}
	
	if(canDefineProperty) {
	  Object.defineProperty(JsonLdProcessor, 'prototype', {
	    writable: false,
	    enumerable: false
	  });
	  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
	    writable: true,
	    enumerable: false,
	    configurable: true,
	    value: JsonLdProcessor
	  });
	}
	
	// setup browser global JsonLdProcessor
	if(_browser && typeof global.JsonLdProcessor === 'undefined') {
	  if(canDefineProperty) {
	    Object.defineProperty(global, 'JsonLdProcessor', {
	      writable: true,
	      enumerable: false,
	      configurable: true,
	      value: JsonLdProcessor
	    });
	  } else {
	    global.JsonLdProcessor = JsonLdProcessor;
	  }
	}
	
	/* Utility API */
	
	// define setImmediate and nextTick
	//// nextTick implementation with browser-compatible fallback ////
	// from https://github.com/caolan/async/blob/master/lib/async.js
	
	// capture the global reference to guard against fakeTimer mocks
	var _setImmediate = typeof setImmediate === 'function' && setImmediate;
	
	var _delay = _setImmediate ? function(fn) {
	  // not a direct alias (for IE10 compatibility)
	  _setImmediate(fn);
	} : function(fn) {
	  setTimeout(fn, 0);
	};
	
	if(typeof process === 'object' && typeof process.nextTick === 'function') {
	  jsonld.nextTick = process.nextTick;
	} else {
	  jsonld.nextTick = _delay;
	}
	jsonld.setImmediate = _setImmediate ? _delay : jsonld.nextTick;
	
	/**
	 * Parses a link header. The results will be key'd by the value of "rel".
	 *
	 * Link: <http://json-ld.org/contexts/person.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
	 *
	 * Parses as: {
	 *   'http://www.w3.org/ns/json-ld#context': {
	 *     target: http://json-ld.org/contexts/person.jsonld,
	 *     type: 'application/ld+json'
	 *   }
	 * }
	 *
	 * If there is more than one "rel" with the same IRI, then entries in the
	 * resulting map for that "rel" will be arrays.
	 *
	 * @param header the link header to parse.
	 */
	jsonld.parseLinkHeader = function(header) {
	  var rval = {};
	  // split on unbracketed/unquoted commas
	  var entries = header.match(/(?:<[^>]*?>|"[^"]*?"|[^,])+/g);
	  var rLinkHeader = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
	  for(var i = 0; i < entries.length; ++i) {
	    var match = entries[i].match(rLinkHeader);
	    if(!match) {
	      continue;
	    }
	    var result = {target: match[1]};
	    var params = match[2];
	    var rParams = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
	    while(match = rParams.exec(params)) {
	      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
	    }
	    var rel = result['rel'] || '';
	    if(_isArray(rval[rel])) {
	      rval[rel].push(result);
	    } else if(rel in rval) {
	      rval[rel] = [rval[rel], result];
	    } else {
	      rval[rel] = result;
	    }
	  }
	  return rval;
	};
	
	/**
	 * Creates a simple queue for requesting documents.
	 */
	jsonld.RequestQueue = function() {
	  this._requests = {};
	};
	jsonld.RequestQueue.prototype.wrapLoader = function(loader) {
	  this._loader = loader;
	  this._usePromise = (loader.length === 1);
	  return this.add.bind(this);
	};
	jsonld.RequestQueue.prototype.add = function(url, callback) {
	  var self = this;
	
	  // callback must be given if not using promises
	  if(!callback && !self._usePromise) {
	    throw new Error('callback must be specified.');
	  }
	
	  // Promise-based API
	  if(self._usePromise) {
	    return new jsonld.Promise(function(resolve, reject) {
	      var load = self._requests[url];
	      if(!load) {
	        // load URL then remove from queue
	        load = self._requests[url] = self._loader(url)
	          .then(function(remoteDoc) {
	            delete self._requests[url];
	            return remoteDoc;
	          }).catch(function(err) {
	            delete self._requests[url];
	            throw err;
	          });
	      }
	      // resolve/reject promise once URL has been loaded
	      load.then(function(remoteDoc) {
	        resolve(remoteDoc);
	      }).catch(function(err) {
	        reject(err);
	      });
	    });
	  }
	
	  // callback-based API
	  if(url in self._requests) {
	    self._requests[url].push(callback);
	  } else {
	    self._requests[url] = [callback];
	    self._loader(url, function(err, remoteDoc) {
	      var callbacks = self._requests[url];
	      delete self._requests[url];
	      for(var i = 0; i < callbacks.length; ++i) {
	        callbacks[i](err, remoteDoc);
	      }
	    });
	  }
	};
	
	/**
	 * Creates a simple document cache that retains documents for a short
	 * period of time.
	 *
	 * FIXME: Implement simple HTTP caching instead.
	 *
	 * @param size the maximum size of the cache.
	 */
	jsonld.DocumentCache = function(size) {
	  this.order = [];
	  this.cache = {};
	  this.size = size || 50;
	  this.expires = 30 * 1000;
	};
	jsonld.DocumentCache.prototype.get = function(url) {
	  if(url in this.cache) {
	    var entry = this.cache[url];
	    if(entry.expires >= +new Date()) {
	      return entry.ctx;
	    }
	    delete this.cache[url];
	    this.order.splice(this.order.indexOf(url), 1);
	  }
	  return null;
	};
	jsonld.DocumentCache.prototype.set = function(url, ctx) {
	  if(this.order.length === this.size) {
	    delete this.cache[this.order.shift()];
	  }
	  this.order.push(url);
	  this.cache[url] = {ctx: ctx, expires: (+new Date() + this.expires)};
	};
	
	/**
	 * Creates an active context cache.
	 *
	 * @param size the maximum size of the cache.
	 */
	jsonld.ActiveContextCache = function(size) {
	  this.order = [];
	  this.cache = {};
	  this.size = size || 100;
	};
	jsonld.ActiveContextCache.prototype.get = function(activeCtx, localCtx) {
	  var key1 = JSON.stringify(activeCtx);
	  var key2 = JSON.stringify(localCtx);
	  var level1 = this.cache[key1];
	  if(level1 && key2 in level1) {
	    return level1[key2];
	  }
	  return null;
	};
	jsonld.ActiveContextCache.prototype.set = function(
	  activeCtx, localCtx, result) {
	  if(this.order.length === this.size) {
	    var entry = this.order.shift();
	    delete this.cache[entry.activeCtx][entry.localCtx];
	  }
	  var key1 = JSON.stringify(activeCtx);
	  var key2 = JSON.stringify(localCtx);
	  this.order.push({activeCtx: key1, localCtx: key2});
	  if(!(key1 in this.cache)) {
	    this.cache[key1] = {};
	  }
	  this.cache[key1][key2] = _clone(result);
	};
	
	/**
	 * Default JSON-LD cache.
	 */
	jsonld.cache = {
	  activeCtx: new jsonld.ActiveContextCache()
	};
	
	/**
	 * Document loaders.
	 */
	jsonld.documentLoaders = {};
	
	/**
	 * Creates a built-in jquery document loader.
	 *
	 * @param $ the jquery instance to use.
	 * @param options the options to use:
	 *          secure: require all URLs to use HTTPS.
	 *          usePromise: true to use a promises API, false for a
	 *            callback-continuation-style API; defaults to true if Promise
	 *            is globally defined, false if not.
	 *
	 * @return the jquery document loader.
	 */
	jsonld.documentLoaders.jquery = function($, options) {
	  options = options || {};
	  var queue = new jsonld.RequestQueue();
	
	  // use option or, by default, use Promise when its defined
	  var usePromise = ('usePromise' in options ?
	    options.usePromise : (typeof Promise !== 'undefined'));
	  if(usePromise) {
	    return queue.wrapLoader(function(url) {
	      return jsonld.promisify(loader, url);
	    });
	  }
	  return queue.wrapLoader(loader);
	
	  function loader(url, callback) {
	    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; only "http" and "https" URLs are ' +
	        'supported.',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    if(options.secure && url.indexOf('https') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; secure mode is enabled and ' +
	        'the URL\'s scheme is not "https".',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    $.ajax({
	      url: url,
	      accepts: {
	        json: 'application/ld+json, application/json'
	      },
	      // ensure Accept header is very specific for JSON-LD/JSON
	      headers: {
	        'Accept': 'application/ld+json, application/json'
	      },
	      dataType: 'json',
	      crossDomain: true,
	      success: function(data, textStatus, jqXHR) {
	        var doc = {contextUrl: null, documentUrl: url, document: data};
	
	        // handle Link Header
	        var contentType = jqXHR.getResponseHeader('Content-Type');
	        var linkHeader = jqXHR.getResponseHeader('Link');
	        if(linkHeader && contentType !== 'application/ld+json') {
	          // only 1 related link header permitted
	          linkHeader = jsonld.parseLinkHeader(linkHeader)[LINK_HEADER_REL];
	          if(_isArray(linkHeader)) {
	            return callback(new JsonLdError(
	              'URL could not be dereferenced, it has more than one ' +
	              'associated HTTP Link Header.',
	              'jsonld.InvalidUrl',
	              {code: 'multiple context link headers', url: url}), doc);
	          }
	          if(linkHeader) {
	            doc.contextUrl = linkHeader.target;
	          }
	        }
	
	        callback(null, doc);
	      },
	      error: function(jqXHR, textStatus, err) {
	        callback(new JsonLdError(
	          'URL could not be dereferenced, an error occurred.',
	          'jsonld.LoadDocumentError',
	          {code: 'loading document failed', url: url, cause: err}),
	          {contextUrl: null, documentUrl: url, document: null});
	      }
	    });
	  }
	};
	
	/**
	 * Creates a built-in node document loader.
	 *
	 * @param options the options to use:
	 *          secure: require all URLs to use HTTPS.
	 *          strictSSL: true to require SSL certificates to be valid,
	 *            false not to (default: true).
	 *          maxRedirects: the maximum number of redirects to permit, none by
	 *            default.
	 *          request: the object which will make the request, default is
	 *            provided by `https://www.npmjs.com/package/request`.
	 *          headers: an array of headers which will be passed as request
	 *            headers for the requested document. Accept is not allowed.
	 *          usePromise: true to use a promises API, false for a
	 *            callback-continuation-style API; false by default.
	 *
	 * @return the node document loader.
	 */
	jsonld.documentLoaders.node = function(options) {
	  options = options || {};
	  var strictSSL = ('strictSSL' in options) ? options.strictSSL : true;
	  var maxRedirects = ('maxRedirects' in options) ? options.maxRedirects : -1;
	  var request = ('request' in options) ? options.request : __webpack_require__(243);
	  var acceptHeader = 'application/ld+json, application/json';
	  var http = __webpack_require__(243);
	  // TODO: disable cache until HTTP caching implemented
	  //var cache = new jsonld.DocumentCache();
	
	  var queue = new jsonld.RequestQueue();
	  if(options.usePromise) {
	    return queue.wrapLoader(function(url) {
	      return jsonld.promisify(loadDocument, url, []);
	    });
	  }
	  var headers = options.headers || {};
	  if('Accept' in headers || 'accept' in headers) {
	    throw new RangeError(
	      'Accept header may not be specified as an option; only "' +
	      acceptHeader + '" is supported.');
	  }
	  return queue.wrapLoader(function(url, callback) {
	    loadDocument(url, [], callback);
	  });
	
	  function loadDocument(url, redirects, callback) {
	    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; only "http" and "https" URLs are ' +
	        'supported.',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    if(options.secure && url.indexOf('https') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; secure mode is enabled and ' +
	        'the URL\'s scheme is not "https".',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    // TODO: disable cache until HTTP caching implemented
	    var doc = null;//cache.get(url);
	    if(doc !== null) {
	      return callback(null, doc);
	    }
	    var headers = {'Accept': acceptHeader};
	    for(var k in options.headers) { headers[k] = options.headers[k]; }
	    request({
	      url: url,
	      headers: headers,
	      strictSSL: strictSSL,
	      followRedirect: false
	    }, handleResponse);
	
	    function handleResponse(err, res, body) {
	      doc = {contextUrl: null, documentUrl: url, document: body || null};
	
	      // handle error
	      if(err) {
	        return callback(new JsonLdError(
	          'URL could not be dereferenced, an error occurred.',
	          'jsonld.LoadDocumentError',
	          {code: 'loading document failed', url: url, cause: err}), doc);
	      }
	      var statusText = http.STATUS_CODES[res.statusCode];
	      if(res.statusCode >= 400) {
	        return callback(new JsonLdError(
	          'URL could not be dereferenced: ' + statusText,
	          'jsonld.InvalidUrl', {
	            code: 'loading document failed',
	            url: url,
	            httpStatusCode: res.statusCode
	          }), doc);
	      }
	
	      // handle Link Header
	      if(res.headers.link &&
	        res.headers['content-type'] !== 'application/ld+json') {
	        // only 1 related link header permitted
	        var linkHeader = jsonld.parseLinkHeader(
	          res.headers.link)[LINK_HEADER_REL];
	        if(_isArray(linkHeader)) {
	          return callback(new JsonLdError(
	            'URL could not be dereferenced, it has more than one associated ' +
	            'HTTP Link Header.',
	            'jsonld.InvalidUrl',
	            {code: 'multiple context link headers', url: url}), doc);
	        }
	        if(linkHeader) {
	          doc.contextUrl = linkHeader.target;
	        }
	      }
	
	      // handle redirect
	      if(res.statusCode >= 300 && res.statusCode < 400 &&
	        res.headers.location) {
	        if(redirects.length === maxRedirects) {
	          return callback(new JsonLdError(
	            'URL could not be dereferenced; there were too many redirects.',
	            'jsonld.TooManyRedirects', {
	              code: 'loading document failed',
	              url: url,
	              httpStatusCode: res.statusCode,
	              redirects: redirects
	            }), doc);
	        }
	        if(redirects.indexOf(url) !== -1) {
	          return callback(new JsonLdError(
	            'URL could not be dereferenced; infinite redirection was detected.',
	            'jsonld.InfiniteRedirectDetected', {
	              code: 'recursive context inclusion',
	              url: url,
	              httpStatusCode: res.statusCode,
	              redirects: redirects
	            }), doc);
	        }
	        redirects.push(url);
	        return loadDocument(res.headers.location, redirects, callback);
	      }
	      // cache for each redirected URL
	      redirects.push(url);
	      // TODO: disable cache until HTTP caching implemented
	      /*for(var i = 0; i < redirects.length; ++i) {
	        cache.set(
	          redirects[i],
	          {contextUrl: null, documentUrl: redirects[i], document: body});
	      }*/
	      callback(err, doc);
	    }
	  }
	};
	
	/**
	 * Creates a built-in XMLHttpRequest document loader.
	 *
	 * @param options the options to use:
	 *          secure: require all URLs to use HTTPS.
	 *          usePromise: true to use a promises API, false for a
	 *            callback-continuation-style API; defaults to true if Promise
	 *            is globally defined, false if not.
	 *          [xhr]: the XMLHttpRequest API to use.
	 *
	 * @return the XMLHttpRequest document loader.
	 */
	jsonld.documentLoaders.xhr = function(options) {
	  options = options || {};
	  var rlink = /(^|(\r\n))link:/i;
	  var queue = new jsonld.RequestQueue();
	
	  // use option or, by default, use Promise when its defined
	  var usePromise = ('usePromise' in options ?
	    options.usePromise : (typeof Promise !== 'undefined'));
	  if(usePromise) {
	    return queue.wrapLoader(function(url) {
	      return jsonld.promisify(loader, url);
	    });
	  }
	  return queue.wrapLoader(loader);
	
	  function loader(url, callback) {
	    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; only "http" and "https" URLs are ' +
	        'supported.',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    if(options.secure && url.indexOf('https') !== 0) {
	      return callback(new JsonLdError(
	        'URL could not be dereferenced; secure mode is enabled and ' +
	        'the URL\'s scheme is not "https".',
	        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    }
	    var xhr = options.xhr || XMLHttpRequest;
	    var req = new xhr();
	    req.onload = function() {
	      if(req.status >= 400) {
	        return callback(new JsonLdError(
	          'URL could not be dereferenced: ' + req.statusText,
	          'jsonld.LoadDocumentError', {
	            code: 'loading document failed',
	            url: url,
	            httpStatusCode: req.status
	          }), {contextUrl: null, documentUrl: url, document: null});
	      }
	
	      var doc = {contextUrl: null, documentUrl: url, document: req.response};
	
	      // handle Link Header (avoid unsafe header warning by existence testing)
	      var contentType = req.getResponseHeader('Content-Type');
	      var linkHeader;
	      if(rlink.test(req.getAllResponseHeaders())) {
	        linkHeader = req.getResponseHeader('Link');
	      }
	      if(linkHeader && contentType !== 'application/ld+json') {
	        // only 1 related link header permitted
	        linkHeader = jsonld.parseLinkHeader(linkHeader)[LINK_HEADER_REL];
	        if(_isArray(linkHeader)) {
	          return callback(new JsonLdError(
	            'URL could not be dereferenced, it has more than one ' +
	            'associated HTTP Link Header.',
	            'jsonld.InvalidUrl',
	            {code: 'multiple context link headers', url: url}), doc);
	        }
	        if(linkHeader) {
	          doc.contextUrl = linkHeader.target;
	        }
	      }
	
	      callback(null, doc);
	    };
	    req.onerror = function() {
	      callback(new JsonLdError(
	        'URL could not be dereferenced, an error occurred.',
	        'jsonld.LoadDocumentError',
	        {code: 'loading document failed', url: url}),
	        {contextUrl: null, documentUrl: url, document: null});
	    };
	    req.open('GET', url, true);
	    req.setRequestHeader('Accept', 'application/ld+json, application/json');
	    req.send();
	  }
	};
	
	/**
	 * Assigns the default document loader for external document URLs to a built-in
	 * default. Supported types currently include: 'jquery' and 'node'.
	 *
	 * To use the jquery document loader, the first parameter must be a reference
	 * to the main jquery object.
	 *
	 * @param type the type to set.
	 * @param [params] the parameters required to use the document loader.
	 */
	jsonld.useDocumentLoader = function(type) {
	  if(!(type in jsonld.documentLoaders)) {
	    throw new JsonLdError(
	      'Unknown document loader type: "' + type + '"',
	      'jsonld.UnknownDocumentLoader',
	      {type: type});
	  }
	
	  // set document loader
	  jsonld.documentLoader = jsonld.documentLoaders[type].apply(
	    jsonld, Array.prototype.slice.call(arguments, 1));
	};
	
	/**
	 * Processes a local context, resolving any URLs as necessary, and returns a
	 * new active context in its callback.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context to process.
	 * @param [options] the options to use:
	 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
	 * @param callback(err, ctx) called once the operation completes.
	 */
	jsonld.processContext = function(activeCtx, localCtx) {
	  // get arguments
	  var options = {};
	  var callbackArg = 2;
	  if(arguments.length > 3) {
	    options = arguments[2] || {};
	    callbackArg += 1;
	  }
	  var callback = arguments[callbackArg];
	
	  // set default options
	  if(!('base' in options)) {
	    options.base = '';
	  }
	  if(!('documentLoader' in options)) {
	    options.documentLoader = jsonld.loadDocument;
	  }
	
	  // return initial context early for null context
	  if(localCtx === null) {
	    return callback(null, _getInitialContext(options));
	  }
	
	  // retrieve URLs in localCtx
	  localCtx = _clone(localCtx);
	  if(!(_isObject(localCtx) && '@context' in localCtx)) {
	    localCtx = {'@context': localCtx};
	  }
	  _retrieveContextUrls(localCtx, options, function(err, ctx) {
	    if(err) {
	      return callback(err);
	    }
	    try {
	      // process context
	      ctx = new Processor().processContext(activeCtx, ctx, options);
	    } catch(ex) {
	      return callback(ex);
	    }
	    callback(null, ctx);
	  });
	};
	
	/**
	 * Returns true if the given subject has the given property.
	 *
	 * @param subject the subject to check.
	 * @param property the property to look for.
	 *
	 * @return true if the subject has the given property, false if not.
	 */
	jsonld.hasProperty = function(subject, property) {
	  var rval = false;
	  if(property in subject) {
	    var value = subject[property];
	    rval = (!_isArray(value) || value.length > 0);
	  }
	  return rval;
	};
	
	/**
	 * Determines if the given value is a property of the given subject.
	 *
	 * @param subject the subject to check.
	 * @param property the property to check.
	 * @param value the value to check.
	 *
	 * @return true if the value exists, false if not.
	 */
	jsonld.hasValue = function(subject, property, value) {
	  var rval = false;
	  if(jsonld.hasProperty(subject, property)) {
	    var val = subject[property];
	    var isList = _isList(val);
	    if(_isArray(val) || isList) {
	      if(isList) {
	        val = val['@list'];
	      }
	      for(var i = 0; i < val.length; ++i) {
	        if(jsonld.compareValues(value, val[i])) {
	          rval = true;
	          break;
	        }
	      }
	    } else if(!_isArray(value)) {
	      // avoid matching the set of values with an array value parameter
	      rval = jsonld.compareValues(value, val);
	    }
	  }
	  return rval;
	};
	
	/**
	 * Adds a value to a subject. If the value is an array, all values in the
	 * array will be added.
	 *
	 * @param subject the subject to add the value to.
	 * @param property the property that relates the value to the subject.
	 * @param value the value to add.
	 * @param [options] the options to use:
	 *        [propertyIsArray] true if the property is always an array, false
	 *          if not (default: false).
	 *        [allowDuplicate] true to allow duplicates, false not to (uses a
	 *          simple shallow comparison of subject ID or value) (default: true).
	 */
	jsonld.addValue = function(subject, property, value, options) {
	  options = options || {};
	  if(!('propertyIsArray' in options)) {
	    options.propertyIsArray = false;
	  }
	  if(!('allowDuplicate' in options)) {
	    options.allowDuplicate = true;
	  }
	
	  if(_isArray(value)) {
	    if(value.length === 0 && options.propertyIsArray &&
	      !(property in subject)) {
	      subject[property] = [];
	    }
	    for(var i = 0; i < value.length; ++i) {
	      jsonld.addValue(subject, property, value[i], options);
	    }
	  } else if(property in subject) {
	    // check if subject already has value if duplicates not allowed
	    var hasValue = (!options.allowDuplicate &&
	      jsonld.hasValue(subject, property, value));
	
	    // make property an array if value not present or always an array
	    if(!_isArray(subject[property]) &&
	      (!hasValue || options.propertyIsArray)) {
	      subject[property] = [subject[property]];
	    }
	
	    // add new value
	    if(!hasValue) {
	      subject[property].push(value);
	    }
	  } else {
	    // add new value as set or single value
	    subject[property] = options.propertyIsArray ? [value] : value;
	  }
	};
	
	/**
	 * Gets all of the values for a subject's property as an array.
	 *
	 * @param subject the subject.
	 * @param property the property.
	 *
	 * @return all of the values for a subject's property as an array.
	 */
	jsonld.getValues = function(subject, property) {
	  var rval = subject[property] || [];
	  if(!_isArray(rval)) {
	    rval = [rval];
	  }
	  return rval;
	};
	
	/**
	 * Removes a property from a subject.
	 *
	 * @param subject the subject.
	 * @param property the property.
	 */
	jsonld.removeProperty = function(subject, property) {
	  delete subject[property];
	};
	
	/**
	 * Removes a value from a subject.
	 *
	 * @param subject the subject.
	 * @param property the property that relates the value to the subject.
	 * @param value the value to remove.
	 * @param [options] the options to use:
	 *          [propertyIsArray] true if the property is always an array, false
	 *            if not (default: false).
	 */
	jsonld.removeValue = function(subject, property, value, options) {
	  options = options || {};
	  if(!('propertyIsArray' in options)) {
	    options.propertyIsArray = false;
	  }
	
	  // filter out value
	  var values = jsonld.getValues(subject, property).filter(function(e) {
	    return !jsonld.compareValues(e, value);
	  });
	
	  if(values.length === 0) {
	    jsonld.removeProperty(subject, property);
	  } else if(values.length === 1 && !options.propertyIsArray) {
	    subject[property] = values[0];
	  } else {
	    subject[property] = values;
	  }
	};
	
	/**
	 * Compares two JSON-LD values for equality. Two JSON-LD values will be
	 * considered equal if:
	 *
	 * 1. They are both primitives of the same type and value.
	 * 2. They are both @values with the same @value, @type, @language,
	 *   and @index, OR
	 * 3. They both have @ids they are the same.
	 *
	 * @param v1 the first value.
	 * @param v2 the second value.
	 *
	 * @return true if v1 and v2 are considered equal, false if not.
	 */
	jsonld.compareValues = function(v1, v2) {
	  // 1. equal primitives
	  if(v1 === v2) {
	    return true;
	  }
	
	  // 2. equal @values
	  if(_isValue(v1) && _isValue(v2) &&
	    v1['@value'] === v2['@value'] &&
	    v1['@type'] === v2['@type'] &&
	    v1['@language'] === v2['@language'] &&
	    v1['@index'] === v2['@index']) {
	    return true;
	  }
	
	  // 3. equal @ids
	  if(_isObject(v1) && ('@id' in v1) && _isObject(v2) && ('@id' in v2)) {
	    return v1['@id'] === v2['@id'];
	  }
	
	  return false;
	};
	
	/**
	 * Gets the value for the given active context key and type, null if none is
	 * set.
	 *
	 * @param ctx the active context.
	 * @param key the context key.
	 * @param [type] the type of value to get (eg: '@id', '@type'), if not
	 *          specified gets the entire entry for a key, null if not found.
	 *
	 * @return the value.
	 */
	jsonld.getContextValue = function(ctx, key, type) {
	  var rval = null;
	
	  // return null for invalid key
	  if(key === null) {
	    return rval;
	  }
	
	  // get default language
	  if(type === '@language' && (type in ctx)) {
	    rval = ctx[type];
	  }
	
	  // get specific entry information
	  if(ctx.mappings[key]) {
	    var entry = ctx.mappings[key];
	
	    if(_isUndefined(type)) {
	      // return whole entry
	      rval = entry;
	    } else if(type in entry) {
	      // return entry value for type
	      rval = entry[type];
	    }
	  }
	
	  return rval;
	};
	
	/** Registered RDF dataset parsers hashed by content-type. */
	var _rdfParsers = {};
	
	/**
	 * Registers an RDF dataset parser by content-type, for use with
	 * jsonld.fromRDF. An RDF dataset parser will always be given two parameters,
	 * a string of input and a callback. An RDF dataset parser can be synchronous
	 * or asynchronous.
	 *
	 * If the parser function returns undefined or null then it will be assumed to
	 * be asynchronous w/a continuation-passing style and the callback parameter
	 * given to the parser MUST be invoked.
	 *
	 * If it returns a Promise, then it will be assumed to be asynchronous, but the
	 * callback parameter MUST NOT be invoked. It should instead be ignored.
	 *
	 * If it returns an RDF dataset, it will be assumed to be synchronous and the
	 * callback parameter MUST NOT be invoked. It should instead be ignored.
	 *
	 * @param contentType the content-type for the parser.
	 * @param parser(input, callback(err, dataset)) the parser function (takes a
	 *          string as a parameter and either returns null/undefined and uses
	 *          the given callback, returns a Promise, or returns an RDF dataset).
	 */
	jsonld.registerRDFParser = function(contentType, parser) {
	  _rdfParsers[contentType] = parser;
	};
	
	/**
	 * Unregisters an RDF dataset parser by content-type.
	 *
	 * @param contentType the content-type for the parser.
	 */
	jsonld.unregisterRDFParser = function(contentType) {
	  delete _rdfParsers[contentType];
	};
	
	if(_nodejs) {
	  // needed for serialization of XML literals
	  if(typeof XMLSerializer === 'undefined') {
	    var XMLSerializer = null;
	  }
	  if(typeof Node === 'undefined') {
	    var Node = {
	      ELEMENT_NODE: 1,
	      ATTRIBUTE_NODE: 2,
	      TEXT_NODE: 3,
	      CDATA_SECTION_NODE: 4,
	      ENTITY_REFERENCE_NODE: 5,
	      ENTITY_NODE: 6,
	      PROCESSING_INSTRUCTION_NODE: 7,
	      COMMENT_NODE: 8,
	      DOCUMENT_NODE: 9,
	      DOCUMENT_TYPE_NODE: 10,
	      DOCUMENT_FRAGMENT_NODE: 11,
	      NOTATION_NODE:12
	    };
	  }
	}
	
	// constants
	var XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean';
	var XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double';
	var XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer';
	var XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';
	
	var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
	var RDF_LIST = RDF + 'List';
	var RDF_FIRST = RDF + 'first';
	var RDF_REST = RDF + 'rest';
	var RDF_NIL = RDF + 'nil';
	var RDF_TYPE = RDF + 'type';
	var RDF_PLAIN_LITERAL = RDF + 'PlainLiteral';
	var RDF_XML_LITERAL = RDF + 'XMLLiteral';
	var RDF_OBJECT = RDF + 'object';
	var RDF_LANGSTRING = RDF + 'langString';
	
	var LINK_HEADER_REL = 'http://www.w3.org/ns/json-ld#context';
	var MAX_CONTEXT_URLS = 10;
	
	/**
	 * A JSON-LD Error.
	 *
	 * @param msg the error message.
	 * @param type the error type.
	 * @param details the error details.
	 */
	var JsonLdError = function(msg, type, details) {
	  if(_nodejs) {
	    Error.call(this);
	    Error.captureStackTrace(this, this.constructor);
	  } else if(typeof Error !== 'undefined') {
	    this.stack = (new Error()).stack;
	  }
	  this.name = type || 'jsonld.Error';
	  this.message = msg || 'An unspecified JSON-LD error occurred.';
	  this.details = details || {};
	};
	if(_nodejs) {
	  __webpack_require__(243).inherits(JsonLdError, Error);
	} else if(typeof Error !== 'undefined') {
	  JsonLdError.prototype = new Error();
	}
	
	/**
	 * Constructs a new JSON-LD Processor.
	 */
	var Processor = function() {};
	
	/**
	 * Recursively compacts an element using the given active context. All values
	 * must be in expanded form before this method is called.
	 *
	 * @param activeCtx the active context to use.
	 * @param activeProperty the compacted property associated with the element
	 *          to compact, null for none.
	 * @param element the element to compact.
	 * @param options the compaction options.
	 *
	 * @return the compacted value.
	 */
	Processor.prototype.compact = function(
	  activeCtx, activeProperty, element, options) {
	  // recursively compact array
	  if(_isArray(element)) {
	    var rval = [];
	    for(var i = 0; i < element.length; ++i) {
	      // compact, dropping any null values
	      var compacted = this.compact(
	        activeCtx, activeProperty, element[i], options);
	      if(compacted !== null) {
	        rval.push(compacted);
	      }
	    }
	    if(options.compactArrays && rval.length === 1) {
	      // use single element if no container is specified
	      var container = jsonld.getContextValue(
	        activeCtx, activeProperty, '@container');
	      if(container === null) {
	        rval = rval[0];
	      }
	    }
	    return rval;
	  }
	
	  // recursively compact object
	  if(_isObject(element)) {
	    if(options.link && '@id' in element && element['@id'] in options.link) {
	      // check for a linked element to reuse
	      var linked = options.link[element['@id']];
	      for(var i = 0; i < linked.length; ++i) {
	        if(linked[i].expanded === element) {
	          return linked[i].compacted;
	        }
	      }
	    }
	
	    // do value compaction on @values and subject references
	    if(_isValue(element) || _isSubjectReference(element)) {
	      var rval = _compactValue(activeCtx, activeProperty, element);
	      if(options.link && _isSubjectReference(element)) {
	        // store linked element
	        if(!(element['@id'] in options.link)) {
	          options.link[element['@id']] = [];
	        }
	        options.link[element['@id']].push({expanded: element, compacted: rval});
	      }
	      return rval;
	    }
	
	    // FIXME: avoid misuse of active property as an expanded property?
	    var insideReverse = (activeProperty === '@reverse');
	
	    var rval = {};
	
	    if(options.link && '@id' in element) {
	      // store linked element
	      if(!(element['@id'] in options.link)) {
	        options.link[element['@id']] = [];
	      }
	      options.link[element['@id']].push({expanded: element, compacted: rval});
	    }
	
	    // process element keys in order
	    var keys = Object.keys(element).sort();
	    for(var ki = 0; ki < keys.length; ++ki) {
	      var expandedProperty = keys[ki];
	      var expandedValue = element[expandedProperty];
	
	      // compact @id and @type(s)
	      if(expandedProperty === '@id' || expandedProperty === '@type') {
	        var compactedValue;
	
	        // compact single @id
	        if(_isString(expandedValue)) {
	          compactedValue = _compactIri(
	            activeCtx, expandedValue, null,
	            {vocab: (expandedProperty === '@type')});
	        } else {
	          // expanded value must be a @type array
	          compactedValue = [];
	          for(var vi = 0; vi < expandedValue.length; ++vi) {
	            compactedValue.push(_compactIri(
	              activeCtx, expandedValue[vi], null, {vocab: true}));
	          }
	        }
	
	        // use keyword alias and add value
	        var alias = _compactIri(activeCtx, expandedProperty);
	        var isArray = (_isArray(compactedValue) && expandedValue.length === 0);
	        jsonld.addValue(
	          rval, alias, compactedValue, {propertyIsArray: isArray});
	        continue;
	      }
	
	      // handle @reverse
	      if(expandedProperty === '@reverse') {
	        // recursively compact expanded value
	        var compactedValue = this.compact(
	          activeCtx, '@reverse', expandedValue, options);
	
	        // handle double-reversed properties
	        for(var compactedProperty in compactedValue) {
	          if(activeCtx.mappings[compactedProperty] &&
	            activeCtx.mappings[compactedProperty].reverse) {
	            var value = compactedValue[compactedProperty];
	            var container = jsonld.getContextValue(
	              activeCtx, compactedProperty, '@container');
	            var useArray = (container === '@set' || !options.compactArrays);
	            jsonld.addValue(
	              rval, compactedProperty, value, {propertyIsArray: useArray});
	            delete compactedValue[compactedProperty];
	          }
	        }
	
	        if(Object.keys(compactedValue).length > 0) {
	          // use keyword alias and add value
	          var alias = _compactIri(activeCtx, expandedProperty);
	          jsonld.addValue(rval, alias, compactedValue);
	        }
	
	        continue;
	      }
	
	      // handle @index property
	      if(expandedProperty === '@index') {
	        // drop @index if inside an @index container
	        var container = jsonld.getContextValue(
	          activeCtx, activeProperty, '@container');
	        if(container === '@index') {
	          continue;
	        }
	
	        // use keyword alias and add value
	        var alias = _compactIri(activeCtx, expandedProperty);
	        jsonld.addValue(rval, alias, expandedValue);
	        continue;
	      }
	
	      // skip array processing for keywords that aren't @graph or @list
	      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&
	        _isKeyword(expandedProperty)) {
	        // use keyword alias and add value as is
	        var alias = _compactIri(activeCtx, expandedProperty);
	        jsonld.addValue(rval, alias, expandedValue);
	        continue;
	      }
	
	      // Note: expanded value must be an array due to expansion algorithm.
	
	      // preserve empty arrays
	      if(expandedValue.length === 0) {
	        var itemActiveProperty = _compactIri(
	          activeCtx, expandedProperty, expandedValue, {vocab: true},
	          insideReverse);
	        jsonld.addValue(
	          rval, itemActiveProperty, expandedValue, {propertyIsArray: true});
	      }
	
	      // recusively process array values
	      for(var vi = 0; vi < expandedValue.length; ++vi) {
	        var expandedItem = expandedValue[vi];
	
	        // compact property and get container type
	        var itemActiveProperty = _compactIri(
	          activeCtx, expandedProperty, expandedItem, {vocab: true},
	          insideReverse);
	        var container = jsonld.getContextValue(
	          activeCtx, itemActiveProperty, '@container');
	
	        // get @list value if appropriate
	        var isList = _isList(expandedItem);
	        var list = null;
	        if(isList) {
	          list = expandedItem['@list'];
	        }
	
	        // recursively compact expanded item
	        var compactedItem = this.compact(
	          activeCtx, itemActiveProperty, isList ? list : expandedItem, options);
	
	        // handle @list
	        if(isList) {
	          // ensure @list value is an array
	          if(!_isArray(compactedItem)) {
	            compactedItem = [compactedItem];
	          }
	
	          if(container !== '@list') {
	            // wrap using @list alias
	            var wrapper = {};
	            wrapper[_compactIri(activeCtx, '@list')] = compactedItem;
	            compactedItem = wrapper;
	
	            // include @index from expanded @list, if any
	            if('@index' in expandedItem) {
	              compactedItem[_compactIri(activeCtx, '@index')] =
	                expandedItem['@index'];
	            }
	          } else if(itemActiveProperty in rval) {
	            // can't use @list container for more than 1 list
	            throw new JsonLdError(
	              'JSON-LD compact error; property has a "@list" @container ' +
	              'rule but there is more than a single @list that matches ' +
	              'the compacted term in the document. Compaction might mix ' +
	              'unwanted items into the list.',
	              'jsonld.SyntaxError', {code: 'compaction to list of lists'});
	          }
	        }
	
	        // handle language and index maps
	        if(container === '@language' || container === '@index') {
	          // get or create the map object
	          var mapObject;
	          if(itemActiveProperty in rval) {
	            mapObject = rval[itemActiveProperty];
	          } else {
	            rval[itemActiveProperty] = mapObject = {};
	          }
	
	          // if container is a language map, simplify compacted value to
	          // a simple string
	          if(container === '@language' && _isValue(compactedItem)) {
	            compactedItem = compactedItem['@value'];
	          }
	
	          // add compact value to map object using key from expanded value
	          // based on the container type
	          jsonld.addValue(mapObject, expandedItem[container], compactedItem);
	        } else {
	          // use an array if: compactArrays flag is false,
	          // @container is @set or @list , value is an empty
	          // array, or key is @graph
	          var isArray = (!options.compactArrays || container === '@set' ||
	            container === '@list' ||
	            (_isArray(compactedItem) && compactedItem.length === 0) ||
	            expandedProperty === '@list' || expandedProperty === '@graph');
	
	          // add compact value
	          jsonld.addValue(
	            rval, itemActiveProperty, compactedItem,
	            {propertyIsArray: isArray});
	        }
	      }
	    }
	
	    return rval;
	  }
	
	  // only primitives remain which are already compact
	  return element;
	};
	
	/**
	 * Recursively expands an element using the given context. Any context in
	 * the element will be removed. All context URLs must have been retrieved
	 * before calling this method.
	 *
	 * @param activeCtx the context to use.
	 * @param activeProperty the property for the element, null for none.
	 * @param element the element to expand.
	 * @param options the expansion options.
	 * @param insideList true if the element is a list, false if not.
	 *
	 * @return the expanded value.
	 */
	Processor.prototype.expand = function(
	  activeCtx, activeProperty, element, options, insideList) {
	  var self = this;
	
	  // nothing to expand
	  if(element === null || element === undefined) {
	    return null;
	  }
	
	  if(!_isArray(element) && !_isObject(element)) {
	    // drop free-floating scalars that are not in lists
	    if(!insideList && (activeProperty === null ||
	      _expandIri(activeCtx, activeProperty, {vocab: true}) === '@graph')) {
	      return null;
	    }
	
	    // expand element according to value expansion rules
	    return _expandValue(activeCtx, activeProperty, element);
	  }
	
	  // recursively expand array
	  if(_isArray(element)) {
	    var rval = [];
	    var container = jsonld.getContextValue(
	      activeCtx, activeProperty, '@container');
	    insideList = insideList || container === '@list';
	    for(var i = 0; i < element.length; ++i) {
	      // expand element
	      var e = self.expand(activeCtx, activeProperty, element[i], options);
	      if(insideList && (_isArray(e) || _isList(e))) {
	        // lists of lists are illegal
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; lists of lists are not permitted.',
	          'jsonld.SyntaxError', {code: 'list of lists'});
	      }
	      // drop null values
	      if(e !== null) {
	        if(_isArray(e)) {
	          rval = rval.concat(e);
	        } else {
	          rval.push(e);
	        }
	      }
	    }
	    return rval;
	  }
	
	  // recursively expand object:
	
	  // if element has a context, process it
	  if('@context' in element) {
	    activeCtx = self.processContext(activeCtx, element['@context'], options);
	  }
	
	  // expand the active property
	  var expandedActiveProperty = _expandIri(
	    activeCtx, activeProperty, {vocab: true});
	
	  var rval = {};
	  var keys = Object.keys(element).sort();
	  for(var ki = 0; ki < keys.length; ++ki) {
	    var key = keys[ki];
	    var value = element[key];
	    var expandedValue;
	
	    // skip @context
	    if(key === '@context') {
	      continue;
	    }
	
	    // expand property
	    var expandedProperty = _expandIri(activeCtx, key, {vocab: true});
	
	    // drop non-absolute IRI keys that aren't keywords
	    if(expandedProperty === null ||
	      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
	      continue;
	    }
	
	    if(_isKeyword(expandedProperty)) {
	      if(expandedActiveProperty === '@reverse') {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +
	          'property.', 'jsonld.SyntaxError',
	          {code: 'invalid reverse property map', value: value});
	      }
	      if(expandedProperty in rval) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; colliding keywords detected.',
	          'jsonld.SyntaxError',
	          {code: 'colliding keywords', keyword: expandedProperty});
	      }
	    }
	
	    // syntax error if @id is not a string
	    if(expandedProperty === '@id' && !_isString(value)) {
	      if(!options.isFrame) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@id" value must a string.',
	          'jsonld.SyntaxError', {code: 'invalid @id value', value: value});
	      }
	      if(!_isObject(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@id" value must be a string or an ' +
	          'object.', 'jsonld.SyntaxError',
	          {code: 'invalid @id value', value: value});
	      }
	    }
	
	    if(expandedProperty === '@type') {
	      _validateTypeValue(value);
	    }
	
	    // @graph must be an array or an object
	    if(expandedProperty === '@graph' &&
	      !(_isObject(value) || _isArray(value))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; "@graph" value must not be an ' +
	        'object or an array.',
	        'jsonld.SyntaxError', {code: 'invalid @graph value', value: value});
	    }
	
	    // @value must not be an object or an array
	    if(expandedProperty === '@value' &&
	      (_isObject(value) || _isArray(value))) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; "@value" value must not be an ' +
	        'object or an array.',
	        'jsonld.SyntaxError',
	        {code: 'invalid value object value', value: value});
	    }
	
	    // @language must be a string
	    if(expandedProperty === '@language') {
	      if(value === null) {
	        // drop null @language values, they expand as if they didn't exist
	        continue;
	      }
	      if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@language" value must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid language-tagged string', value: value});
	      }
	      // ensure language value is lowercase
	      value = value.toLowerCase();
	    }
	
	    // @index must be a string
	    if(expandedProperty === '@index') {
	      if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@index" value must be a string.',
	          'jsonld.SyntaxError',
	          {code: 'invalid @index value', value: value});
	      }
	    }
	
	    // @reverse must be an object
	    if(expandedProperty === '@reverse') {
	      if(!_isObject(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; "@reverse" value must be an object.',
	          'jsonld.SyntaxError', {code: 'invalid @reverse value', value: value});
	      }
	
	      expandedValue = self.expand(activeCtx, '@reverse', value, options);
	
	      // properties double-reversed
	      if('@reverse' in expandedValue) {
	        for(var property in expandedValue['@reverse']) {
	          jsonld.addValue(
	            rval, property, expandedValue['@reverse'][property],
	            {propertyIsArray: true});
	        }
	      }
	
	      // FIXME: can this be merged with code below to simplify?
	      // merge in all reversed properties
	      var reverseMap = rval['@reverse'] || null;
	      for(var property in expandedValue) {
	        if(property === '@reverse') {
	          continue;
	        }
	        if(reverseMap === null) {
	          reverseMap = rval['@reverse'] = {};
	        }
	        jsonld.addValue(reverseMap, property, [], {propertyIsArray: true});
	        var items = expandedValue[property];
	        for(var ii = 0; ii < items.length; ++ii) {
	          var item = items[ii];
	          if(_isValue(item) || _isList(item)) {
	            throw new JsonLdError(
	              'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
	              '@value or an @list.', 'jsonld.SyntaxError',
	              {code: 'invalid reverse property value', value: expandedValue});
	          }
	          jsonld.addValue(
	            reverseMap, property, item, {propertyIsArray: true});
	        }
	      }
	
	      continue;
	    }
	
	    var container = jsonld.getContextValue(activeCtx, key, '@container');
	
	    if(container === '@language' && _isObject(value)) {
	      // handle language map container (skip if value is not an object)
	      expandedValue = _expandLanguageMap(value);
	    } else if(container === '@index' && _isObject(value)) {
	      // handle index container (skip if value is not an object)
	      expandedValue = (function _expandIndexMap(activeProperty) {
	        var rval = [];
	        var keys = Object.keys(value).sort();
	        for(var ki = 0; ki < keys.length; ++ki) {
	          var key = keys[ki];
	          var val = value[key];
	          if(!_isArray(val)) {
	            val = [val];
	          }
	          val = self.expand(activeCtx, activeProperty, val, options, false);
	          for(var vi = 0; vi < val.length; ++vi) {
	            var item = val[vi];
	            if(!('@index' in item)) {
	              item['@index'] = key;
	            }
	            rval.push(item);
	          }
	        }
	        return rval;
	      })(key);
	    } else {
	      // recurse into @list or @set
	      var isList = (expandedProperty === '@list');
	      if(isList || expandedProperty === '@set') {
	        var nextActiveProperty = activeProperty;
	        if(isList && expandedActiveProperty === '@graph') {
	          nextActiveProperty = null;
	        }
	        expandedValue = self.expand(
	          activeCtx, nextActiveProperty, value, options, isList);
	        if(isList && _isList(expandedValue)) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; lists of lists are not permitted.',
	            'jsonld.SyntaxError', {code: 'list of lists'});
	        }
	      } else {
	        // recursively expand value with key as new active property
	        expandedValue = self.expand(activeCtx, key, value, options, false);
	      }
	    }
	
	    // drop null values if property is not @value
	    if(expandedValue === null && expandedProperty !== '@value') {
	      continue;
	    }
	
	    // convert expanded value to @list if container specifies it
	    if(expandedProperty !== '@list' && !_isList(expandedValue) &&
	      container === '@list') {
	      // ensure expanded value is an array
	      expandedValue = (_isArray(expandedValue) ?
	        expandedValue : [expandedValue]);
	      expandedValue = {'@list': expandedValue};
	    }
	
	    // FIXME: can this be merged with code above to simplify?
	    // merge in reverse properties
	    if(activeCtx.mappings[key] && activeCtx.mappings[key].reverse) {
	      var reverseMap = rval['@reverse'] = rval['@reverse'] || {};
	      if(!_isArray(expandedValue)) {
	        expandedValue = [expandedValue];
	      }
	      for(var ii = 0; ii < expandedValue.length; ++ii) {
	        var item = expandedValue[ii];
	        if(_isValue(item) || _isList(item)) {
	          throw new JsonLdError(
	            'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
	            '@value or an @list.', 'jsonld.SyntaxError',
	            {code: 'invalid reverse property value', value: expandedValue});
	        }
	        jsonld.addValue(
	          reverseMap, expandedProperty, item, {propertyIsArray: true});
	      }
	      continue;
	    }
	
	    // add value for property
	    // use an array except for certain keywords
	    var useArray =
	      ['@index', '@id', '@type', '@value', '@language'].indexOf(
	        expandedProperty) === -1;
	    jsonld.addValue(
	      rval, expandedProperty, expandedValue, {propertyIsArray: useArray});
	  }
	
	  // get property count on expanded output
	  keys = Object.keys(rval);
	  var count = keys.length;
	
	  if('@value' in rval) {
	    // @value must only have @language or @type
	    if('@type' in rval && '@language' in rval) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" may not ' +
	        'contain both "@type" and "@language".',
	        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
	    }
	    var validCount = count - 1;
	    if('@type' in rval) {
	      validCount -= 1;
	    }
	    if('@index' in rval) {
	      validCount -= 1;
	    }
	    if('@language' in rval) {
	      validCount -= 1;
	    }
	    if(validCount !== 0) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" may only ' +
	        'have an "@index" property and at most one other property ' +
	        'which can be "@type" or "@language".',
	        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
	    }
	    // drop null @values
	    if(rval['@value'] === null) {
	      rval = null;
	    } else if('@language' in rval && !_isString(rval['@value'])) {
	      // if @language is present, @value must be a string
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; only strings may be language-tagged.',
	        'jsonld.SyntaxError',
	        {code: 'invalid language-tagged value', element: rval});
	    } else if('@type' in rval && (!_isAbsoluteIri(rval['@type']) ||
	      rval['@type'].indexOf('_:') === 0)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an element containing "@value" and "@type" ' +
	        'must have an absolute IRI for the value of "@type".',
	        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});
	    }
	  } else if('@type' in rval && !_isArray(rval['@type'])) {
	    // convert @type to an array
	    rval['@type'] = [rval['@type']];
	  } else if('@set' in rval || '@list' in rval) {
	    // handle @set and @list
	    if(count > 1 && !(count === 2 && '@index' in rval)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; if an element has the property "@set" ' +
	        'or "@list", then it can have at most one other property that is ' +
	        '"@index".', 'jsonld.SyntaxError',
	        {code: 'invalid set or list object', element: rval});
	    }
	    // optimize away @set
	    if('@set' in rval) {
	      rval = rval['@set'];
	      keys = Object.keys(rval);
	      count = keys.length;
	    }
	  } else if(count === 1 && '@language' in rval) {
	    // drop objects with only @language
	    rval = null;
	  }
	
	  // drop certain top-level objects that do not occur in lists
	  if(_isObject(rval) &&
	    !options.keepFreeFloatingNodes && !insideList &&
	    (activeProperty === null || expandedActiveProperty === '@graph')) {
	    // drop empty object, top-level @value/@list, or object with only @id
	    if(count === 0 || '@value' in rval || '@list' in rval ||
	      (count === 1 && '@id' in rval)) {
	      rval = null;
	    }
	  }
	
	  return rval;
	};
	
	/**
	 * Creates a JSON-LD node map (node ID => node).
	 *
	 * @param input the expanded JSON-LD to create a node map of.
	 * @param [options] the options to use:
	 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
	 *          [namer] (deprecated).
	 *
	 * @return the node map.
	 */
	Processor.prototype.createNodeMap = function(input, options) {
	  options = options || {};
	
	  // produce a map of all subjects and name each bnode
	  var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
	  var graphs = {'@default': {}};
	  _createNodeMap(input, graphs, '@default', issuer);
	
	  // add all non-default graphs to default graph
	  return _mergeNodeMaps(graphs);
	};
	
	/**
	 * Performs JSON-LD flattening.
	 *
	 * @param input the expanded JSON-LD to flatten.
	 *
	 * @return the flattened output.
	 */
	Processor.prototype.flatten = function(input) {
	  var defaultGraph = this.createNodeMap(input);
	
	  // produce flattened output
	  var flattened = [];
	  var keys = Object.keys(defaultGraph).sort();
	  for(var ki = 0; ki < keys.length; ++ki) {
	    var node = defaultGraph[keys[ki]];
	    // only add full subjects to top-level
	    if(!_isSubjectReference(node)) {
	      flattened.push(node);
	    }
	  }
	  return flattened;
	};
	
	/**
	 * Performs JSON-LD framing.
	 *
	 * @param input the expanded JSON-LD to frame.
	 * @param frame the expanded JSON-LD frame to use.
	 * @param options the framing options.
	 *
	 * @return the framed output.
	 */
	Processor.prototype.frame = function(input, frame, options) {
	  // create framing state
	  var state = {
	    options: options,
	    graphs: {'@default': {}, '@merged': {}},
	    subjectStack: [],
	    link: {}
	  };
	
	  // produce a map of all graphs and name each bnode
	  // FIXME: currently uses subjects from @merged graph only
	  var issuer = new IdentifierIssuer('_:b');
	  _createNodeMap(input, state.graphs, '@merged', issuer);
	  state.subjects = state.graphs['@merged'];
	
	  // frame the subjects
	  var framed = [];
	  _frame(state, Object.keys(state.subjects).sort(), frame, framed, null);
	  return framed;
	};
	
	/**
	 * Performs normalization on the given RDF dataset.
	 *
	 * @param dataset the RDF dataset to normalize.
	 * @param options the normalization options.
	 * @param callback(err, normalized) called once the operation completes.
	 */
	Processor.prototype.normalize = function(dataset, options, callback) {
	  if(options.algorithm === 'URDNA2015') {
	    return new URDNA2015(options).main(dataset, callback);
	  }
	  if(options.algorithm === 'URGNA2012') {
	    return new URGNA2012(options).main(dataset, callback);
	  }
	  callback(new Error(
	    'Invalid RDF Dataset Normalization algorithm: ' + options.algorithm));
	};
	
	/**
	 * Converts an RDF dataset to JSON-LD.
	 *
	 * @param dataset the RDF dataset.
	 * @param options the RDF serialization options.
	 * @param callback(err, output) called once the operation completes.
	 */
	Processor.prototype.fromRDF = function(dataset, options, callback) {
	  var defaultGraph = {};
	  var graphMap = {'@default': defaultGraph};
	  var referencedOnce = {};
	
	  for(var name in dataset) {
	    var graph = dataset[name];
	    if(!(name in graphMap)) {
	      graphMap[name] = {};
	    }
	    if(name !== '@default' && !(name in defaultGraph)) {
	      defaultGraph[name] = {'@id': name};
	    }
	    var nodeMap = graphMap[name];
	    for(var ti = 0; ti < graph.length; ++ti) {
	      var triple = graph[ti];
	
	      // get subject, predicate, object
	      var s = triple.subject.value;
	      var p = triple.predicate.value;
	      var o = triple.object;
	
	      if(!(s in nodeMap)) {
	        nodeMap[s] = {'@id': s};
	      }
	      var node = nodeMap[s];
	
	      var objectIsId = (o.type === 'IRI' || o.type === 'blank node');
	      if(objectIsId && !(o.value in nodeMap)) {
	        nodeMap[o.value] = {'@id': o.value};
	      }
	
	      if(p === RDF_TYPE && !options.useRdfType && objectIsId) {
	        jsonld.addValue(node, '@type', o.value, {propertyIsArray: true});
	        continue;
	      }
	
	      var value = _RDFToObject(o, options.useNativeTypes);
	      jsonld.addValue(node, p, value, {propertyIsArray: true});
	
	      // object may be an RDF list/partial list node but we can't know easily
	      // until all triples are read
	      if(objectIsId) {
	        if(o.value === RDF_NIL) {
	          // track rdf:nil uniquely per graph
	          var object = nodeMap[o.value];
	          if(!('usages' in object)) {
	            object.usages = [];
	          }
	          object.usages.push({
	            node: node,
	            property: p,
	            value: value
	          });
	        } else if(o.value in referencedOnce) {
	          // object referenced more than once
	          referencedOnce[o.value] = false;
	        } else {
	          // keep track of single reference
	          referencedOnce[o.value] = {
	            node: node,
	            property: p,
	            value: value
	          };
	        }
	      }
	    }
	  }
	
	  // convert linked lists to @list arrays
	  for(var name in graphMap) {
	    var graphObject = graphMap[name];
	
	    // no @lists to be converted, continue
	    if(!(RDF_NIL in graphObject)) {
	      continue;
	    }
	
	    // iterate backwards through each RDF list
	    var nil = graphObject[RDF_NIL];
	    for(var i = 0; i < nil.usages.length; ++i) {
	      var usage = nil.usages[i];
	      var node = usage.node;
	      var property = usage.property;
	      var head = usage.value;
	      var list = [];
	      var listNodes = [];
	
	      // ensure node is a well-formed list node; it must:
	      // 1. Be referenced only once.
	      // 2. Have an array for rdf:first that has 1 item.
	      // 3. Have an array for rdf:rest that has 1 item.
	      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
	      //   optionally, @type where the value is rdf:List.
	      var nodeKeyCount = Object.keys(node).length;
	      while(property === RDF_REST &&
	        _isObject(referencedOnce[node['@id']]) &&
	        _isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&
	        _isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&
	        (nodeKeyCount === 3 || (nodeKeyCount === 4 && _isArray(node['@type']) &&
	          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
	        list.push(node[RDF_FIRST][0]);
	        listNodes.push(node['@id']);
	
	        // get next node, moving backwards through list
	        usage = referencedOnce[node['@id']];
	        node = usage.node;
	        property = usage.property;
	        head = usage.value;
	        nodeKeyCount = Object.keys(node).length;
	
	        // if node is not a blank node, then list head found
	        if(node['@id'].indexOf('_:') !== 0) {
	          break;
	        }
	      }
	
	      // the list is nested in another list
	      if(property === RDF_FIRST) {
	        // empty list
	        if(node['@id'] === RDF_NIL) {
	          // can't convert rdf:nil to a @list object because it would
	          // result in a list of lists which isn't supported
	          continue;
	        }
	
	        // preserve list head
	        head = graphObject[head['@id']][RDF_REST][0];
	        list.pop();
	        listNodes.pop();
	      }
	
	      // transform list into @list object
	      delete head['@id'];
	      head['@list'] = list.reverse();
	      for(var j = 0; j < listNodes.length; ++j) {
	        delete graphObject[listNodes[j]];
	      }
	    }
	
	    delete nil.usages;
	  }
	
	  var result = [];
	  var subjects = Object.keys(defaultGraph).sort();
	  for(var i = 0; i < subjects.length; ++i) {
	    var subject = subjects[i];
	    var node = defaultGraph[subject];
	    if(subject in graphMap) {
	      var graph = node['@graph'] = [];
	      var graphObject = graphMap[subject];
	      var subjects_ = Object.keys(graphObject).sort();
	      for(var si = 0; si < subjects_.length; ++si) {
	        var node_ = graphObject[subjects_[si]];
	        // only add full subjects to top-level
	        if(!_isSubjectReference(node_)) {
	          graph.push(node_);
	        }
	      }
	    }
	    // only add full subjects to top-level
	    if(!_isSubjectReference(node)) {
	      result.push(node);
	    }
	  }
	
	  callback(null, result);
	};
	
	/**
	 * Outputs an RDF dataset for the expanded JSON-LD input.
	 *
	 * @param input the expanded JSON-LD input.
	 * @param options the RDF serialization options.
	 *
	 * @return the RDF dataset.
	 */
	Processor.prototype.toRDF = function(input, options) {
	  // create node map for default graph (and any named graphs)
	  var issuer = new IdentifierIssuer('_:b');
	  var nodeMap = {'@default': {}};
	  _createNodeMap(input, nodeMap, '@default', issuer);
	
	  var dataset = {};
	  var graphNames = Object.keys(nodeMap).sort();
	  for(var i = 0; i < graphNames.length; ++i) {
	    var graphName = graphNames[i];
	    // skip relative IRIs
	    if(graphName === '@default' || _isAbsoluteIri(graphName)) {
	      dataset[graphName] = _graphToRDF(nodeMap[graphName], issuer, options);
	    }
	  }
	  return dataset;
	};
	
	/**
	 * Processes a local context and returns a new active context.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context to process.
	 * @param options the context processing options.
	 *
	 * @return the new active context.
	 */
	Processor.prototype.processContext = function(activeCtx, localCtx, options) {
	  // normalize local context to an array of @context objects
	  if(_isObject(localCtx) && '@context' in localCtx &&
	    _isArray(localCtx['@context'])) {
	    localCtx = localCtx['@context'];
	  }
	  var ctxs = _isArray(localCtx) ? localCtx : [localCtx];
	
	  // no contexts in array, clone existing context
	  if(ctxs.length === 0) {
	    return activeCtx.clone();
	  }
	
	  // process each context in order, update active context
	  // on each iteration to ensure proper caching
	  var rval = activeCtx;
	  for(var i = 0; i < ctxs.length; ++i) {
	    var ctx = ctxs[i];
	
	    // reset to initial context
	    if(ctx === null) {
	      rval = activeCtx = _getInitialContext(options);
	      continue;
	    }
	
	    // dereference @context key if present
	    if(_isObject(ctx) && '@context' in ctx) {
	      ctx = ctx['@context'];
	    }
	
	    // context must be an object by now, all URLs retrieved before this call
	    if(!_isObject(ctx)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context must be an object.',
	        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});
	    }
	
	    // get context from cache if available
	    if(jsonld.cache.activeCtx) {
	      var cached = jsonld.cache.activeCtx.get(activeCtx, ctx);
	      if(cached) {
	        rval = activeCtx = cached;
	        continue;
	      }
	    }
	
	    // update active context and clone new one before updating
	    activeCtx = rval;
	    rval = rval.clone();
	
	    // define context mappings for keys in local context
	    var defined = {};
	
	    // handle @base
	    if('@base' in ctx) {
	      var base = ctx['@base'];
	
	      // clear base
	      if(base === null) {
	        base = null;
	      } else if(!_isString(base)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@base" in a ' +
	          '@context must be a string or null.',
	          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
	      } else if(base !== '' && !_isAbsoluteIri(base)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@base" in a ' +
	          '@context must be an absolute IRI or the empty string.',
	          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
	      }
	
	      if(base !== null) {
	        base = jsonld.url.parse(base || '');
	      }
	      rval['@base'] = base;
	      defined['@base'] = true;
	    }
	
	    // handle @vocab
	    if('@vocab' in ctx) {
	      var value = ctx['@vocab'];
	      if(value === null) {
	        delete rval['@vocab'];
	      } else if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
	          '@context must be a string or null.',
	          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
	      } else if(!_isAbsoluteIri(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
	          '@context must be an absolute IRI.',
	          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
	      } else {
	        rval['@vocab'] = value;
	      }
	      defined['@vocab'] = true;
	    }
	
	    // handle @language
	    if('@language' in ctx) {
	      var value = ctx['@language'];
	      if(value === null) {
	        delete rval['@language'];
	      } else if(!_isString(value)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; the value of "@language" in a ' +
	          '@context must be a string or null.',
	          'jsonld.SyntaxError',
	          {code: 'invalid default language', context: ctx});
	      } else {
	        rval['@language'] = value.toLowerCase();
	      }
	      defined['@language'] = true;
	    }
	
	    // process all other keys
	    for(var key in ctx) {
	      _createTermDefinition(rval, ctx, key, defined);
	    }
	
	    // cache result
	    if(jsonld.cache.activeCtx) {
	      jsonld.cache.activeCtx.set(activeCtx, ctx, rval);
	    }
	  }
	
	  return rval;
	};
	
	/**
	 * Expands a language map.
	 *
	 * @param languageMap the language map to expand.
	 *
	 * @return the expanded language map.
	 */
	function _expandLanguageMap(languageMap) {
	  var rval = [];
	  var keys = Object.keys(languageMap).sort();
	  for(var ki = 0; ki < keys.length; ++ki) {
	    var key = keys[ki];
	    var val = languageMap[key];
	    if(!_isArray(val)) {
	      val = [val];
	    }
	    for(var vi = 0; vi < val.length; ++vi) {
	      var item = val[vi];
	      if(item === null) {
	          // null values are allowed (8.5) but ignored (3.1)
	          continue;
	      }
	      if(!_isString(item)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; language map values must be strings.',
	          'jsonld.SyntaxError',
	          {code: 'invalid language map value', languageMap: languageMap});
	      }
	      rval.push({
	        '@value': item,
	        '@language': key.toLowerCase()
	      });
	    }
	  }
	  return rval;
	}
	
	/**
	 * Labels the blank nodes in the given value using the given IdentifierIssuer.
	 *
	 * @param issuer the IdentifierIssuer to use.
	 * @param element the element with blank nodes to rename.
	 *
	 * @return the element.
	 */
	function _labelBlankNodes(issuer, element) {
	  if(_isArray(element)) {
	    for(var i = 0; i < element.length; ++i) {
	      element[i] = _labelBlankNodes(issuer, element[i]);
	    }
	  } else if(_isList(element)) {
	    element['@list'] = _labelBlankNodes(issuer, element['@list']);
	  } else if(_isObject(element)) {
	    // relabel blank node
	    if(_isBlankNode(element)) {
	      element['@id'] = issuer.getId(element['@id']);
	    }
	
	    // recursively apply to all keys
	    var keys = Object.keys(element).sort();
	    for(var ki = 0; ki < keys.length; ++ki) {
	      var key = keys[ki];
	      if(key !== '@id') {
	        element[key] = _labelBlankNodes(issuer, element[key]);
	      }
	    }
	  }
	
	  return element;
	}
	
	/**
	 * Expands the given value by using the coercion and keyword rules in the
	 * given context.
	 *
	 * @param activeCtx the active context to use.
	 * @param activeProperty the active property the value is associated with.
	 * @param value the value to expand.
	 *
	 * @return the expanded value.
	 */
	function _expandValue(activeCtx, activeProperty, value) {
	  // nothing to expand
	  if(value === null || value === undefined) {
	    return null;
	  }
	
	  // special-case expand @id and @type (skips '@id' expansion)
	  var expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true});
	  if(expandedProperty === '@id') {
	    return _expandIri(activeCtx, value, {base: true});
	  } else if(expandedProperty === '@type') {
	    return _expandIri(activeCtx, value, {vocab: true, base: true});
	  }
	
	  // get type definition from context
	  var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');
	
	  // do @id expansion (automatic for @graph)
	  if(type === '@id' || (expandedProperty === '@graph' && _isString(value))) {
	    return {'@id': _expandIri(activeCtx, value, {base: true})};
	  }
	  // do @id expansion w/vocab
	  if(type === '@vocab') {
	    return {'@id': _expandIri(activeCtx, value, {vocab: true, base: true})};
	  }
	
	  // do not expand keyword values
	  if(_isKeyword(expandedProperty)) {
	    return value;
	  }
	
	  var rval = {};
	
	  if(type !== null) {
	    // other type
	    rval['@type'] = type;
	  } else if(_isString(value)) {
	    // check for language tagging for strings
	    var language = jsonld.getContextValue(
	      activeCtx, activeProperty, '@language');
	    if(language !== null) {
	      rval['@language'] = language;
	    }
	  }
	  // do conversion of values that aren't basic JSON types to strings
	  if(['boolean', 'number', 'string'].indexOf(typeof value) === -1) {
	    value = value.toString();
	  }
	  rval['@value'] = value;
	
	  return rval;
	}
	
	/**
	 * Creates an array of RDF triples for the given graph.
	 *
	 * @param graph the graph to create RDF triples for.
	 * @param issuer a IdentifierIssuer for assigning blank node names.
	 * @param options the RDF serialization options.
	 *
	 * @return the array of RDF triples for the given graph.
	 */
	function _graphToRDF(graph, issuer, options) {
	  var rval = [];
	
	  var ids = Object.keys(graph).sort();
	  for(var i = 0; i < ids.length; ++i) {
	    var id = ids[i];
	    var node = graph[id];
	    var properties = Object.keys(node).sort();
	    for(var pi = 0; pi < properties.length; ++pi) {
	      var property = properties[pi];
	      var items = node[property];
	      if(property === '@type') {
	        property = RDF_TYPE;
	      } else if(_isKeyword(property)) {
	        continue;
	      }
	
	      for(var ii = 0; ii < items.length; ++ii) {
	        var item = items[ii];
	
	        // RDF subject
	        var subject = {};
	        subject.type = (id.indexOf('_:') === 0) ? 'blank node' : 'IRI';
	        subject.value = id;
	
	        // skip relative IRI subjects
	        if(!_isAbsoluteIri(id)) {
	          continue;
	        }
	
	        // RDF predicate
	        var predicate = {};
	        predicate.type = (property.indexOf('_:') === 0) ? 'blank node' : 'IRI';
	        predicate.value = property;
	
	        // skip relative IRI predicates
	        if(!_isAbsoluteIri(property)) {
	          continue;
	        }
	
	        // skip blank node predicates unless producing generalized RDF
	        if(predicate.type === 'blank node' && !options.produceGeneralizedRdf) {
	          continue;
	        }
	
	        // convert @list to triples
	        if(_isList(item)) {
	          _listToRDF(item['@list'], issuer, subject, predicate, rval);
	        } else {
	          // convert value or node object to triple
	          var object = _objectToRDF(item);
	          // skip null objects (they are relative IRIs)
	          if(object) {
	            rval.push({subject: subject, predicate: predicate, object: object});
	          }
	        }
	      }
	    }
	  }
	
	  return rval;
	}
	
	/**
	 * Converts a @list value into linked list of blank node RDF triples
	 * (an RDF collection).
	 *
	 * @param list the @list value.
	 * @param issuer a IdentifierIssuer for assigning blank node names.
	 * @param subject the subject for the head of the list.
	 * @param predicate the predicate for the head of the list.
	 * @param triples the array of triples to append to.
	 */
	function _listToRDF(list, issuer, subject, predicate, triples) {
	  var first = {type: 'IRI', value: RDF_FIRST};
	  var rest = {type: 'IRI', value: RDF_REST};
	  var nil = {type: 'IRI', value: RDF_NIL};
	
	  for(var i = 0; i < list.length; ++i) {
	    var item = list[i];
	
	    var blankNode = {type: 'blank node', value: issuer.getId()};
	    triples.push({subject: subject, predicate: predicate, object: blankNode});
	
	    subject = blankNode;
	    predicate = first;
	    var object = _objectToRDF(item);
	
	    // skip null objects (they are relative IRIs)
	    if(object) {
	      triples.push({subject: subject, predicate: predicate, object: object});
	    }
	
	    predicate = rest;
	  }
	
	  triples.push({subject: subject, predicate: predicate, object: nil});
	}
	
	/**
	 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string or
	 * node object to an RDF resource.
	 *
	 * @param item the JSON-LD value or node object.
	 *
	 * @return the RDF literal or RDF resource.
	 */
	function _objectToRDF(item) {
	  var object = {};
	
	  // convert value object to RDF
	  if(_isValue(item)) {
	    object.type = 'literal';
	    var value = item['@value'];
	    var datatype = item['@type'] || null;
	
	    // convert to XSD datatypes as appropriate
	    if(_isBoolean(value)) {
	      object.value = value.toString();
	      object.datatype = datatype || XSD_BOOLEAN;
	    } else if(_isDouble(value) || datatype === XSD_DOUBLE) {
	      if(!_isDouble(value)) {
	        value = parseFloat(value);
	      }
	      // canonical double representation
	      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
	      object.datatype = datatype || XSD_DOUBLE;
	    } else if(_isNumber(value)) {
	      object.value = value.toFixed(0);
	      object.datatype = datatype || XSD_INTEGER;
	    } else if('@language' in item) {
	      object.value = value;
	      object.datatype = datatype || RDF_LANGSTRING;
	      object.language = item['@language'];
	    } else {
	      object.value = value;
	      object.datatype = datatype || XSD_STRING;
	    }
	  } else {
	    // convert string/node object to RDF
	    var id = _isObject(item) ? item['@id'] : item;
	    object.type = (id.indexOf('_:') === 0) ? 'blank node' : 'IRI';
	    object.value = id;
	  }
	
	  // skip relative IRIs
	  if(object.type === 'IRI' && !_isAbsoluteIri(object.value)) {
	    return null;
	  }
	
	  return object;
	}
	
	/**
	 * Converts an RDF triple object to a JSON-LD object.
	 *
	 * @param o the RDF triple object to convert.
	 * @param useNativeTypes true to output native types, false not to.
	 *
	 * @return the JSON-LD object.
	 */
	function _RDFToObject(o, useNativeTypes) {
	  // convert IRI/blank node object to JSON-LD
	  if(o.type === 'IRI' || o.type === 'blank node') {
	    return {'@id': o.value};
	  }
	
	  // convert literal to JSON-LD
	  var rval = {'@value': o.value};
	
	  // add language
	  if(o.language) {
	    rval['@language'] = o.language;
	  } else {
	    var type = o.datatype;
	    if(!type) {
	      type = XSD_STRING;
	    }
	    // use native types for certain xsd types
	    if(useNativeTypes) {
	      if(type === XSD_BOOLEAN) {
	        if(rval['@value'] === 'true') {
	          rval['@value'] = true;
	        } else if(rval['@value'] === 'false') {
	          rval['@value'] = false;
	        }
	      } else if(_isNumeric(rval['@value'])) {
	        if(type === XSD_INTEGER) {
	          var i = parseInt(rval['@value'], 10);
	          if(i.toFixed(0) === rval['@value']) {
	            rval['@value'] = i;
	          }
	        } else if(type === XSD_DOUBLE) {
	          rval['@value'] = parseFloat(rval['@value']);
	        }
	      }
	      // do not add native type
	      if([XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING]
	        .indexOf(type) === -1) {
	        rval['@type'] = type;
	      }
	    } else if(type !== XSD_STRING) {
	      rval['@type'] = type;
	    }
	  }
	
	  return rval;
	}
	
	/**
	 * Compares two RDF triples for equality.
	 *
	 * @param t1 the first triple.
	 * @param t2 the second triple.
	 *
	 * @return true if the triples are the same, false if not.
	 */
	function _compareRDFTriples(t1, t2) {
	  var attrs = ['subject', 'predicate', 'object'];
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    if(t1[attr].type !== t2[attr].type || t1[attr].value !== t2[attr].value) {
	      return false;
	    }
	  }
	  if(t1.object.language !== t2.object.language) {
	    return false;
	  }
	  if(t1.object.datatype !== t2.object.datatype) {
	    return false;
	  }
	  return true;
	}
	
	/////////////////////////////// DEFINE URDNA2015 //////////////////////////////
	
	var URDNA2015 = (function() {
	
	var POSITIONS = {'subject': 's', 'object': 'o', 'name': 'g'};
	
	var Normalize = function(options) {
	  options = options || {};
	  this.name = 'URDNA2015';
	  this.options = options;
	  this.blankNodeInfo = {};
	  this.hashToBlankNodes = {};
	  this.canonicalIssuer = new IdentifierIssuer('_:c14n');
	  this.quads = [];
	  this.schedule = {};
	  if('maxCallStackDepth' in options) {
	    this.schedule.MAX_DEPTH = options.maxCallStackDepth;
	  } else {
	    this.schedule.MAX_DEPTH = 500;
	  }
	  if('maxTotalCallStackDepth' in options) {
	    this.schedule.MAX_TOTAL_DEPTH = options.maxCallStackDepth;
	  } else {
	    this.schedule.MAX_TOTAL_DEPTH = 0xFFFFFFFF;
	  }
	  this.schedule.depth = 0;
	  this.schedule.totalDepth = 0;
	  if('timeSlice' in options) {
	    this.schedule.timeSlice = options.timeSlice;
	  } else {
	    // milliseconds
	    this.schedule.timeSlice = 10;
	  }
	};
	
	// do some work in a time slice, but in serial
	Normalize.prototype.doWork = function(fn, callback) {
	  var schedule = this.schedule;
	
	  if(schedule.totalDepth >= schedule.MAX_TOTAL_DEPTH) {
	    return callback(new Error(
	      'Maximum total call stack depth exceeded; normalization aborting.'));
	  }
	
	  (function work() {
	    if(schedule.depth === schedule.MAX_DEPTH) {
	      // stack too deep, run on next tick
	      schedule.depth = 0;
	      schedule.running = false;
	      return jsonld.nextTick(work);
	    }
	
	    // if not yet running, force run
	    var now = new Date().getTime();
	    if(!schedule.running) {
	      schedule.start = new Date().getTime();
	      schedule.deadline = schedule.start + schedule.timeSlice;
	    }
	
	    // TODO: should also include an estimate of expectedWorkTime
	    if(now < schedule.deadline) {
	      schedule.running = true;
	      schedule.depth++;
	      schedule.totalDepth++;
	      return fn(function(err, result) {
	        schedule.depth--;
	        schedule.totalDepth--;
	        callback(err, result);
	      });
	    }
	
	    // not enough time left in this slice, run after letting browser
	    // do some other things
	    schedule.depth = 0;
	    schedule.running = false;
	    jsonld.setImmediate(work);
	  })();
	};
	
	// asynchronously loop
	Normalize.prototype.forEach = function(iterable, fn, callback) {
	  var self = this;
	  var iterator;
	  var idx = 0;
	  var length;
	  if(_isArray(iterable)) {
	    length = iterable.length;
	    iterator = function() {
	      if(idx === length) {
	        return false;
	      }
	      iterator.value = iterable[idx++];
	      iterator.key = idx;
	      return true;
	    };
	  } else {
	    var keys = Object.keys(iterable);
	    length = keys.length;
	    iterator = function() {
	      if(idx === length) {
	        return false;
	      }
	      iterator.key = keys[idx++];
	      iterator.value = iterable[iterator.key];
	      return true;
	    };
	  }
	
	  (function iterate(err, result) {
	    if(err) {
	      return callback(err);
	    }
	    if(iterator()) {
	      return self.doWork(function() {
	        fn(iterator.value, iterator.key, iterate);
	      });
	    }
	    callback();
	  })();
	};
	
	// asynchronous waterfall
	Normalize.prototype.waterfall = function(fns, callback) {
	  var self = this;
	  self.forEach(fns, function(fn, idx, callback) {
	    self.doWork(fn, callback);
	  }, callback);
	};
	
	// asynchronous while
	Normalize.prototype.whilst = function(condition, fn, callback) {
	  var self = this;
	  (function loop(err) {
	    if(err) {
	      return callback(err);
	    }
	    if(!condition()) {
	      return callback();
	    }
	    self.doWork(fn, loop);
	  })();
	};
	
	// 4.4) Normalization Algorithm
	Normalize.prototype.main = function(dataset, callback) {
	  var self = this;
	  self.schedule.start = new Date().getTime();
	  var result;
	
	  // handle invalid output format
	  if(self.options.format) {
	    if(self.options.format !== 'application/nquads') {
	      return callback(new JsonLdError(
	        'Unknown output format.',
	        'jsonld.UnknownFormat', {format: self.options.format}));
	    }
	  }
	
	  // 1) Create the normalization state.
	
	  // Note: Optimize by generating non-normalized blank node map concurrently.
	  var nonNormalized = {};
	
	  self.waterfall([
	    function(callback) {
	      // 2) For every quad in input dataset:
	      self.forEach(dataset, function(triples, graphName, callback) {
	        if(graphName === '@default') {
	          graphName = null;
	        }
	        self.forEach(triples, function(quad, idx, callback) {
	          if(graphName !== null) {
	            if(graphName.indexOf('_:') === 0) {
	              quad.name = {type: 'blank node', value: graphName};
	            } else {
	              quad.name = {type: 'IRI', value: graphName};
	            }
	          }
	          self.quads.push(quad);
	
	          // 2.1) For each blank node that occurs in the quad, add a reference
	          // to the quad using the blank node identifier in the blank node to
	          // quads map, creating a new entry if necessary.
	          self.forEachComponent(quad, function(component) {
	            if(component.type !== 'blank node') {
	              return;
	            }
	            var id = component.value;
	            if(id in self.blankNodeInfo) {
	              self.blankNodeInfo[id].quads.push(quad);
	            } else {
	              nonNormalized[id] = true;
	              self.blankNodeInfo[id] = {quads: [quad]};
	            }
	          });
	          callback();
	        }, callback);
	      }, callback);
	    },
	    function(callback) {
	      // 3) Create a list of non-normalized blank node identifiers
	      // non-normalized identifiers and populate it using the keys from the
	      // blank node to quads map.
	      // Note: We use a map here and it was generated during step 2.
	
	      // 4) Initialize simple, a boolean flag, to true.
	      var simple = true;
	
	      // 5) While simple is true, issue canonical identifiers for blank nodes:
	      self.whilst(function() { return simple; }, function(callback) {
	        // 5.1) Set simple to false.
	        simple = false;
	
	        // 5.2) Clear hash to blank nodes map.
	        self.hashToBlankNodes = {};
	
	        self.waterfall([
	          function(callback) {
	            // 5.3) For each blank node identifier identifier in non-normalized
	            // identifiers:
	            self.forEach(nonNormalized, function(value, id, callback) {
	              // 5.3.1) Create a hash, hash, according to the Hash First Degree
	              // Quads algorithm.
	              self.hashFirstDegreeQuads(id, function(err, hash) {
	                if(err) {
	                  return callback(err);
	                }
	                // 5.3.2) Add hash and identifier to hash to blank nodes map,
	                // creating a new entry if necessary.
	                if(hash in self.hashToBlankNodes) {
	                  self.hashToBlankNodes[hash].push(id);
	                } else {
	                  self.hashToBlankNodes[hash] = [id];
	                }
	                callback();
	              });
	            }, callback);
	          },
	          function(callback) {
	            // 5.4) For each hash to identifier list mapping in hash to blank
	            // nodes map, lexicographically-sorted by hash:
	            var hashes = Object.keys(self.hashToBlankNodes).sort();
	            self.forEach(hashes, function(hash, i, callback) {
	              // 5.4.1) If the length of identifier list is greater than 1,
	              // continue to the next mapping.
	              var idList = self.hashToBlankNodes[hash];
	              if(idList.length > 1) {
	                return callback();
	              }
	
	              // 5.4.2) Use the Issue Identifier algorithm, passing canonical
	              // issuer and the single blank node identifier in identifier
	              // list, identifier, to issue a canonical replacement identifier
	              // for identifier.
	              // TODO: consider changing `getId` to `issue`
	              var id = idList[0];
	              self.canonicalIssuer.getId(id);
	
	              // 5.4.3) Remove identifier from non-normalized identifiers.
	              delete nonNormalized[id];
	
	              // 5.4.4) Remove hash from the hash to blank nodes map.
	              delete self.hashToBlankNodes[hash];
	
	              // 5.4.5) Set simple to true.
	              simple = true;
	              callback();
	            }, callback);
	          }
	        ], callback);
	      }, callback);
	    },
	    function(callback) {
	      // 6) For each hash to identifier list mapping in hash to blank nodes map,
	      // lexicographically-sorted by hash:
	      var hashes = Object.keys(self.hashToBlankNodes).sort();
	      self.forEach(hashes, function(hash, idx, callback) {
	        // 6.1) Create hash path list where each item will be a result of
	        // running the Hash N-Degree Quads algorithm.
	        var hashPathList = [];
	
	        // 6.2) For each blank node identifier identifier in identifier list:
	        var idList = self.hashToBlankNodes[hash];
	        self.waterfall([
	          function(callback) {
	            self.forEach(idList, function(id, idx, callback) {
	              // 6.2.1) If a canonical identifier has already been issued for
	              // identifier, continue to the next identifier.
	              if(self.canonicalIssuer.hasId(id)) {
	                return callback();
	              }
	
	              // 6.2.2) Create temporary issuer, an identifier issuer
	              // initialized with the prefix _:b.
	              var issuer = new IdentifierIssuer('_:b');
	
	              // 6.2.3) Use the Issue Identifier algorithm, passing temporary
	              // issuer and identifier, to issue a new temporary blank node
	              // identifier for identifier.
	              issuer.getId(id);
	
	              // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
	              // temporary issuer, and append the result to the hash path list.
	              self.hashNDegreeQuads(id, issuer, function(err, result) {
	                if(err) {
	                  return callback(err);
	                }
	                hashPathList.push(result);
	                callback();
	              });
	            }, callback);
	          },
	          function(callback) {
	            // 6.3) For each result in the hash path list,
	            // lexicographically-sorted by the hash in result:
	            hashPathList.sort(function(a, b) {
	              return (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0);
	            });
	            self.forEach(hashPathList, function(result, idx, callback) {
	              // 6.3.1) For each blank node identifier, existing identifier,
	              // that was issued a temporary identifier by identifier issuer
	              // in result, issue a canonical identifier, in the same order,
	              // using the Issue Identifier algorithm, passing canonical
	              // issuer and existing identifier.
	              for(var existing in result.issuer.existing) {
	                self.canonicalIssuer.getId(existing);
	              }
	              callback();
	            }, callback);
	          }
	        ], callback);
	      }, callback);
	    }, function(callback) {
	      /* Note: At this point all blank nodes in the set of RDF quads have been
	      assigned canonical identifiers, which have been stored in the canonical
	      issuer. Here each quad is updated by assigning each of its blank nodes
	      its new identifier. */
	
	      // 7) For each quad, quad, in input dataset:
	      var normalized = [];
	      self.waterfall([
	        function(callback) {
	          self.forEach(self.quads, function(quad, idx, callback) {
	            // 7.1) Create a copy, quad copy, of quad and replace any existing
	            // blank node identifiers using the canonical identifiers
	            // previously issued by canonical issuer.
	            // Note: We optimize away the copy here.
	            self.forEachComponent(quad, function(component) {
	              if(component.type === 'blank node' &&
	                component.value.indexOf(self.canonicalIssuer.prefix) !== 0) {
	                component.value = self.canonicalIssuer.getId(component.value);
	              }
	            });
	            // 7.2) Add quad copy to the normalized dataset.
	            normalized.push(_toNQuad(quad));
	            callback();
	          }, callback);
	        },
	        function(callback) {
	          // sort normalized output
	          normalized.sort();
	
	          // 8) Return the normalized dataset.
	          if(self.options.format === 'application/nquads') {
	            result = normalized.join('');
	            return callback();
	          }
	
	          result = _parseNQuads(normalized.join(''));
	          callback();
	        }
	      ], callback);
	    }
	  ], function(err) {
	    callback(err, result);
	  });
	};
	
	// 4.6) Hash First Degree Quads
	Normalize.prototype.hashFirstDegreeQuads = function(id, callback) {
	  var self = this;
	
	  // return cached hash
	  var info = self.blankNodeInfo[id];
	  if('hash' in info) {
	    return callback(null, info.hash);
	  }
	
	  // 1) Initialize nquads to an empty list. It will be used to store quads in
	  // N-Quads format.
	  var nquads = [];
	
	  // 2) Get the list of quads quads associated with the reference blank node
	  // identifier in the blank node to quads map.
	  var quads = info.quads;
	
	  // 3) For each quad quad in quads:
	  self.forEach(quads, function(quad, idx, callback) {
	    // 3.1) Serialize the quad in N-Quads format with the following special
	    // rule:
	
	    // 3.1.1) If any component in quad is an blank node, then serialize it
	    // using a special identifier as follows:
	    var copy = {predicate: quad.predicate};
	    self.forEachComponent(quad, function(component, key) {
	      // 3.1.2) If the blank node's existing blank node identifier matches the
	      // reference blank node identifier then use the blank node identifier _:a,
	      // otherwise, use the blank node identifier _:z.
	      copy[key] = self.modifyFirstDegreeComponent(id, component, key);
	    });
	    nquads.push(_toNQuad(copy));
	    callback();
	  }, function(err) {
	    if(err) {
	      return callback(err);
	    }
	    // 4) Sort nquads in lexicographical order.
	    nquads.sort();
	
	    // 5) Return the hash that results from passing the sorted, joined nquads
	    // through the hash algorithm.
	    info.hash = NormalizeHash.hashNQuads(self.name, nquads);
	    callback(null, info.hash);
	  });
	};
	
	// helper for modifying component during Hash First Degree Quads
	Normalize.prototype.modifyFirstDegreeComponent = function(id, component) {
	  if(component.type !== 'blank node') {
	    return component;
	  }
	  component = _clone(component);
	  component.value = (component.value === id ? '_:a' : '_:z');
	  return component;
	};
	
	// 4.7) Hash Related Blank Node
	Normalize.prototype.hashRelatedBlankNode = function(
	  related, quad, issuer, position, callback) {
	  var self = this;
	
	  // 1) Set the identifier to use for related, preferring first the canonical
	  // identifier for related if issued, second the identifier issued by issuer
	  // if issued, and last, if necessary, the result of the Hash First Degree
	  // Quads algorithm, passing related.
	  var id;
	  self.waterfall([
	    function(callback) {
	      if(self.canonicalIssuer.hasId(related)) {
	        id = self.canonicalIssuer.getId(related);
	        return callback();
	      }
	      if(issuer.hasId(related)) {
	        id = issuer.getId(related);
	        return callback();
	      }
	      self.hashFirstDegreeQuads(related, function(err, hash) {
	        if(err) {
	          return callback(err);
	        }
	        id = hash;
	        callback();
	      });
	    }
	  ], function(err) {
	    if(err) {
	      return callback(err);
	    }
	
	    // 2) Initialize a string input to the value of position.
	    // Note: We use a hash object instead.
	    var md = new NormalizeHash(self.name);
	    md.update(position);
	
	    // 3) If position is not g, append <, the value of the predicate in quad,
	    // and > to input.
	    if(position !== 'g') {
	      md.update(self.getRelatedPredicate(quad));
	    }
	
	    // 4) Append identifier to input.
	    md.update(id);
	
	    // 5) Return the hash that results from passing input through the hash
	    // algorithm.
	    return callback(null, md.digest());
	  });
	};
	
	// helper for getting a related predicate
	Normalize.prototype.getRelatedPredicate = function(quad) {
	  return '<' + quad.predicate.value + '>';
	};
	
	// 4.8) Hash N-Degree Quads
	Normalize.prototype.hashNDegreeQuads = function(id, issuer, callback) {
	  var self = this;
	
	  // 1) Create a hash to related blank nodes map for storing hashes that
	  // identify related blank nodes.
	  // Note: 2) and 3) handled within `createHashToRelated`
	  var hashToRelated;
	  var md = new NormalizeHash(self.name);
	  self.waterfall([
	    function(callback) {
	      self.createHashToRelated(id, issuer, function(err, result) {
	        if(err) {
	          return callback(err);
	        }
	        hashToRelated = result;
	        callback();
	      });
	    },
	    function(callback) {
	      // 4) Create an empty string, data to hash.
	      // Note: We created a hash object `md` above instead.
	
	      // 5) For each related hash to blank node list mapping in hash to related
	      // blank nodes map, sorted lexicographically by related hash:
	      var hashes = Object.keys(hashToRelated).sort();
	      self.forEach(hashes, function(hash, idx, callback) {
	        // 5.1) Append the related hash to the data to hash.
	        md.update(hash);
	
	        // 5.2) Create a string chosen path.
	        var chosenPath = '';
	
	        // 5.3) Create an unset chosen issuer variable.
	        var chosenIssuer;
	
	        // 5.4) For each permutation of blank node list:
	        var permutator = new Permutator(hashToRelated[hash]);
	        self.whilst(
	          function() { return permutator.hasNext(); },
	          function(nextPermutation) {
	          var permutation = permutator.next();
	
	          // 5.4.1) Create a copy of issuer, issuer copy.
	          var issuerCopy = issuer.clone();
	
	          // 5.4.2) Create a string path.
	          var path = '';
	
	          // 5.4.3) Create a recursion list, to store blank node identifiers
	          // that must be recursively processed by this algorithm.
	          var recursionList = [];
	
	          self.waterfall([
	            function(callback) {
	              // 5.4.4) For each related in permutation:
	              self.forEach(permutation, function(related, idx, callback) {
	                // 5.4.4.1) If a canonical identifier has been issued for
	                // related, append it to path.
	                if(self.canonicalIssuer.hasId(related)) {
	                  path += self.canonicalIssuer.getId(related);
	                } else {
	                  // 5.4.4.2) Otherwise:
	                  // 5.4.4.2.1) If issuer copy has not issued an identifier for
	                  // related, append related to recursion list.
	                  if(!issuerCopy.hasId(related)) {
	                    recursionList.push(related);
	                  }
	                  // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
	                  // issuer copy and related and append the result to path.
	                  path += issuerCopy.getId(related);
	                }
	
	                // 5.4.4.3) If chosen path is not empty and the length of path
	                // is greater than or equal to the length of chosen path and
	                // path is lexicographically greater than chosen path, then
	                // skip to the next permutation.
	                if(chosenPath.length !== 0 &&
	                  path.length >= chosenPath.length && path > chosenPath) {
	                  // FIXME: may cause inaccurate total depth calculation
	                  return nextPermutation();
	                }
	                callback();
	              }, callback);
	            },
	            function(callback) {
	              // 5.4.5) For each related in recursion list:
	              self.forEach(recursionList, function(related, idx, callback) {
	                // 5.4.5.1) Set result to the result of recursively executing
	                // the Hash N-Degree Quads algorithm, passing related for
	                // identifier and issuer copy for path identifier issuer.
	                self.hashNDegreeQuads(
	                  related, issuerCopy, function(err, result) {
	                  if(err) {
	                    return callback(err);
	                  }
	
	                  // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
	                  // copy and related and append the result to path.
	                  path += issuerCopy.getId(related);
	
	                  // 5.4.5.3) Append <, the hash in result, and > to path.
	                  path += '<' + result.hash + '>';
	
	                  // 5.4.5.4) Set issuer copy to the identifier issuer in
	                  // result.
	                  issuerCopy = result.issuer;
	
	                  // 5.4.5.5) If chosen path is not empty and the length of path
	                  // is greater than or equal to the length of chosen path and
	                  // path is lexicographically greater than chosen path, then
	                  // skip to the next permutation.
	                  if(chosenPath.length !== 0 &&
	                    path.length >= chosenPath.length && path > chosenPath) {
	                    // FIXME: may cause inaccurate total depth calculation
	                    return nextPermutation();
	                  }
	                  callback();
	                });
	              }, callback);
	            },
	            function(callback) {
	              // 5.4.6) If chosen path is empty or path is lexicographically
	              // less than chosen path, set chosen path to path and chosen
	              // issuer to issuer copy.
	              if(chosenPath.length === 0 || path < chosenPath) {
	                chosenPath = path;
	                chosenIssuer = issuerCopy;
	              }
	              callback();
	            }
	          ], nextPermutation);
	        }, function(err) {
	          if(err) {
	            return callback(err);
	          }
	
	          // 5.5) Append chosen path to data to hash.
	          md.update(chosenPath);
	
	          // 5.6) Replace issuer, by reference, with chosen issuer.
	          issuer = chosenIssuer;
	          callback();
	        });
	      }, callback);
	    }
	  ], function(err) {
	    // 6) Return issuer and the hash that results from passing data to hash
	    // through the hash algorithm.
	    callback(err, {hash: md.digest(), issuer: issuer});
	  });
	};
	
	// helper for creating hash to related blank nodes map
	Normalize.prototype.createHashToRelated = function(id, issuer, callback) {
	  var self = this;
	
	  // 1) Create a hash to related blank nodes map for storing hashes that
	  // identify related blank nodes.
	  var hashToRelated = {};
	
	  // 2) Get a reference, quads, to the list of quads in the blank node to
	  // quads map for the key identifier.
	  var quads = self.blankNodeInfo[id].quads;
	
	  // 3) For each quad in quads:
	  self.forEach(quads, function(quad, idx, callback) {
	    // 3.1) For each component in quad, if component is the subject, object,
	    // and graph name and it is a blank node that is not identified by
	    // identifier:
	    self.forEach(quad, function(component, key, callback) {
	      if(key === 'predicate' ||
	        !(component.type === 'blank node' && component.value !== id)) {
	        return callback();
	      }
	      // 3.1.1) Set hash to the result of the Hash Related Blank Node
	      // algorithm, passing the blank node identifier for component as
	      // related, quad, path identifier issuer as issuer, and position as
	      // either s, o, or g based on whether component is a subject, object,
	      // graph name, respectively.
	      var related = component.value;
	      var position = POSITIONS[key];
	      self.hashRelatedBlankNode(
	        related, quad, issuer, position, function(err, hash) {
	        if(err) {
	          return callback(err);
	        }
	        // 3.1.2) Add a mapping of hash to the blank node identifier for
	        // component to hash to related blank nodes map, adding an entry as
	        // necessary.
	        if(hash in hashToRelated) {
	          hashToRelated[hash].push(related);
	        } else {
	          hashToRelated[hash] = [related];
	        }
	        callback();
	      });
	    }, callback);
	  }, function(err) {
	    callback(err, hashToRelated);
	  });
	};
	
	// helper that iterates over quad components (skips predicate)
	Normalize.prototype.forEachComponent = function(quad, op) {
	  for(var key in quad) {
	    // skip `predicate`
	    if(key === 'predicate') {
	      continue;
	    }
	    op(quad[key], key, quad);
	  }
	};
	
	return Normalize;
	
	})(); // end of define URDNA2015
	
	/////////////////////////////// DEFINE URGNA2012 //////////////////////////////
	
	var URGNA2012 = (function() {
	
	var Normalize = function(options) {
	  URDNA2015.call(this, options);
	  this.name = 'URGNA2012';
	};
	Normalize.prototype = new URDNA2015();
	
	// helper for modifying component during Hash First Degree Quads
	Normalize.prototype.modifyFirstDegreeComponent = function(id, component, key) {
	  if(component.type !== 'blank node') {
	    return component;
	  }
	  component = _clone(component);
	  if(key === 'name') {
	    component.value = '_:g';
	  } else {
	    component.value = (component.value === id ? '_:a' : '_:z');
	  }
	  return component;
	};
	
	// helper for getting a related predicate
	Normalize.prototype.getRelatedPredicate = function(quad) {
	  return quad.predicate.value;
	};
	
	// helper for creating hash to related blank nodes map
	Normalize.prototype.createHashToRelated = function(id, issuer, callback) {
	  var self = this;
	
	  // 1) Create a hash to related blank nodes map for storing hashes that
	  // identify related blank nodes.
	  var hashToRelated = {};
	
	  // 2) Get a reference, quads, to the list of quads in the blank node to
	  // quads map for the key identifier.
	  var quads = self.blankNodeInfo[id].quads;
	
	  // 3) For each quad in quads:
	  self.forEach(quads, function(quad, idx, callback) {
	    // 3.1) If the quad's subject is a blank node that does not match
	    // identifier, set hash to the result of the Hash Related Blank Node
	    // algorithm, passing the blank node identifier for subject as related,
	    // quad, path identifier issuer as issuer, and p as position.
	    var position;
	    var related;
	    if(quad.subject.type === 'blank node' && quad.subject.value !== id) {
	      related = quad.subject.value;
	      position = 'p';
	    } else if(quad.object.type === 'blank node' && quad.object.value !== id) {
	      // 3.2) Otherwise, if quad's object is a blank node that does not match
	      // identifier, to the result of the Hash Related Blank Node algorithm,
	      // passing the blank node identifier for object as related, quad, path
	      // identifier issuer as issuer, and r as position.
	      related = quad.object.value;
	      position = 'r';
	    } else {
	      // 3.3) Otherwise, continue to the next quad.
	      return callback();
	    }
	    // 3.4) Add a mapping of hash to the blank node identifier for the
	    // component that matched (subject or object) to hash to related blank
	    // nodes map, adding an entry as necessary.
	    self.hashRelatedBlankNode(
	      related, quad, issuer, position, function(err, hash) {
	      if(hash in hashToRelated) {
	        hashToRelated[hash].push(related);
	      } else {
	        hashToRelated[hash] = [related];
	      }
	      callback();
	    });
	  }, function(err) {
	    callback(err, hashToRelated);
	  });
	};
	
	return Normalize;
	
	})(); // end of define URGNA2012
	
	/**
	 * Recursively flattens the subjects in the given JSON-LD expanded input
	 * into a node map.
	 *
	 * @param input the JSON-LD expanded input.
	 * @param graphs a map of graph name to subject map.
	 * @param graph the name of the current graph.
	 * @param issuer the blank node identifier issuer.
	 * @param name the name assigned to the current input if it is a bnode.
	 * @param list the list to append to, null for none.
	 */
	function _createNodeMap(input, graphs, graph, issuer, name, list) {
	  // recurse through array
	  if(_isArray(input)) {
	    for(var i = 0; i < input.length; ++i) {
	      _createNodeMap(input[i], graphs, graph, issuer, undefined, list);
	    }
	    return;
	  }
	
	  // add non-object to list
	  if(!_isObject(input)) {
	    if(list) {
	      list.push(input);
	    }
	    return;
	  }
	
	  // add values to list
	  if(_isValue(input)) {
	    if('@type' in input) {
	      var type = input['@type'];
	      // rename @type blank node
	      if(type.indexOf('_:') === 0) {
	        input['@type'] = type = issuer.getId(type);
	      }
	    }
	    if(list) {
	      list.push(input);
	    }
	    return;
	  }
	
	  // Note: At this point, input must be a subject.
	
	  // spec requires @type to be named first, so assign names early
	  if('@type' in input) {
	    var types = input['@type'];
	    for(var i = 0; i < types.length; ++i) {
	      var type = types[i];
	      if(type.indexOf('_:') === 0) {
	        issuer.getId(type);
	      }
	    }
	  }
	
	  // get name for subject
	  if(_isUndefined(name)) {
	    name = _isBlankNode(input) ? issuer.getId(input['@id']) : input['@id'];
	  }
	
	  // add subject reference to list
	  if(list) {
	    list.push({'@id': name});
	  }
	
	  // create new subject or merge into existing one
	  var subjects = graphs[graph];
	  var subject = subjects[name] = subjects[name] || {};
	  subject['@id'] = name;
	  var properties = Object.keys(input).sort();
	  for(var pi = 0; pi < properties.length; ++pi) {
	    var property = properties[pi];
	
	    // skip @id
	    if(property === '@id') {
	      continue;
	    }
	
	    // handle reverse properties
	    if(property === '@reverse') {
	      var referencedNode = {'@id': name};
	      var reverseMap = input['@reverse'];
	      for(var reverseProperty in reverseMap) {
	        var items = reverseMap[reverseProperty];
	        for(var ii = 0; ii < items.length; ++ii) {
	          var item = items[ii];
	          var itemName = item['@id'];
	          if(_isBlankNode(item)) {
	            itemName = issuer.getId(itemName);
	          }
	          _createNodeMap(item, graphs, graph, issuer, itemName);
	          jsonld.addValue(
	            subjects[itemName], reverseProperty, referencedNode,
	            {propertyIsArray: true, allowDuplicate: false});
	        }
	      }
	      continue;
	    }
	
	    // recurse into graph
	    if(property === '@graph') {
	      // add graph subjects map entry
	      if(!(name in graphs)) {
	        graphs[name] = {};
	      }
	      var g = (graph === '@merged') ? graph : name;
	      _createNodeMap(input[property], graphs, g, issuer);
	      continue;
	    }
	
	    // copy non-@type keywords
	    if(property !== '@type' && _isKeyword(property)) {
	      if(property === '@index' && property in subject &&
	        (input[property] !== subject[property] ||
	        input[property]['@id'] !== subject[property]['@id'])) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; conflicting @index property detected.',
	          'jsonld.SyntaxError',
	          {code: 'conflicting indexes', subject: subject});
	      }
	      subject[property] = input[property];
	      continue;
	    }
	
	    // iterate over objects
	    var objects = input[property];
	
	    // if property is a bnode, assign it a new id
	    if(property.indexOf('_:') === 0) {
	      property = issuer.getId(property);
	    }
	
	    // ensure property is added for empty arrays
	    if(objects.length === 0) {
	      jsonld.addValue(subject, property, [], {propertyIsArray: true});
	      continue;
	    }
	    for(var oi = 0; oi < objects.length; ++oi) {
	      var o = objects[oi];
	
	      if(property === '@type') {
	        // rename @type blank nodes
	        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;
	      }
	
	      // handle embedded subject or subject reference
	      if(_isSubject(o) || _isSubjectReference(o)) {
	        // relabel blank node @id
	        var id = _isBlankNode(o) ? issuer.getId(o['@id']) : o['@id'];
	
	        // add reference and recurse
	        jsonld.addValue(
	          subject, property, {'@id': id},
	          {propertyIsArray: true, allowDuplicate: false});
	        _createNodeMap(o, graphs, graph, issuer, id);
	      } else if(_isList(o)) {
	        // handle @list
	        var _list = [];
	        _createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
	        o = {'@list': _list};
	        jsonld.addValue(
	          subject, property, o,
	          {propertyIsArray: true, allowDuplicate: false});
	      } else {
	        // handle @value
	        _createNodeMap(o, graphs, graph, issuer, name);
	        jsonld.addValue(
	          subject, property, o, {propertyIsArray: true, allowDuplicate: false});
	      }
	    }
	  }
	}
	
	function _mergeNodeMaps(graphs) {
	  // add all non-default graphs to default graph
	  var defaultGraph = graphs['@default'];
	  var graphNames = Object.keys(graphs).sort();
	  for(var i = 0; i < graphNames.length; ++i) {
	    var graphName = graphNames[i];
	    if(graphName === '@default') {
	      continue;
	    }
	    var nodeMap = graphs[graphName];
	    var subject = defaultGraph[graphName];
	    if(!subject) {
	      defaultGraph[graphName] = subject = {
	        '@id': graphName,
	        '@graph': []
	      };
	    } else if(!('@graph' in subject)) {
	      subject['@graph'] = [];
	    }
	    var graph = subject['@graph'];
	    var ids = Object.keys(nodeMap).sort();
	    for(var ii = 0; ii < ids.length; ++ii) {
	      var node = nodeMap[ids[ii]];
	      // only add full subjects
	      if(!_isSubjectReference(node)) {
	        graph.push(node);
	      }
	    }
	  }
	  return defaultGraph;
	}
	
	/**
	 * Frames subjects according to the given frame.
	 *
	 * @param state the current framing state.
	 * @param subjects the subjects to filter.
	 * @param frame the frame.
	 * @param parent the parent subject or top-level array.
	 * @param property the parent property, initialized to null.
	 */
	function _frame(state, subjects, frame, parent, property) {
	  // validate the frame
	  _validateFrame(frame);
	  frame = frame[0];
	
	  // get flags for current frame
	  var options = state.options;
	  var flags = {
	    embed: _getFrameFlag(frame, options, 'embed'),
	    explicit: _getFrameFlag(frame, options, 'explicit'),
	    requireAll: _getFrameFlag(frame, options, 'requireAll')
	  };
	
	  // filter out subjects that match the frame
	  var matches = _filterSubjects(state, subjects, frame, flags);
	
	  // add matches to output
	  var ids = Object.keys(matches).sort();
	  for(var idx = 0; idx < ids.length; ++idx) {
	    var id = ids[idx];
	    var subject = matches[id];
	
	    if(flags.embed === '@link' && id in state.link) {
	      // TODO: may want to also match an existing linked subject against
	      // the current frame ... so different frames could produce different
	      // subjects that are only shared in-memory when the frames are the same
	
	      // add existing linked subject
	      _addFrameOutput(parent, property, state.link[id]);
	      continue;
	    }
	
	    /* Note: In order to treat each top-level match as a compartmentalized
	    result, clear the unique embedded subjects map when the property is null,
	    which only occurs at the top-level. */
	    if(property === null) {
	      state.uniqueEmbeds = {};
	    }
	
	    // start output for subject
	    var output = {};
	    output['@id'] = id;
	    state.link[id] = output;
	
	    // if embed is @never or if a circular reference would be created by an
	    // embed, the subject cannot be embedded, just add the reference;
	    // note that a circular reference won't occur when the embed flag is
	    // `@link` as the above check will short-circuit before reaching this point
	    if(flags.embed === '@never' ||
	      _createsCircularReference(subject, state.subjectStack)) {
	      _addFrameOutput(parent, property, output);
	      continue;
	    }
	
	    // if only the last match should be embedded
	    if(flags.embed === '@last') {
	      // remove any existing embed
	      if(id in state.uniqueEmbeds) {
	        _removeEmbed(state, id);
	      }
	      state.uniqueEmbeds[id] = {parent: parent, property: property};
	    }
	
	    // push matching subject onto stack to enable circular embed checks
	    state.subjectStack.push(subject);
	
	    // iterate over subject properties
	    var props = Object.keys(subject).sort();
	    for(var i = 0; i < props.length; i++) {
	      var prop = props[i];
	
	      // copy keywords to output
	      if(_isKeyword(prop)) {
	        output[prop] = _clone(subject[prop]);
	        continue;
	      }
	
	      // explicit is on and property isn't in the frame, skip processing
	      if(flags.explicit && !(prop in frame)) {
	        continue;
	      }
	
	      // add objects
	      var objects = subject[prop];
	      for(var oi = 0; oi < objects.length; ++oi) {
	        var o = objects[oi];
	
	        // recurse into list
	        if(_isList(o)) {
	          // add empty list
	          var list = {'@list': []};
	          _addFrameOutput(output, prop, list);
	
	          // add list objects
	          var src = o['@list'];
	          for(var n in src) {
	            o = src[n];
	            if(_isSubjectReference(o)) {
	              var subframe = (prop in frame ?
	                frame[prop][0]['@list'] : _createImplicitFrame(flags));
	              // recurse into subject reference
	              _frame(state, [o['@id']], subframe, list, '@list');
	            } else {
	              // include other values automatically
	              _addFrameOutput(list, '@list', _clone(o));
	            }
	          }
	          continue;
	        }
	
	        if(_isSubjectReference(o)) {
	          // recurse into subject reference
	          var subframe = (prop in frame ?
	            frame[prop] : _createImplicitFrame(flags));
	          _frame(state, [o['@id']], subframe, output, prop);
	        } else {
	          // include other values automatically
	          _addFrameOutput(output, prop, _clone(o));
	        }
	      }
	    }
	
	    // handle defaults
	    var props = Object.keys(frame).sort();
	    for(var i = 0; i < props.length; ++i) {
	      var prop = props[i];
	
	      // skip keywords
	      if(_isKeyword(prop)) {
	        continue;
	      }
	
	      // if omit default is off, then include default values for properties
	      // that appear in the next frame but are not in the matching subject
	      var next = frame[prop][0];
	      var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
	      if(!omitDefaultOn && !(prop in output)) {
	        var preserve = '@null';
	        if('@default' in next) {
	          preserve = _clone(next['@default']);
	        }
	        if(!_isArray(preserve)) {
	          preserve = [preserve];
	        }
	        output[prop] = [{'@preserve': preserve}];
	      }
	    }
	
	    // add output to parent
	    _addFrameOutput(parent, property, output);
	
	    // pop matching subject from circular ref-checking stack
	    state.subjectStack.pop();
	  }
	}
	
	/**
	 * Creates an implicit frame when recursing through subject matches. If
	 * a frame doesn't have an explicit frame for a particular property, then
	 * a wildcard child frame will be created that uses the same flags that the
	 * parent frame used.
	 *
	 * @param flags the current framing flags.
	 *
	 * @return the implicit frame.
	 */
	function _createImplicitFrame(flags) {
	  var frame = {};
	  for(var key in flags) {
	    if(flags[key] !== undefined) {
	      frame['@' + key] = [flags[key]];
	    }
	  }
	  return [frame];
	}
	
	/**
	 * Checks the current subject stack to see if embedding the given subject
	 * would cause a circular reference.
	 *
	 * @param subjectToEmbed the subject to embed.
	 * @param subjectStack the current stack of subjects.
	 *
	 * @return true if a circular reference would be created, false if not.
	 */
	function _createsCircularReference(subjectToEmbed, subjectStack) {
	  for(var i = subjectStack.length - 1; i >= 0; --i) {
	    if(subjectStack[i]['@id'] === subjectToEmbed['@id']) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Gets the frame flag value for the given flag name.
	 *
	 * @param frame the frame.
	 * @param options the framing options.
	 * @param name the flag name.
	 *
	 * @return the flag value.
	 */
	function _getFrameFlag(frame, options, name) {
	  var flag = '@' + name;
	  var rval = (flag in frame ? frame[flag][0] : options[name]);
	  if(name === 'embed') {
	    // default is "@last"
	    // backwards-compatibility support for "embed" maps:
	    // true => "@last"
	    // false => "@never"
	    if(rval === true) {
	      rval = '@last';
	    } else if(rval === false) {
	      rval = '@never';
	    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link') {
	      rval = '@last';
	    }
	  }
	  return rval;
	}
	
	/**
	 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
	 *
	 * @param frame the frame to validate.
	 */
	function _validateFrame(frame) {
	  if(!_isArray(frame) || frame.length !== 1 || !_isObject(frame[0])) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',
	      'jsonld.SyntaxError', {frame: frame});
	  }
	}
	
	/**
	 * Returns a map of all of the subjects that match a parsed frame.
	 *
	 * @param state the current framing state.
	 * @param subjects the set of subjects to filter.
	 * @param frame the parsed frame.
	 * @param flags the frame flags.
	 *
	 * @return all of the matched subjects.
	 */
	function _filterSubjects(state, subjects, frame, flags) {
	  // filter subjects in @id order
	  var rval = {};
	  for(var i = 0; i < subjects.length; ++i) {
	    var id = subjects[i];
	    var subject = state.subjects[id];
	    if(_filterSubject(subject, frame, flags)) {
	      rval[id] = subject;
	    }
	  }
	  return rval;
	}
	
	/**
	 * Returns true if the given subject matches the given frame.
	 *
	 * @param subject the subject to check.
	 * @param frame the frame to check.
	 * @param flags the frame flags.
	 *
	 * @return true if the subject matches, false if not.
	 */
	function _filterSubject(subject, frame, flags) {
	  // check @type (object value means 'any' type, fall through to ducktyping)
	  if('@type' in frame &&
	    !(frame['@type'].length === 1 && _isObject(frame['@type'][0]))) {
	    var types = frame['@type'];
	    for(var i = 0; i < types.length; ++i) {
	      // any matching @type is a match
	      if(jsonld.hasValue(subject, '@type', types[i])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  // check ducktype
	  var wildcard = true;
	  var matchesSome = false;
	  for(var key in frame) {
	    if(_isKeyword(key)) {
	      // skip non-@id and non-@type
	      if(key !== '@id' && key !== '@type') {
	        continue;
	      }
	      wildcard = false;
	
	      // check @id for a specific @id value
	      if(key === '@id' && _isString(frame[key])) {
	        if(subject[key] !== frame[key]) {
	          return false;
	        }
	        matchesSome = true;
	        continue;
	      }
	    }
	
	    wildcard = false;
	
	    if(key in subject) {
	      // frame[key] === [] means do not match if property is present
	      if(_isArray(frame[key]) && frame[key].length === 0 &&
	        subject[key] !== undefined) {
	        return false;
	      }
	      matchesSome = true;
	      continue;
	    }
	
	    // all properties must match to be a duck unless a @default is specified
	    var hasDefault = (_isArray(frame[key]) && _isObject(frame[key][0]) &&
	      '@default' in frame[key][0]);
	    if(flags.requireAll && !hasDefault) {
	      return false;
	    }
	  }
	
	  // return true if wildcard or subject matches some properties
	  return wildcard || matchesSome;
	}
	
	/**
	 * Removes an existing embed.
	 *
	 * @param state the current framing state.
	 * @param id the @id of the embed to remove.
	 */
	function _removeEmbed(state, id) {
	  // get existing embed
	  var embeds = state.uniqueEmbeds;
	  var embed = embeds[id];
	  var parent = embed.parent;
	  var property = embed.property;
	
	  // create reference to replace embed
	  var subject = {'@id': id};
	
	  // remove existing embed
	  if(_isArray(parent)) {
	    // replace subject with reference
	    for(var i = 0; i < parent.length; ++i) {
	      if(jsonld.compareValues(parent[i], subject)) {
	        parent[i] = subject;
	        break;
	      }
	    }
	  } else {
	    // replace subject with reference
	    var useArray = _isArray(parent[property]);
	    jsonld.removeValue(parent, property, subject, {propertyIsArray: useArray});
	    jsonld.addValue(parent, property, subject, {propertyIsArray: useArray});
	  }
	
	  // recursively remove dependent dangling embeds
	  var removeDependents = function(id) {
	    // get embed keys as a separate array to enable deleting keys in map
	    var ids = Object.keys(embeds);
	    for(var i = 0; i < ids.length; ++i) {
	      var next = ids[i];
	      if(next in embeds && _isObject(embeds[next].parent) &&
	        embeds[next].parent['@id'] === id) {
	        delete embeds[next];
	        removeDependents(next);
	      }
	    }
	  };
	  removeDependents(id);
	}
	
	/**
	 * Adds framing output to the given parent.
	 *
	 * @param parent the parent to add to.
	 * @param property the parent property.
	 * @param output the output to add.
	 */
	function _addFrameOutput(parent, property, output) {
	  if(_isObject(parent)) {
	    jsonld.addValue(parent, property, output, {propertyIsArray: true});
	  } else {
	    parent.push(output);
	  }
	}
	
	/**
	 * Removes the @preserve keywords as the last step of the framing algorithm.
	 *
	 * @param ctx the active context used to compact the input.
	 * @param input the framed, compacted output.
	 * @param options the compaction options used.
	 *
	 * @return the resulting output.
	 */
	function _removePreserve(ctx, input, options) {
	  // recurse through arrays
	  if(_isArray(input)) {
	    var output = [];
	    for(var i = 0; i < input.length; ++i) {
	      var result = _removePreserve(ctx, input[i], options);
	      // drop nulls from arrays
	      if(result !== null) {
	        output.push(result);
	      }
	    }
	    input = output;
	  } else if(_isObject(input)) {
	    // remove @preserve
	    if('@preserve' in input) {
	      if(input['@preserve'] === '@null') {
	        return null;
	      }
	      return input['@preserve'];
	    }
	
	    // skip @values
	    if(_isValue(input)) {
	      return input;
	    }
	
	    // recurse through @lists
	    if(_isList(input)) {
	      input['@list'] = _removePreserve(ctx, input['@list'], options);
	      return input;
	    }
	
	    // handle in-memory linked nodes
	    var idAlias = _compactIri(ctx, '@id');
	    if(idAlias in input) {
	      var id = input[idAlias];
	      if(id in options.link) {
	        var idx = options.link[id].indexOf(input);
	        if(idx === -1) {
	          // prevent circular visitation
	          options.link[id].push(input);
	        } else {
	          // already visited
	          return options.link[id][idx];
	        }
	      } else {
	        // prevent circular visitation
	        options.link[id] = [input];
	      }
	    }
	
	    // recurse through properties
	    for(var prop in input) {
	      var result = _removePreserve(ctx, input[prop], options);
	      var container = jsonld.getContextValue(ctx, prop, '@container');
	      if(options.compactArrays && _isArray(result) && result.length === 1 &&
	        container === null) {
	        result = result[0];
	      }
	      input[prop] = result;
	    }
	  }
	  return input;
	}
	
	/**
	 * Compares two strings first based on length and then lexicographically.
	 *
	 * @param a the first string.
	 * @param b the second string.
	 *
	 * @return -1 if a < b, 1 if a > b, 0 if a == b.
	 */
	function _compareShortestLeast(a, b) {
	  if(a.length < b.length) {
	    return -1;
	  }
	  if(b.length < a.length) {
	    return 1;
	  }
	  if(a === b) {
	    return 0;
	  }
	  return (a < b) ? -1 : 1;
	}
	
	/**
	 * Picks the preferred compaction term from the given inverse context entry.
	 *
	 * @param activeCtx the active context.
	 * @param iri the IRI to pick the term for.
	 * @param value the value to pick the term for.
	 * @param containers the preferred containers.
	 * @param typeOrLanguage either '@type' or '@language'.
	 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
	 *
	 * @return the preferred term.
	 */
	function _selectTerm(
	  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
	  if(typeOrLanguageValue === null) {
	    typeOrLanguageValue = '@null';
	  }
	
	  // preferences for the value of @type or @language
	  var prefs = [];
	
	  // determine prefs for @id based on whether or not value compacts to a term
	  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&
	    _isSubjectReference(value)) {
	    // prefer @reverse first
	    if(typeOrLanguageValue === '@reverse') {
	      prefs.push('@reverse');
	    }
	    // try to compact value to a term
	    var term = _compactIri(activeCtx, value['@id'], null, {vocab: true});
	    if(term in activeCtx.mappings &&
	      activeCtx.mappings[term] &&
	      activeCtx.mappings[term]['@id'] === value['@id']) {
	      // prefer @vocab
	      prefs.push.apply(prefs, ['@vocab', '@id']);
	    } else {
	      // prefer @id
	      prefs.push.apply(prefs, ['@id', '@vocab']);
	    }
	  } else {
	    prefs.push(typeOrLanguageValue);
	  }
	  prefs.push('@none');
	
	  var containerMap = activeCtx.inverse[iri];
	  for(var ci = 0; ci < containers.length; ++ci) {
	    // if container not available in the map, continue
	    var container = containers[ci];
	    if(!(container in containerMap)) {
	      continue;
	    }
	
	    var typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
	    for(var pi = 0; pi < prefs.length; ++pi) {
	      // if type/language option not available in the map, continue
	      var pref = prefs[pi];
	      if(!(pref in typeOrLanguageValueMap)) {
	        continue;
	      }
	
	      // select term
	      return typeOrLanguageValueMap[pref];
	    }
	  }
	
	  return null;
	}
	
	/**
	 * Compacts an IRI or keyword into a term or prefix if it can be. If the
	 * IRI has an associated value it may be passed.
	 *
	 * @param activeCtx the active context to use.
	 * @param iri the IRI to compact.
	 * @param value the value to check or null.
	 * @param relativeTo options for how to compact IRIs:
	 *          vocab: true to split after @vocab, false not to.
	 * @param reverse true if a reverse property is being compacted, false if not.
	 *
	 * @return the compacted term, prefix, keyword alias, or the original IRI.
	 */
	function _compactIri(activeCtx, iri, value, relativeTo, reverse) {
	  // can't compact null
	  if(iri === null) {
	    return iri;
	  }
	
	  // default value and parent to null
	  if(_isUndefined(value)) {
	    value = null;
	  }
	  // default reverse to false
	  if(_isUndefined(reverse)) {
	    reverse = false;
	  }
	  relativeTo = relativeTo || {};
	
	  var inverseCtx = activeCtx.getInverse();
	
	  // if term is a keyword, it can only be compacted to a simple alias
	  if(_isKeyword(iri)) {
	    if(iri in inverseCtx) {
	      return inverseCtx[iri]['@none']['@type']['@none'];
	    }
	    return iri;
	  }
	
	  // use inverse context to pick a term if iri is relative to vocab
	  if(relativeTo.vocab && iri in inverseCtx) {
	    var defaultLanguage = activeCtx['@language'] || '@none';
	
	    // prefer @index if available in value
	    var containers = [];
	    if(_isObject(value) && '@index' in value) {
	      containers.push('@index');
	    }
	
	    // defaults for term selection based on type/language
	    var typeOrLanguage = '@language';
	    var typeOrLanguageValue = '@null';
	
	    if(reverse) {
	      typeOrLanguage = '@type';
	      typeOrLanguageValue = '@reverse';
	      containers.push('@set');
	    } else if(_isList(value)) {
	      // choose the most specific term that works for all elements in @list
	      // only select @list containers if @index is NOT in value
	      if(!('@index' in value)) {
	        containers.push('@list');
	      }
	      var list = value['@list'];
	      var commonLanguage = (list.length === 0) ? defaultLanguage : null;
	      var commonType = null;
	      for(var i = 0; i < list.length; ++i) {
	        var item = list[i];
	        var itemLanguage = '@none';
	        var itemType = '@none';
	        if(_isValue(item)) {
	          if('@language' in item) {
	            itemLanguage = item['@language'];
	          } else if('@type' in item) {
	            itemType = item['@type'];
	          } else {
	            // plain literal
	            itemLanguage = '@null';
	          }
	        } else {
	          itemType = '@id';
	        }
	        if(commonLanguage === null) {
	          commonLanguage = itemLanguage;
	        } else if(itemLanguage !== commonLanguage && _isValue(item)) {
	          commonLanguage = '@none';
	        }
	        if(commonType === null) {
	          commonType = itemType;
	        } else if(itemType !== commonType) {
	          commonType = '@none';
	        }
	        // there are different languages and types in the list, so choose
	        // the most generic term, no need to keep iterating the list
	        if(commonLanguage === '@none' && commonType === '@none') {
	          break;
	        }
	      }
	      commonLanguage = commonLanguage || '@none';
	      commonType = commonType || '@none';
	      if(commonType !== '@none') {
	        typeOrLanguage = '@type';
	        typeOrLanguageValue = commonType;
	      } else {
	        typeOrLanguageValue = commonLanguage;
	      }
	    } else {
	      if(_isValue(value)) {
	        if('@language' in value && !('@index' in value)) {
	          containers.push('@language');
	          typeOrLanguageValue = value['@language'];
	        } else if('@type' in value) {
	          typeOrLanguage = '@type';
	          typeOrLanguageValue = value['@type'];
	        }
	      } else {
	        typeOrLanguage = '@type';
	        typeOrLanguageValue = '@id';
	      }
	      containers.push('@set');
	    }
	
	    // do term selection
	    containers.push('@none');
	    var term = _selectTerm(
	      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
	    if(term !== null) {
	      return term;
	    }
	  }
	
	  // no term match, use @vocab if available
	  if(relativeTo.vocab) {
	    if('@vocab' in activeCtx) {
	      // determine if vocab is a prefix of the iri
	      var vocab = activeCtx['@vocab'];
	      if(iri.indexOf(vocab) === 0 && iri !== vocab) {
	        // use suffix as relative iri if it is not a term in the active context
	        var suffix = iri.substr(vocab.length);
	        if(!(suffix in activeCtx.mappings)) {
	          return suffix;
	        }
	      }
	    }
	  }
	
	  // no term or @vocab match, check for possible CURIEs
	  var choice = null;
	  var idx = 0;
	  var partialMatches = [];
	  var iriMap = activeCtx.fastCurieMap;
	  // check for partial matches of against `iri`, which means look until
	  // iri.length - 1, not full length
	  var maxPartialLength = iri.length - 1;
	  for(; idx < maxPartialLength && iri[idx] in iriMap; ++idx) {
	    iriMap = iriMap[iri[idx]];
	    if('' in iriMap) {
	      partialMatches.push(iriMap[''][0]);
	    }
	  }
	  // check partial matches in reverse order to prefer longest ones first
	  for(var i = partialMatches.length - 1; i >= 0; --i) {
	    var entry = partialMatches[i];
	    var terms = entry.terms;
	    for(var ti = 0; ti < terms.length; ++ti) {
	      // a CURIE is usable if:
	      // 1. it has no mapping, OR
	      // 2. value is null, which means we're not compacting an @value, AND
	      //   the mapping matches the IRI
	      var curie = terms[ti] + ':' + iri.substr(entry.iri.length);
	      var isUsableCurie = (!(curie in activeCtx.mappings) ||
	        (value === null && activeCtx.mappings[curie]['@id'] === iri));
	
	      // select curie if it is shorter or the same length but lexicographically
	      // less than the current choice
	      if(isUsableCurie && (choice === null ||
	        _compareShortestLeast(curie, choice) < 0)) {
	        choice = curie;
	      }
	    }
	  }
	
	  // return chosen curie
	  if(choice !== null) {
	    return choice;
	  }
	
	  // compact IRI relative to base
	  if(!relativeTo.vocab) {
	    return _removeBase(activeCtx['@base'], iri);
	  }
	
	  // return IRI as is
	  return iri;
	}
	
	/**
	 * Performs value compaction on an object with '@value' or '@id' as the only
	 * property.
	 *
	 * @param activeCtx the active context.
	 * @param activeProperty the active property that points to the value.
	 * @param value the value to compact.
	 *
	 * @return the compaction result.
	 */
	function _compactValue(activeCtx, activeProperty, value) {
	  // value is a @value
	  if(_isValue(value)) {
	    // get context rules
	    var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');
	    var language = jsonld.getContextValue(
	      activeCtx, activeProperty, '@language');
	    var container = jsonld.getContextValue(
	      activeCtx, activeProperty, '@container');
	
	    // whether or not the value has an @index that must be preserved
	    var preserveIndex = (('@index' in value) &&
	      container !== '@index');
	
	    // if there's no @index to preserve ...
	    if(!preserveIndex) {
	      // matching @type or @language specified in context, compact value
	      if(value['@type'] === type || value['@language'] === language) {
	        return value['@value'];
	      }
	    }
	
	    // return just the value of @value if all are true:
	    // 1. @value is the only key or @index isn't being preserved
	    // 2. there is no default language or @value is not a string or
	    //   the key has a mapping with a null @language
	    var keyCount = Object.keys(value).length;
	    var isValueOnlyKey = (keyCount === 1 ||
	      (keyCount === 2 && ('@index' in value) && !preserveIndex));
	    var hasDefaultLanguage = ('@language' in activeCtx);
	    var isValueString = _isString(value['@value']);
	    var hasNullMapping = (activeCtx.mappings[activeProperty] &&
	      activeCtx.mappings[activeProperty]['@language'] === null);
	    if(isValueOnlyKey &&
	      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
	      return value['@value'];
	    }
	
	    var rval = {};
	
	    // preserve @index
	    if(preserveIndex) {
	      rval[_compactIri(activeCtx, '@index')] = value['@index'];
	    }
	
	    if('@type' in value) {
	      // compact @type IRI
	      rval[_compactIri(activeCtx, '@type')] = _compactIri(
	        activeCtx, value['@type'], null, {vocab: true});
	    } else if('@language' in value) {
	      // alias @language
	      rval[_compactIri(activeCtx, '@language')] = value['@language'];
	    }
	
	    // alias @value
	    rval[_compactIri(activeCtx, '@value')] = value['@value'];
	
	    return rval;
	  }
	
	  // value is a subject reference
	  var expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true});
	  var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');
	  var compacted = _compactIri(
	    activeCtx, value['@id'], null, {vocab: type === '@vocab'});
	
	  // compact to scalar
	  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
	    return compacted;
	  }
	
	  var rval = {};
	  rval[_compactIri(activeCtx, '@id')] = compacted;
	  return rval;
	}
	
	/**
	 * Creates a term definition during context processing.
	 *
	 * @param activeCtx the current active context.
	 * @param localCtx the local context being processed.
	 * @param term the term in the local context to define the mapping for.
	 * @param defined a map of defining/defined keys to detect cycles and prevent
	 *          double definitions.
	 */
	function _createTermDefinition(activeCtx, localCtx, term, defined) {
	  if(term in defined) {
	    // term already defined
	    if(defined[term]) {
	      return;
	    }
	    // cycle detected
	    throw new JsonLdError(
	      'Cyclical context definition detected.',
	      'jsonld.CyclicalContext',
	      {code: 'cyclic IRI mapping', context: localCtx, term: term});
	  }
	
	  // now defining term
	  defined[term] = false;
	
	  if(_isKeyword(term)) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; keywords cannot be overridden.',
	      'jsonld.SyntaxError',
	      {code: 'keyword redefinition', context: localCtx, term: term});
	  }
	
	  if(term === '') {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; a term cannot be an empty string.',
	      'jsonld.SyntaxError',
	      {code: 'invalid term definition', context: localCtx});
	  }
	
	  // remove old mapping
	  if(activeCtx.mappings[term]) {
	    delete activeCtx.mappings[term];
	  }
	
	  // get context term value
	  var value = localCtx[term];
	
	  // clear context entry
	  if(value === null || (_isObject(value) && value['@id'] === null)) {
	    activeCtx.mappings[term] = null;
	    defined[term] = true;
	    return;
	  }
	
	  // convert short-hand value to object w/@id
	  if(_isString(value)) {
	    value = {'@id': value};
	  }
	
	  if(!_isObject(value)) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; @context property values must be ' +
	      'strings or objects.',
	      'jsonld.SyntaxError',
	      {code: 'invalid term definition', context: localCtx});
	  }
	
	  // create new mapping
	  var mapping = activeCtx.mappings[term] = {};
	  mapping.reverse = false;
	
	  if('@reverse' in value) {
	    if('@id' in value) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
	        'contain @id.', 'jsonld.SyntaxError',
	        {code: 'invalid reverse property', context: localCtx});
	    }
	    var reverse = value['@reverse'];
	    if(!_isString(reverse)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }
	
	    // expand and add @id mapping
	    var id = _expandIri(
	      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined);
	    if(!_isAbsoluteIri(id)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +
	        'absolute IRI or a blank node identifier.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }
	    mapping['@id'] = id;
	    mapping.reverse = true;
	  } else if('@id' in value) {
	    var id = value['@id'];
	    if(!_isString(id)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; a @context @id value must be an array ' +
	        'of strings or a string.',
	        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
	    }
	    if(id !== term) {
	      // expand and add @id mapping
	      id = _expandIri(
	        activeCtx, id, {vocab: true, base: false}, localCtx, defined);
	      if(!_isAbsoluteIri(id) && !_isKeyword(id)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; a @context @id value must be an ' +
	          'absolute IRI, a blank node identifier, or a keyword.',
	          'jsonld.SyntaxError',
	          {code: 'invalid IRI mapping', context: localCtx});
	      }
	      mapping['@id'] = id;
	    }
	  }
	
	  // always compute whether term has a colon as an optimization for
	  // _compactIri
	  var colon = term.indexOf(':');
	  mapping._termHasColon = (colon !== -1);
	
	  if(!('@id' in mapping)) {
	    // see if the term has a prefix
	    if(mapping._termHasColon) {
	      var prefix = term.substr(0, colon);
	      if(prefix in localCtx) {
	        // define parent prefix
	        _createTermDefinition(activeCtx, localCtx, prefix, defined);
	      }
	
	      if(activeCtx.mappings[prefix]) {
	        // set @id based on prefix parent
	        var suffix = term.substr(colon + 1);
	        mapping['@id'] = activeCtx.mappings[prefix]['@id'] + suffix;
	      } else {
	        // term is an absolute IRI
	        mapping['@id'] = term;
	      }
	    } else {
	      // non-IRIs *must* define @ids if @vocab is not available
	      if(!('@vocab' in activeCtx)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; @context terms must define an @id.',
	          'jsonld.SyntaxError',
	          {code: 'invalid IRI mapping', context: localCtx, term: term});
	      }
	      // prepend vocab to term
	      mapping['@id'] = activeCtx['@vocab'] + term;
	    }
	  }
	
	  // IRI mapping now defined
	  defined[term] = true;
	
	  if('@type' in value) {
	    var type = value['@type'];
	    if(!_isString(type)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; an @context @type values must be a string.',
	        'jsonld.SyntaxError',
	        {code: 'invalid type mapping', context: localCtx});
	    }
	
	    if(type !== '@id' && type !== '@vocab') {
	      // expand @type to full IRI
	      type = _expandIri(
	        activeCtx, type, {vocab: true, base: false}, localCtx, defined);
	      if(!_isAbsoluteIri(type)) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; an @context @type value must be an ' +
	          'absolute IRI.',
	          'jsonld.SyntaxError',
	          {code: 'invalid type mapping', context: localCtx});
	      }
	      if(type.indexOf('_:') === 0) {
	        throw new JsonLdError(
	          'Invalid JSON-LD syntax; an @context @type values must be an IRI, ' +
	          'not a blank node identifier.',
	          'jsonld.SyntaxError',
	          {code: 'invalid type mapping', context: localCtx});
	      }
	    }
	
	    // add @type to mapping
	    mapping['@type'] = type;
	  }
	
	  if('@container' in value) {
	    var container = value['@container'];
	    if(container !== '@list' && container !== '@set' &&
	      container !== '@index' && container !== '@language') {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @container value must be ' +
	        'one of the following: @list, @set, @index, or @language.',
	        'jsonld.SyntaxError',
	        {code: 'invalid container mapping', context: localCtx});
	    }
	    if(mapping.reverse && container !== '@index' && container !== '@set' &&
	      container !== null) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +
	        'type definition must be @index or @set.', 'jsonld.SyntaxError',
	        {code: 'invalid reverse property', context: localCtx});
	    }
	
	    // add @container to mapping
	    mapping['@container'] = container;
	  }
	
	  if('@language' in value && !('@type' in value)) {
	    var language = value['@language'];
	    if(language !== null && !_isString(language)) {
	      throw new JsonLdError(
	        'Invalid JSON-LD syntax; @context @language value must be ' +
	        'a string or null.', 'jsonld.SyntaxError',
	        {code: 'invalid language mapping', context: localCtx});
	    }
	
	    // add @language to mapping
	    if(language !== null) {
	      language = language.toLowerCase();
	    }
	    mapping['@language'] = language;
	  }
	
	  // disallow aliasing @context and @preserve
	  var id = mapping['@id'];
	  if(id === '@context' || id === '@preserve') {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',
	      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});
	  }
	}
	
	/**
	 * Expands a string to a full IRI. The string may be a term, a prefix, a
	 * relative IRI, or an absolute IRI. The associated absolute IRI will be
	 * returned.
	 *
	 * @param activeCtx the current active context.
	 * @param value the string to expand.
	 * @param relativeTo options for how to resolve relative IRIs:
	 *          base: true to resolve against the base IRI, false not to.
	 *          vocab: true to concatenate after @vocab, false not to.
	 * @param localCtx the local context being processed (only given if called
	 *          during context processing).
	 * @param defined a map for tracking cycles in context definitions (only given
	 *          if called during context processing).
	 *
	 * @return the expanded value.
	 */
	function _expandIri(activeCtx, value, relativeTo, localCtx, defined) {
	  // already expanded
	  if(value === null || _isKeyword(value)) {
	    return value;
	  }
	
	  // ensure value is interpreted as a string
	  value = String(value);
	
	  // define term dependency if not defined
	  if(localCtx && value in localCtx && defined[value] !== true) {
	    _createTermDefinition(activeCtx, localCtx, value, defined);
	  }
	
	  relativeTo = relativeTo || {};
	  if(relativeTo.vocab) {
	    var mapping = activeCtx.mappings[value];
	
	    // value is explicitly ignored with a null mapping
	    if(mapping === null) {
	      return null;
	    }
	
	    if(mapping) {
	      // value is a term
	      return mapping['@id'];
	    }
	  }
	
	  // split value into prefix:suffix
	  var colon = value.indexOf(':');
	  if(colon !== -1) {
	    var prefix = value.substr(0, colon);
	    var suffix = value.substr(colon + 1);
	
	    // do not expand blank nodes (prefix of '_') or already-absolute
	    // IRIs (suffix of '//')
	    if(prefix === '_' || suffix.indexOf('//') === 0) {
	      return value;
	    }
	
	    // prefix dependency not defined, define it
	    if(localCtx && prefix in localCtx) {
	      _createTermDefinition(activeCtx, localCtx, prefix, defined);
	    }
	
	    // use mapping if prefix is defined
	    var mapping = activeCtx.mappings[prefix];
	    if(mapping) {
	      return mapping['@id'] + suffix;
	    }
	
	    // already absolute IRI
	    return value;
	  }
	
	  // prepend vocab
	  if(relativeTo.vocab && '@vocab' in activeCtx) {
	    return activeCtx['@vocab'] + value;
	  }
	
	  // prepend base
	  var rval = value;
	  if(relativeTo.base) {
	    rval = jsonld.prependBase(activeCtx['@base'], rval);
	  }
	
	  return rval;
	}
	
	function _prependBase(base, iri) {
	  // skip IRI processing
	  if(base === null) {
	    return iri;
	  }
	  // already an absolute IRI
	  if(iri.indexOf(':') !== -1) {
	    return iri;
	  }
	
	  // parse base if it is a string
	  if(_isString(base)) {
	    base = jsonld.url.parse(base || '');
	  }
	
	  // parse given IRI
	  var rel = jsonld.url.parse(iri);
	
	  // per RFC3986 5.2.2
	  var transform = {
	    protocol: base.protocol || ''
	  };
	
	  if(rel.authority !== null) {
	    transform.authority = rel.authority;
	    transform.path = rel.path;
	    transform.query = rel.query;
	  } else {
	    transform.authority = base.authority;
	
	    if(rel.path === '') {
	      transform.path = base.path;
	      if(rel.query !== null) {
	        transform.query = rel.query;
	      } else {
	        transform.query = base.query;
	      }
	    } else {
	      if(rel.path.indexOf('/') === 0) {
	        // IRI represents an absolute path
	        transform.path = rel.path;
	      } else {
	        // merge paths
	        var path = base.path;
	
	        // append relative path to the end of the last directory from base
	        if(rel.path !== '') {
	          path = path.substr(0, path.lastIndexOf('/') + 1);
	          if(path.length > 0 && path.substr(-1) !== '/') {
	            path += '/';
	          }
	          path += rel.path;
	        }
	
	        transform.path = path;
	      }
	      transform.query = rel.query;
	    }
	  }
	
	  // remove slashes and dots in path
	  transform.path = _removeDotSegments(transform.path, !!transform.authority);
	
	  // construct URL
	  var rval = transform.protocol;
	  if(transform.authority !== null) {
	    rval += '//' + transform.authority;
	  }
	  rval += transform.path;
	  if(transform.query !== null) {
	    rval += '?' + transform.query;
	  }
	  if(rel.fragment !== null) {
	    rval += '#' + rel.fragment;
	  }
	
	  // handle empty base
	  if(rval === '') {
	    rval = './';
	  }
	
	  return rval;
	}
	
	/**
	 * Removes a base IRI from the given absolute IRI.
	 *
	 * @param base the base IRI.
	 * @param iri the absolute IRI.
	 *
	 * @return the relative IRI if relative to base, otherwise the absolute IRI.
	 */
	function _removeBase(base, iri) {
	  // skip IRI processing
	  if(base === null) {
	    return iri;
	  }
	
	  if(_isString(base)) {
	    base = jsonld.url.parse(base || '');
	  }
	
	  // establish base root
	  var root = '';
	  if(base.href !== '') {
	    root += (base.protocol || '') + '//' + (base.authority || '');
	  } else if(iri.indexOf('//')) {
	    // support network-path reference with empty base
	    root += '//';
	  }
	
	  // IRI not relative to base
	  if(iri.indexOf(root) !== 0) {
	    return iri;
	  }
	
	  // remove root from IRI and parse remainder
	  var rel = jsonld.url.parse(iri.substr(root.length));
	
	  // remove path segments that match (do not remove last segment unless there
	  // is a hash or query)
	  var baseSegments = base.normalizedPath.split('/');
	  var iriSegments = rel.normalizedPath.split('/');
	  var last = (rel.fragment || rel.query) ? 0 : 1;
	  while(baseSegments.length > 0 && iriSegments.length > last) {
	    if(baseSegments[0] !== iriSegments[0]) {
	      break;
	    }
	    baseSegments.shift();
	    iriSegments.shift();
	  }
	
	  // use '../' for each non-matching base segment
	  var rval = '';
	  if(baseSegments.length > 0) {
	    // don't count the last segment (if it ends with '/' last path doesn't
	    // count and if it doesn't end with '/' it isn't a path)
	    baseSegments.pop();
	    for(var i = 0; i < baseSegments.length; ++i) {
	      rval += '../';
	    }
	  }
	
	  // prepend remaining segments
	  rval += iriSegments.join('/');
	
	  // add query and hash
	  if(rel.query !== null) {
	    rval += '?' + rel.query;
	  }
	  if(rel.fragment !== null) {
	    rval += '#' + rel.fragment;
	  }
	
	  // handle empty base
	  if(rval === '') {
	    rval = './';
	  }
	
	  return rval;
	}
	
	/**
	 * Gets the initial context.
	 *
	 * @param options the options to use:
	 *          [base] the document base IRI.
	 *
	 * @return the initial context.
	 */
	function _getInitialContext(options) {
	  var base = jsonld.url.parse(options.base || '');
	  return {
	    '@base': base,
	    mappings: {},
	    inverse: null,
	    getInverse: _createInverseContext,
	    clone: _cloneActiveContext
	  };
	
	  /**
	   * Generates an inverse context for use in the compaction algorithm, if
	   * not already generated for the given active context.
	   *
	   * @return the inverse context.
	   */
	  function _createInverseContext() {
	    var activeCtx = this;
	
	    // lazily create inverse
	    if(activeCtx.inverse) {
	      return activeCtx.inverse;
	    }
	    var inverse = activeCtx.inverse = {};
	
	    // variables for building fast CURIE map
	    var fastCurieMap = activeCtx.fastCurieMap = {};
	    var irisToTerms = {};
	
	    // handle default language
	    var defaultLanguage = activeCtx['@language'] || '@none';
	
	    // create term selections for each mapping in the context, ordered by
	    // shortest and then lexicographically least
	    var mappings = activeCtx.mappings;
	    var terms = Object.keys(mappings).sort(_compareShortestLeast);
	    for(var i = 0; i < terms.length; ++i) {
	      var term = terms[i];
	      var mapping = mappings[term];
	      if(mapping === null) {
	        continue;
	      }
	
	      var container = mapping['@container'] || '@none';
	
	      // iterate over every IRI in the mapping
	      var ids = mapping['@id'];
	      if(!_isArray(ids)) {
	        ids = [ids];
	      }
	      for(var ii = 0; ii < ids.length; ++ii) {
	        var iri = ids[ii];
	        var entry = inverse[iri];
	        var isKeyword = _isKeyword(iri);
	
	        if(!entry) {
	          // initialize entry
	          inverse[iri] = entry = {};
	
	          if(!isKeyword && !mapping._termHasColon) {
	            // init IRI to term map and fast CURIE prefixes
	            irisToTerms[iri] = [term];
	            var fastCurieEntry = {iri: iri, terms: irisToTerms[iri]};
	            if(iri[0] in fastCurieMap) {
	              fastCurieMap[iri[0]].push(fastCurieEntry);
	            } else {
	              fastCurieMap[iri[0]] = [fastCurieEntry];
	            }
	          }
	        } else if(!isKeyword && !mapping._termHasColon) {
	          // add IRI to term match
	          irisToTerms[iri].push(term);
	        }
	
	        // add new entry
	        if(!entry[container]) {
	          entry[container] = {
	            '@language': {},
	            '@type': {}
	          };
	        }
	        entry = entry[container];
	
	        if(mapping.reverse) {
	          // term is preferred for values using @reverse
	          _addPreferredTerm(mapping, term, entry['@type'], '@reverse');
	        } else if('@type' in mapping) {
	          // term is preferred for values using specific type
	          _addPreferredTerm(mapping, term, entry['@type'], mapping['@type']);
	        } else if('@language' in mapping) {
	          // term is preferred for values using specific language
	          var language = mapping['@language'] || '@null';
	          _addPreferredTerm(mapping, term, entry['@language'], language);
	        } else {
	          // term is preferred for values w/default language or no type and
	          // no language
	          // add an entry for the default language
	          _addPreferredTerm(mapping, term, entry['@language'], defaultLanguage);
	
	          // add entries for no type and no language
	          _addPreferredTerm(mapping, term, entry['@type'], '@none');
	          _addPreferredTerm(mapping, term, entry['@language'], '@none');
	        }
	      }
	    }
	
	    // build fast CURIE map
	    for(var key in fastCurieMap) {
	      _buildIriMap(fastCurieMap, key, 1);
	    }
	
	    return inverse;
	  }
	
	  /**
	   * Runs a recursive algorithm to build a lookup map for quickly finding
	   * potential CURIEs.
	   *
	   * @param iriMap the map to build.
	   * @param key the current key in the map to work on.
	   * @param idx the index into the IRI to compare.
	   */
	  function _buildIriMap(iriMap, key, idx) {
	    var entries = iriMap[key];
	    var next = iriMap[key] = {};
	
	    var iri;
	    var letter;
	    for(var i = 0; i < entries.length; ++i) {
	      iri = entries[i].iri;
	      if(idx >= iri.length) {
	        letter = '';
	      } else {
	        letter = iri[idx];
	      }
	      if(letter in next) {
	        next[letter].push(entries[i]);
	      } else {
	        next[letter] = [entries[i]];
	      }
	    }
	
	    for(var key in next) {
	      if(key === '') {
	        continue;
	      }
	      _buildIriMap(next, key, idx + 1);
	    }
	  }
	
	  /**
	   * Adds the term for the given entry if not already added.
	   *
	   * @param mapping the term mapping.
	   * @param term the term to add.
	   * @param entry the inverse context typeOrLanguage entry to add to.
	   * @param typeOrLanguageValue the key in the entry to add to.
	   */
	  function _addPreferredTerm(mapping, term, entry, typeOrLanguageValue) {
	    if(!(typeOrLanguageValue in entry)) {
	      entry[typeOrLanguageValue] = term;
	    }
	  }
	
	  /**
	   * Clones an active context, creating a child active context.
	   *
	   * @return a clone (child) of the active context.
	   */
	  function _cloneActiveContext() {
	    var child = {};
	    child['@base'] = this['@base'];
	    child.mappings = _clone(this.mappings);
	    child.clone = this.clone;
	    child.inverse = null;
	    child.getInverse = this.getInverse;
	    if('@language' in this) {
	      child['@language'] = this['@language'];
	    }
	    if('@vocab' in this) {
	      child['@vocab'] = this['@vocab'];
	    }
	    return child;
	  }
	}
	
	/**
	 * Returns whether or not the given value is a keyword.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a keyword, false if not.
	 */
	function _isKeyword(v) {
	  if(!_isString(v)) {
	    return false;
	  }
	  switch(v) {
	  case '@base':
	  case '@context':
	  case '@container':
	  case '@default':
	  case '@embed':
	  case '@explicit':
	  case '@graph':
	  case '@id':
	  case '@index':
	  case '@language':
	  case '@list':
	  case '@omitDefault':
	  case '@preserve':
	  case '@requireAll':
	  case '@reverse':
	  case '@set':
	  case '@type':
	  case '@value':
	  case '@vocab':
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Returns true if the given value is an Object.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an Object, false if not.
	 */
	function _isObject(v) {
	  return (Object.prototype.toString.call(v) === '[object Object]');
	}
	
	/**
	 * Returns true if the given value is an empty Object.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an empty Object, false if not.
	 */
	function _isEmptyObject(v) {
	  return _isObject(v) && Object.keys(v).length === 0;
	}
	
	/**
	 * Returns true if the given value is an Array.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an Array, false if not.
	 */
	function _isArray(v) {
	  return Array.isArray(v);
	}
	
	/**
	 * Throws an exception if the given value is not a valid @type value.
	 *
	 * @param v the value to check.
	 */
	function _validateTypeValue(v) {
	  // can be a string or an empty object
	  if(_isString(v) || _isEmptyObject(v)) {
	    return;
	  }
	
	  // must be an array
	  var isValid = false;
	  if(_isArray(v)) {
	    // must contain only strings
	    isValid = true;
	    for(var i = 0; i < v.length; ++i) {
	      if(!(_isString(v[i]))) {
	        isValid = false;
	        break;
	      }
	    }
	  }
	
	  if(!isValid) {
	    throw new JsonLdError(
	      'Invalid JSON-LD syntax; "@type" value must a string, an array of ' +
	      'strings, or an empty object.', 'jsonld.SyntaxError',
	      {code: 'invalid type value', value: v});
	  }
	}
	
	/**
	 * Returns true if the given value is a String.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a String, false if not.
	 */
	function _isString(v) {
	  return (typeof v === 'string' ||
	    Object.prototype.toString.call(v) === '[object String]');
	}
	
	/**
	 * Returns true if the given value is a Number.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a Number, false if not.
	 */
	function _isNumber(v) {
	  return (typeof v === 'number' ||
	    Object.prototype.toString.call(v) === '[object Number]');
	}
	
	/**
	 * Returns true if the given value is a double.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a double, false if not.
	 */
	function _isDouble(v) {
	  return _isNumber(v) && String(v).indexOf('.') !== -1;
	}
	
	/**
	 * Returns true if the given value is numeric.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is numeric, false if not.
	 */
	function _isNumeric(v) {
	  return !isNaN(parseFloat(v)) && isFinite(v);
	}
	
	/**
	 * Returns true if the given value is a Boolean.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a Boolean, false if not.
	 */
	function _isBoolean(v) {
	  return (typeof v === 'boolean' ||
	    Object.prototype.toString.call(v) === '[object Boolean]');
	}
	
	/**
	 * Returns true if the given value is undefined.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is undefined, false if not.
	 */
	function _isUndefined(v) {
	  return (typeof v === 'undefined');
	}
	
	/**
	 * Returns true if the given value is a subject with properties.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a subject with properties, false if not.
	 */
	function _isSubject(v) {
	  // Note: A value is a subject if all of these hold true:
	  // 1. It is an Object.
	  // 2. It is not a @value, @set, or @list.
	  // 3. It has more than 1 key OR any existing key is not @id.
	  var rval = false;
	  if(_isObject(v) &&
	    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {
	    var keyCount = Object.keys(v).length;
	    rval = (keyCount > 1 || !('@id' in v));
	  }
	  return rval;
	}
	
	/**
	 * Returns true if the given value is a subject reference.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a subject reference, false if not.
	 */
	function _isSubjectReference(v) {
	  // Note: A value is a subject reference if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has a single key: @id.
	  return (_isObject(v) && Object.keys(v).length === 1 && ('@id' in v));
	}
	
	/**
	 * Returns true if the given value is a @value.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a @value, false if not.
	 */
	function _isValue(v) {
	  // Note: A value is a @value if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has the @value property.
	  return _isObject(v) && ('@value' in v);
	}
	
	/**
	 * Returns true if the given value is a @list.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a @list, false if not.
	 */
	function _isList(v) {
	  // Note: A value is a @list if all of these hold true:
	  // 1. It is an Object.
	  // 2. It has the @list property.
	  return _isObject(v) && ('@list' in v);
	}
	
	/**
	 * Returns true if the given value is a blank node.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is a blank node, false if not.
	 */
	function _isBlankNode(v) {
	  // Note: A value is a blank node if all of these hold true:
	  // 1. It is an Object.
	  // 2. If it has an @id key its value begins with '_:'.
	  // 3. It has no keys OR is not a @value, @set, or @list.
	  var rval = false;
	  if(_isObject(v)) {
	    if('@id' in v) {
	      rval = (v['@id'].indexOf('_:') === 0);
	    } else {
	      rval = (Object.keys(v).length === 0 ||
	        !(('@value' in v) || ('@set' in v) || ('@list' in v)));
	    }
	  }
	  return rval;
	}
	
	/**
	 * Returns true if the given value is an absolute IRI, false if not.
	 *
	 * @param v the value to check.
	 *
	 * @return true if the value is an absolute IRI, false if not.
	 */
	function _isAbsoluteIri(v) {
	  return _isString(v) && v.indexOf(':') !== -1;
	}
	
	/**
	 * Clones an object, array, or string/number. If a typed JavaScript object
	 * is given, such as a Date, it will be converted to a string.
	 *
	 * @param value the value to clone.
	 *
	 * @return the cloned value.
	 */
	function _clone(value) {
	  if(value && typeof value === 'object') {
	    var rval;
	    if(_isArray(value)) {
	      rval = [];
	      for(var i = 0; i < value.length; ++i) {
	        rval[i] = _clone(value[i]);
	      }
	    } else if(_isObject(value)) {
	      rval = {};
	      for(var key in value) {
	        rval[key] = _clone(value[key]);
	      }
	    } else {
	      rval = value.toString();
	    }
	    return rval;
	  }
	  return value;
	}
	
	/**
	 * Finds all @context URLs in the given JSON-LD input.
	 *
	 * @param input the JSON-LD input.
	 * @param urls a map of URLs (url => false/@contexts).
	 * @param replace true to replace the URLs in the given input with the
	 *           @contexts from the urls map, false not to.
	 * @param base the base IRI to use to resolve relative IRIs.
	 *
	 * @return true if new URLs to retrieve were found, false if not.
	 */
	function _findContextUrls(input, urls, replace, base) {
	  var count = Object.keys(urls).length;
	  if(_isArray(input)) {
	    for(var i = 0; i < input.length; ++i) {
	      _findContextUrls(input[i], urls, replace, base);
	    }
	    return (count < Object.keys(urls).length);
	  } else if(_isObject(input)) {
	    for(var key in input) {
	      if(key !== '@context') {
	        _findContextUrls(input[key], urls, replace, base);
	        continue;
	      }
	
	      // get @context
	      var ctx = input[key];
	
	      // array @context
	      if(_isArray(ctx)) {
	        var length = ctx.length;
	        for(var i = 0; i < length; ++i) {
	          var _ctx = ctx[i];
	          if(_isString(_ctx)) {
	            _ctx = jsonld.prependBase(base, _ctx);
	            // replace w/@context if requested
	            if(replace) {
	              _ctx = urls[_ctx];
	              if(_isArray(_ctx)) {
	                // add flattened context
	                Array.prototype.splice.apply(ctx, [i, 1].concat(_ctx));
	                i += _ctx.length - 1;
	                length = ctx.length;
	              } else {
	                ctx[i] = _ctx;
	              }
	            } else if(!(_ctx in urls)) {
	              // @context URL found
	              urls[_ctx] = false;
	            }
	          }
	        }
	      } else if(_isString(ctx)) {
	        // string @context
	        ctx = jsonld.prependBase(base, ctx);
	        // replace w/@context if requested
	        if(replace) {
	          input[key] = urls[ctx];
	        } else if(!(ctx in urls)) {
	          // @context URL found
	          urls[ctx] = false;
	        }
	      }
	    }
	    return (count < Object.keys(urls).length);
	  }
	  return false;
	}
	
	/**
	 * Retrieves external @context URLs using the given document loader. Every
	 * instance of @context in the input that refers to a URL will be replaced
	 * with the JSON @context found at that URL.
	 *
	 * @param input the JSON-LD input with possible contexts.
	 * @param options the options to use:
	 *          documentLoader(url, callback(err, remoteDoc)) the document loader.
	 * @param callback(err, input) called once the operation completes.
	 */
	function _retrieveContextUrls(input, options, callback) {
	  // if any error occurs during URL resolution, quit
	  var error = null;
	
	  // recursive document loader
	  var documentLoader = options.documentLoader;
	  var retrieve = function(input, cycles, documentLoader, base, callback) {
	    if(Object.keys(cycles).length > MAX_CONTEXT_URLS) {
	      error = new JsonLdError(
	        'Maximum number of @context URLs exceeded.',
	        'jsonld.ContextUrlError',
	        {code: 'loading remote context failed', max: MAX_CONTEXT_URLS});
	      return callback(error);
	    }
	
	    // for tracking the URLs to retrieve
	    var urls = {};
	
	    // finished will be called once the URL queue is empty
	    var finished = function() {
	      // replace all URLs in the input
	      _findContextUrls(input, urls, true, base);
	      callback(null, input);
	    };
	
	    // find all URLs in the given input
	    if(!_findContextUrls(input, urls, false, base)) {
	      // no new URLs in input
	      finished();
	    }
	
	    // queue all unretrieved URLs
	    var queue = [];
	    for(var url in urls) {
	      if(urls[url] === false) {
	        queue.push(url);
	      }
	    }
	
	    // retrieve URLs in queue
	    var count = queue.length;
	    for(var i = 0; i < queue.length; ++i) {
	      (function(url) {
	        // check for context URL cycle
	        if(url in cycles) {
	          error = new JsonLdError(
	            'Cyclical @context URLs detected.',
	            'jsonld.ContextUrlError',
	            {code: 'recursive context inclusion', url: url});
	          return callback(error);
	        }
	        var _cycles = _clone(cycles);
	        _cycles[url] = true;
	        var done = function(err, remoteDoc) {
	          // short-circuit if there was an error with another URL
	          if(error) {
	            return;
	          }
	
	          var ctx = remoteDoc ? remoteDoc.document : null;
	
	          // parse string context as JSON
	          if(!err && _isString(ctx)) {
	            try {
	              ctx = JSON.parse(ctx);
	            } catch(ex) {
	              err = ex;
	            }
	          }
	
	          // ensure ctx is an object
	          if(err) {
	            err = new JsonLdError(
	              'Dereferencing a URL did not result in a valid JSON-LD object. ' +
	              'Possible causes are an inaccessible URL perhaps due to ' +
	              'a same-origin policy (ensure the server uses CORS if you are ' +
	              'using client-side JavaScript), too many redirects, a ' +
	              'non-JSON response, or more than one HTTP Link Header was ' +
	              'provided for a remote context.',
	              'jsonld.InvalidUrl',
	              {code: 'loading remote context failed', url: url, cause: err});
	          } else if(!_isObject(ctx)) {
	            err = new JsonLdError(
	              'Dereferencing a URL did not result in a JSON object. The ' +
	              'response was valid JSON, but it was not a JSON object.',
	              'jsonld.InvalidUrl',
	              {code: 'invalid remote context', url: url, cause: err});
	          }
	          if(err) {
	            error = err;
	            return callback(error);
	          }
	
	          // use empty context if no @context key is present
	          if(!('@context' in ctx)) {
	            ctx = {'@context': {}};
	          } else {
	            ctx = {'@context': ctx['@context']};
	          }
	
	          // append context URL to context if given
	          if(remoteDoc.contextUrl) {
	            if(!_isArray(ctx['@context'])) {
	              ctx['@context'] = [ctx['@context']];
	            }
	            ctx['@context'].push(remoteDoc.contextUrl);
	          }
	
	          // recurse
	          retrieve(ctx, _cycles, documentLoader, url, function(err, ctx) {
	            if(err) {
	              return callback(err);
	            }
	            urls[url] = ctx['@context'];
	            count -= 1;
	            if(count === 0) {
	              finished();
	            }
	          });
	        };
	        var promise = documentLoader(url, done);
	        if(promise && 'then' in promise) {
	          promise.then(done.bind(null, null), done);
	        }
	      }(queue[i]));
	    }
	  };
	  retrieve(input, {}, documentLoader, options.base, callback);
	}
	
	// define js 1.8.5 Object.keys method if not present
	if(!Object.keys) {
	  Object.keys = function(o) {
	    if(o !== Object(o)) {
	      throw new TypeError('Object.keys called on non-object');
	    }
	    var rval = [];
	    for(var p in o) {
	      if(Object.prototype.hasOwnProperty.call(o, p)) {
	        rval.push(p);
	      }
	    }
	    return rval;
	  };
	}
	
	/**
	 * Parses RDF in the form of N-Quads.
	 *
	 * @param input the N-Quads input to parse.
	 *
	 * @return an RDF dataset.
	 */
	function _parseNQuads(input) {
	  // define partial regexes
	  var iri = '(?:<([^:]+:[^>]*)>)';
	  var bnode = '(_:(?:[A-Za-z0-9]+))';
	  var plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
	  var datatype = '(?:\\^\\^' + iri + ')';
	  var language = '(?:@([a-z]+(?:-[a-z0-9]+)*))';
	  var literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
	  var comment = '(?:#.*)?';
	  var ws = '[ \\t]+';
	  var wso = '[ \\t]*';
	  var eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
	  var empty = new RegExp('^' + wso + comment + '$');
	
	  // define quad part regexes
	  var subject = '(?:' + iri + '|' + bnode + ')' + ws;
	  var property = iri + ws;
	  var object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
	  var graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';
	
	  // full quad regex
	  var quad = new RegExp(
	    '^' + wso + subject + property + object + graphName + wso + comment + '$');
	
	  // build RDF dataset
	  var dataset = {};
	
	  // split N-Quad input into lines
	  var lines = input.split(eoln);
	  var lineNumber = 0;
	  for(var li = 0; li < lines.length; ++li) {
	    var line = lines[li];
	    lineNumber++;
	
	    // skip empty lines
	    if(empty.test(line)) {
	      continue;
	    }
	
	    // parse quad
	    var match = line.match(quad);
	    if(match === null) {
	      throw new JsonLdError(
	        'Error while parsing N-Quads; invalid quad.',
	        'jsonld.ParseError', {line: lineNumber});
	    }
	
	    // create RDF triple
	    var triple = {};
	
	    // get subject
	    if(!_isUndefined(match[1])) {
	      triple.subject = {type: 'IRI', value: match[1]};
	    } else {
	      triple.subject = {type: 'blank node', value: match[2]};
	    }
	
	    // get predicate
	    triple.predicate = {type: 'IRI', value: match[3]};
	
	    // get object
	    if(!_isUndefined(match[4])) {
	      triple.object = {type: 'IRI', value: match[4]};
	    } else if(!_isUndefined(match[5])) {
	      triple.object = {type: 'blank node', value: match[5]};
	    } else {
	      triple.object = {type: 'literal'};
	      if(!_isUndefined(match[7])) {
	        triple.object.datatype = match[7];
	      } else if(!_isUndefined(match[8])) {
	        triple.object.datatype = RDF_LANGSTRING;
	        triple.object.language = match[8];
	      } else {
	        triple.object.datatype = XSD_STRING;
	      }
	      var unescaped = match[6]
	        .replace(/\\"/g, '"')
	        .replace(/\\t/g, '\t')
	        .replace(/\\n/g, '\n')
	        .replace(/\\r/g, '\r')
	        .replace(/\\\\/g, '\\');
	      triple.object.value = unescaped;
	    }
	
	    // get graph name ('@default' is used for the default graph)
	    var name = '@default';
	    if(!_isUndefined(match[9])) {
	      name = match[9];
	    } else if(!_isUndefined(match[10])) {
	      name = match[10];
	    }
	
	    // initialize graph in dataset
	    if(!(name in dataset)) {
	      dataset[name] = [triple];
	    } else {
	      // add triple if unique to its graph
	      var unique = true;
	      var triples = dataset[name];
	      for(var ti = 0; unique && ti < triples.length; ++ti) {
	        if(_compareRDFTriples(triples[ti], triple)) {
	          unique = false;
	        }
	      }
	      if(unique) {
	        triples.push(triple);
	      }
	    }
	  }
	
	  return dataset;
	}
	
	// register the N-Quads RDF parser
	jsonld.registerRDFParser('application/nquads', _parseNQuads);
	
	/**
	 * Converts an RDF dataset to N-Quads.
	 *
	 * @param dataset the RDF dataset to convert.
	 *
	 * @return the N-Quads string.
	 */
	function _toNQuads(dataset) {
	  var quads = [];
	  for(var graphName in dataset) {
	    var triples = dataset[graphName];
	    for(var ti = 0; ti < triples.length; ++ti) {
	      var triple = triples[ti];
	      if(graphName === '@default') {
	        graphName = null;
	      }
	      quads.push(_toNQuad(triple, graphName));
	    }
	  }
	  return quads.sort().join('');
	}
	
	/**
	 * Converts an RDF triple and graph name to an N-Quad string (a single quad).
	 *
	 * @param triple the RDF triple or quad to convert (a triple or quad may be
	 *          passed, if a triple is passed then `graphName` should be given
	 *          to specify the name of the graph the triple is in, `null` for
	 *          the default graph).
	 * @param graphName the name of the graph containing the triple, null for
	 *          the default graph.
	 *
	 * @return the N-Quad string.
	 */
	function _toNQuad(triple, graphName) {
	  var s = triple.subject;
	  var p = triple.predicate;
	  var o = triple.object;
	  var g = graphName || null;
	  if('name' in triple && triple.name) {
	    g = triple.name.value;
	  }
	
	  var quad = '';
	
	  // subject is an IRI
	  if(s.type === 'IRI') {
	    quad += '<' + s.value + '>';
	  } else {
	    quad += s.value;
	  }
	  quad += ' ';
	
	  // predicate is an IRI
	  if(p.type === 'IRI') {
	    quad += '<' + p.value + '>';
	  } else {
	    quad += p.value;
	  }
	  quad += ' ';
	
	  // object is IRI, bnode, or literal
	  if(o.type === 'IRI') {
	    quad += '<' + o.value + '>';
	  } else if(o.type === 'blank node') {
	    quad += o.value;
	  } else {
	    var escaped = o.value
	      .replace(/\\/g, '\\\\')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/\"/g, '\\"');
	    quad += '"' + escaped + '"';
	    if(o.datatype === RDF_LANGSTRING) {
	      if(o.language) {
	        quad += '@' + o.language;
	      }
	    } else if(o.datatype !== XSD_STRING) {
	      quad += '^^<' + o.datatype + '>';
	    }
	  }
	
	  // graph
	  if(g !== null && g !== undefined) {
	    if(g.indexOf('_:') !== 0) {
	      quad += ' <' + g + '>';
	    } else {
	      quad += ' ' + g;
	    }
	  }
	
	  quad += ' .\n';
	  return quad;
	}
	
	/**
	 * Parses the RDF dataset found via the data object from the RDFa API.
	 *
	 * @param data the RDFa API data object.
	 *
	 * @return the RDF dataset.
	 */
	function _parseRdfaApiData(data) {
	  var dataset = {};
	  dataset['@default'] = [];
	
	  var subjects = data.getSubjects();
	  for(var si = 0; si < subjects.length; ++si) {
	    var subject = subjects[si];
	    if(subject === null) {
	      continue;
	    }
	
	    // get all related triples
	    var triples = data.getSubjectTriples(subject);
	    if(triples === null) {
	      continue;
	    }
	    var predicates = triples.predicates;
	    for(var predicate in predicates) {
	      // iterate over objects
	      var objects = predicates[predicate].objects;
	      for(var oi = 0; oi < objects.length; ++oi) {
	        var object = objects[oi];
	
	        // create RDF triple
	        var triple = {};
	
	        // add subject
	        if(subject.indexOf('_:') === 0) {
	          triple.subject = {type: 'blank node', value: subject};
	        } else {
	          triple.subject = {type: 'IRI', value: subject};
	        }
	
	        // add predicate
	        if(predicate.indexOf('_:') === 0) {
	          triple.predicate = {type: 'blank node', value: predicate};
	        } else {
	          triple.predicate = {type: 'IRI', value: predicate};
	        }
	
	        // serialize XML literal
	        var value = object.value;
	        if(object.type === RDF_XML_LITERAL) {
	          // initialize XMLSerializer
	          if(!XMLSerializer) {
	            _defineXMLSerializer();
	          }
	          var serializer = new XMLSerializer();
	          value = '';
	          for(var x = 0; x < object.value.length; x++) {
	            if(object.value[x].nodeType === Node.ELEMENT_NODE) {
	              value += serializer.serializeToString(object.value[x]);
	            } else if(object.value[x].nodeType === Node.TEXT_NODE) {
	              value += object.value[x].nodeValue;
	            }
	          }
	        }
	
	        // add object
	        triple.object = {};
	
	        // object is an IRI
	        if(object.type === RDF_OBJECT) {
	          if(object.value.indexOf('_:') === 0) {
	            triple.object.type = 'blank node';
	          } else {
	            triple.object.type = 'IRI';
	          }
	        } else {
	          // object is a literal
	          triple.object.type = 'literal';
	          if(object.type === RDF_PLAIN_LITERAL) {
	            if(object.language) {
	              triple.object.datatype = RDF_LANGSTRING;
	              triple.object.language = object.language;
	            } else {
	              triple.object.datatype = XSD_STRING;
	            }
	          } else {
	            triple.object.datatype = object.type;
	          }
	        }
	        triple.object.value = value;
	
	        // add triple to dataset in default graph
	        dataset['@default'].push(triple);
	      }
	    }
	  }
	
	  return dataset;
	}
	
	// register the RDFa API RDF parser
	jsonld.registerRDFParser('rdfa-api', _parseRdfaApiData);
	
	/**
	 * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
	 * identifiers, keeping track of any previously issued identifiers.
	 *
	 * @param prefix the prefix to use ('<prefix><counter>').
	 */
	function IdentifierIssuer(prefix) {
	  this.prefix = prefix;
	  this.counter = 0;
	  this.existing = {};
	}
	jsonld.IdentifierIssuer = IdentifierIssuer;
	// backwards-compability
	jsonld.UniqueNamer = IdentifierIssuer;
	
	/**
	 * Copies this IdentifierIssuer.
	 *
	 * @return a copy of this IdentifierIssuer.
	 */
	IdentifierIssuer.prototype.clone = function() {
	  var copy = new IdentifierIssuer(this.prefix);
	  copy.counter = this.counter;
	  copy.existing = _clone(this.existing);
	  return copy;
	};
	
	/**
	 * Gets the new identifier for the given old identifier, where if no old
	 * identifier is given a new identifier will be generated.
	 *
	 * @param [old] the old identifier to get the new identifier for.
	 *
	 * @return the new identifier.
	 */
	IdentifierIssuer.prototype.getId = function(old) {
	  // return existing old identifier
	  if(old && old in this.existing) {
	    return this.existing[old];
	  }
	
	  // get next identifier
	  var identifier = this.prefix + this.counter;
	  this.counter += 1;
	
	  // save mapping
	  if(old) {
	    this.existing[old] = identifier;
	  }
	
	  return identifier;
	};
	// alias
	IdentifierIssuer.prototype.getName = IdentifierIssuer.prototype.getName;
	
	/**
	 * Returns true if the given old identifer has already been assigned a new
	 * identifier.
	 *
	 * @param old the old identifier to check.
	 *
	 * @return true if the old identifier has been assigned a new identifier, false
	 *   if not.
	 */
	IdentifierIssuer.prototype.hasId = function(old) {
	  return (old in this.existing);
	};
	// alias
	IdentifierIssuer.prototype.isNamed = IdentifierIssuer.prototype.hasId;
	
	/**
	 * A Permutator iterates over all possible permutations of the given array
	 * of elements.
	 *
	 * @param list the array of elements to iterate over.
	 */
	var Permutator = function(list) {
	  // original array
	  this.list = list.sort();
	  // indicates whether there are more permutations
	  this.done = false;
	  // directional info for permutation algorithm
	  this.left = {};
	  for(var i = 0; i < list.length; ++i) {
	    this.left[list[i]] = true;
	  }
	};
	
	/**
	 * Returns true if there is another permutation.
	 *
	 * @return true if there is another permutation, false if not.
	 */
	Permutator.prototype.hasNext = function() {
	  return !this.done;
	};
	
	/**
	 * Gets the next permutation. Call hasNext() to ensure there is another one
	 * first.
	 *
	 * @return the next permutation.
	 */
	Permutator.prototype.next = function() {
	  // copy current permutation
	  var rval = this.list.slice();
	
	  /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
	   permutation algorithm. */
	
	  // get largest mobile element k
	  // (mobile: element is greater than the one it is looking at)
	  var k = null;
	  var pos = 0;
	  var length = this.list.length;
	  for(var i = 0; i < length; ++i) {
	    var element = this.list[i];
	    var left = this.left[element];
	    if((k === null || element > k) &&
	      ((left && i > 0 && element > this.list[i - 1]) ||
	      (!left && i < (length - 1) && element > this.list[i + 1]))) {
	      k = element;
	      pos = i;
	    }
	  }
	
	  // no more permutations
	  if(k === null) {
	    this.done = true;
	  } else {
	    // swap k and the element it is looking at
	    var swap = this.left[k] ? pos - 1 : pos + 1;
	    this.list[pos] = this.list[swap];
	    this.list[swap] = k;
	
	    // reverse the direction of all elements larger than k
	    for(var i = 0; i < length; ++i) {
	      if(this.list[i] > k) {
	        this.left[this.list[i]] = !this.left[this.list[i]];
	      }
	    }
	  }
	
	  return rval;
	};
	
	//////////////////////// DEFINE NORMALIZATION HASH API ////////////////////////
	
	/**
	 * Creates a new NormalizeHash for use by the given normalization algorithm.
	 *
	 * @param algorithm the RDF Dataset Normalization algorithm to use:
	 *          'URDNA2015' or 'URGNA2012'.
	 */
	var NormalizeHash = function(algorithm) {
	  if(!(this instanceof NormalizeHash)) {
	    return new NormalizeHash(algorithm);
	  }
	  if(['URDNA2015', 'URGNA2012'].indexOf(algorithm) === -1) {
	    throw new Error(
	      'Invalid RDF Dataset Normalization algorithm: ' + algorithm);
	  }
	  NormalizeHash._init.call(this, algorithm);
	};
	NormalizeHash.hashNQuads = function(algorithm, nquads) {
	  var md = new NormalizeHash(algorithm);
	  for(var i = 0; i < nquads.length; ++i) {
	    md.update(nquads[i]);
	  }
	  return md.digest();
	};
	
	// switch definition of NormalizeHash based on environment
	(function(_nodejs) {
	
	if(_nodejs) {
	  // define NormalizeHash using native crypto lib
	  var crypto = __webpack_require__(243);
	  NormalizeHash._init = function(algorithm) {
	    if(algorithm === 'URDNA2015') {
	      algorithm = 'sha256';
	    } else {
	      // assume URGNA2012
	      algorithm = 'sha1';
	    }
	    this.md = crypto.createHash(algorithm);
	  };
	  NormalizeHash.prototype.update = function(msg) {
	    return this.md.update(msg, 'utf8');
	  };
	  NormalizeHash.prototype.digest = function() {
	    return this.md.digest('hex');
	  };
	  return;
	}
	
	// define NormalizeHash using JavaScript
	NormalizeHash._init = function(algorithm) {
	  if(algorithm === 'URDNA2015') {
	    algorithm = new sha256.Algorithm();
	  } else {
	    // assume URGNA2012
	    algorithm = new sha1.Algorithm();
	  }
	  this.md = new MessageDigest(algorithm);
	};
	NormalizeHash.prototype.update = function(msg) {
	  return this.md.update(msg);
	};
	NormalizeHash.prototype.digest = function() {
	  return this.md.digest().toHex();
	};
	
	/////////////////////////// DEFINE MESSAGE DIGEST API /////////////////////////
	
	/**
	 * Creates a new MessageDigest.
	 *
	 * @param algorithm the algorithm to use.
	 */
	var MessageDigest = function(algorithm) {
	  if(!(this instanceof MessageDigest)) {
	    return new MessageDigest(algorithm);
	  }
	
	  this._algorithm = algorithm;
	
	  // create shared padding as needed
	  if(!MessageDigest._padding ||
	    MessageDigest._padding.length < this._algorithm.blockSize) {
	    MessageDigest._padding = String.fromCharCode(128);
	    var c = String.fromCharCode(0x00);
	    var n = 64;
	    while(n > 0) {
	      if(n & 1) {
	        MessageDigest._padding += c;
	      }
	      n >>>= 1;
	      if(n > 0) {
	        c += c;
	      }
	    }
	  }
	
	  // start digest automatically for first time
	  this.start();
	};
	
	/**
	 * Starts the digest.
	 *
	 * @return this digest object.
	 */
	MessageDigest.prototype.start = function() {
	  // up to 56-bit message length for convenience
	  this.messageLength = 0;
	
	  // full message length
	  this.fullMessageLength = [];
	  var int32s = this._algorithm.messageLengthSize / 4;
	  for(var i = 0; i < int32s; ++i) {
	    this.fullMessageLength.push(0);
	  }
	
	  // input buffer
	  this._input = new MessageDigest.ByteBuffer();
	
	  // get starting state
	  this.state = this._algorithm.start();
	
	  return this;
	};
	
	/**
	 * Updates the digest with the given message input. The input must be
	 * a string of characters.
	 *
	 * @param msg the message input to update with (ByteBuffer or string).
	 *
	 * @return this digest object.
	 */
	MessageDigest.prototype.update = function(msg) {
	  // encode message as a UTF-8 encoded binary string
	  msg = new MessageDigest.ByteBuffer(unescape(encodeURIComponent(msg)));
	
	  // update message length
	  this.messageLength += msg.length();
	  var len = msg.length();
	  len = [(len / 0x100000000) >>> 0, len >>> 0];
	  for(var i = this.fullMessageLength.length - 1; i >= 0; --i) {
	    this.fullMessageLength[i] += len[1];
	    len[1] = len[0] + ((this.fullMessageLength[i] / 0x100000000) >>> 0);
	    this.fullMessageLength[i] = this.fullMessageLength[i] >>> 0;
	    len[0] = ((len[1] / 0x100000000) >>> 0);
	  }
	
	  // add bytes to input buffer
	  this._input.putBytes(msg.bytes());
	
	  // digest blocks
	  while(this._input.length() >= this._algorithm.blockSize) {
	    this.state = this._algorithm.digest(this.state, this._input);
	  }
	
	  // compact input buffer every 2K or if empty
	  if(this._input.read > 2048 || this._input.length() === 0) {
	    this._input.compact();
	  }
	
	  return this;
	};
	
	/**
	 * Produces the digest.
	 *
	 * @return a byte buffer containing the digest value.
	 */
	MessageDigest.prototype.digest = function() {
	  /* Note: Here we copy the remaining bytes in the input buffer and add the
	  appropriate padding. Then we do the final update on a copy of the state so
	  that if the user wants to get intermediate digests they can do so. */
	
	  /* Determine the number of bytes that must be added to the message to
	  ensure its length is appropriately congruent. In other words, the data to
	  be digested must be a multiple of `blockSize`. This data includes the
	  message, some padding, and the length of the message. Since the length of
	  the message will be encoded as `messageLengthSize` bytes, that means that
	  the last segment of the data must have `blockSize` - `messageLengthSize`
	  bytes of message and padding. Therefore, the length of the message plus the
	  padding must be congruent to X mod `blockSize` because
	  `blockSize` - `messageLengthSize` = X.
	
	  For example, SHA-1 is congruent to 448 mod 512 and SHA-512 is congruent to
	  896 mod 1024. SHA-1 uses a `blockSize` of 64 bytes (512 bits) and a
	  `messageLengthSize` of 8 bytes (64 bits). SHA-512 uses a `blockSize` of
	  128 bytes (1024 bits) and a `messageLengthSize` of 16 bytes (128 bits).
	
	  In order to fill up the message length it must be filled with padding that
	  begins with 1 bit followed by all 0 bits. Padding must *always* be present,
	  so if the message length is already congruent, then `blockSize` padding bits
	  must be added. */
	
	  // create final block
	  var finalBlock = new MessageDigest.ByteBuffer();
	  finalBlock.putBytes(this._input.bytes());
	
	  // compute remaining size to be digested (include message length size)
	  var remaining = (
	    this.fullMessageLength[this.fullMessageLength.length - 1] +
	    this._algorithm.messageLengthSize);
	
	  // add padding for overflow blockSize - overflow
	  // _padding starts with 1 byte with first bit is set (byte value 128), then
	  // there may be up to (blockSize - 1) other pad bytes
	  var overflow = remaining & (this._algorithm.blockSize - 1);
	  finalBlock.putBytes(MessageDigest._padding.substr(
	    0, this._algorithm.blockSize - overflow));
	
	  // serialize message length in bits in big-endian order; since length
	  // is stored in bytes we multiply by 8 (left shift by 3 and merge in
	  // remainder from )
	  var messageLength = new MessageDigest.ByteBuffer();
	  for(var i = 0; i < this.fullMessageLength.length; ++i) {
	    messageLength.putInt32((this.fullMessageLength[i] << 3) |
	      (this.fullMessageLength[i + 1] >>> 28));
	  }
	
	  // write the length of the message (algorithm-specific)
	  this._algorithm.writeMessageLength(finalBlock, messageLength);
	
	  // digest final block
	  var state = this._algorithm.digest(this.state.copy(), finalBlock);
	
	  // write state to buffer
	  var rval = new MessageDigest.ByteBuffer();
	  state.write(rval);
	  return rval;
	};
	
	/**
	 * Creates a simple byte buffer for message digest operations.
	 *
	 * @param data the data to put in the buffer.
	 */
	MessageDigest.ByteBuffer = function(data) {
	  if(typeof data === 'string') {
	    this.data = data;
	  } else {
	    this.data = '';
	  }
	  this.read = 0;
	};
	
	/**
	 * Puts a 32-bit integer into this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 */
	MessageDigest.ByteBuffer.prototype.putInt32 = function(i) {
	  this.data += (
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};
	
	/**
	 * Gets a 32-bit integer from this buffer in big-endian order and
	 * advances the read pointer by 4.
	 *
	 * @return the word.
	 */
	MessageDigest.ByteBuffer.prototype.getInt32 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 24 ^
	    this.data.charCodeAt(this.read + 1) << 16 ^
	    this.data.charCodeAt(this.read + 2) << 8 ^
	    this.data.charCodeAt(this.read + 3));
	  this.read += 4;
	  return rval;
	};
	
	/**
	 * Puts the given bytes into this buffer.
	 *
	 * @param bytes the bytes as a binary-encoded string.
	 */
	MessageDigest.ByteBuffer.prototype.putBytes = function(bytes) {
	  this.data += bytes;
	};
	
	/**
	 * Gets the bytes in this buffer.
	 *
	 * @return a string full of UTF-8 encoded characters.
	 */
	MessageDigest.ByteBuffer.prototype.bytes = function() {
	  return this.data.slice(this.read);
	};
	
	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	MessageDigest.ByteBuffer.prototype.length = function() {
	  return this.data.length - this.read;
	};
	
	/**
	 * Compacts this buffer.
	 */
	MessageDigest.ByteBuffer.prototype.compact = function() {
	  this.data = this.data.slice(this.read);
	  this.read = 0;
	};
	
	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	MessageDigest.ByteBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.length; ++i) {
	    var b = this.data.charCodeAt(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};
	
	///////////////////////////// DEFINE SHA-1 ALGORITHM //////////////////////////
	
	var sha1 = {
	  // used for word storage
	  _w: null
	};
	
	sha1.Algorithm = function() {
	  this.name = 'sha1',
	  this.blockSize = 64;
	  this.digestLength = 20;
	  this.messageLengthSize = 8;
	};
	
	sha1.Algorithm.prototype.start = function() {
	  if(!sha1._w) {
	    sha1._w = new Array(80);
	  }
	  return sha1._createState();
	};
	
	sha1.Algorithm.prototype.writeMessageLength = function(
	  finalBlock, messageLength) {
	  // message length is in bits and in big-endian order; simply append
	  finalBlock.putBytes(messageLength.bytes());
	};
	
	sha1.Algorithm.prototype.digest = function(s, input) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, e, f, i;
	  var len = input.length();
	  var _w = sha1._w;
	  while(len >= 64) {
	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;
	
	    // the _w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 80 32-bit words according to SHA-1 algorithm
	    // and for 32-79 using Max Locktyukhin's optimization
	
	    // round 1
	    for(i = 0; i < 16; ++i) {
	      t = input.getInt32();
	      _w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 20; ++i) {
	      t = (_w[i - 3] ^ _w[i - 8] ^ _w[i - 14] ^ _w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      _w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      t = (_w[i - 3] ^ _w[i - 8] ^ _w[i - 14] ^ _w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      _w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 40; ++i) {
	      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      _w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 3
	    for(; i < 60; ++i) {
	      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      _w[i] = t;
	      f = (b & c) | (d & (b ^ c));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 4
	    for(; i < 80; ++i) {
	      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      _w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	
	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;
	
	    len -= 64;
	  }
	
	  return s;
	};
	
	sha1._createState = function() {
	  var state = {
	    h0: 0x67452301,
	    h1: 0xEFCDAB89,
	    h2: 0x98BADCFE,
	    h3: 0x10325476,
	    h4: 0xC3D2E1F0
	  };
	  state.copy = function() {
	    var rval = sha1._createState();
	    rval.h0 = state.h0;
	    rval.h1 = state.h1;
	    rval.h2 = state.h2;
	    rval.h3 = state.h3;
	    rval.h4 = state.h4;
	    return rval;
	  };
	  state.write = function(buffer) {
	    buffer.putInt32(state.h0);
	    buffer.putInt32(state.h1);
	    buffer.putInt32(state.h2);
	    buffer.putInt32(state.h3);
	    buffer.putInt32(state.h4);
	  };
	  return state;
	};
	
	//////////////////////////// DEFINE SHA-256 ALGORITHM /////////////////////////
	
	var sha256 = {
	  // shared state
	  _k: null,
	  _w: null
	};
	
	sha256.Algorithm = function() {
	  this.name = 'sha256',
	  this.blockSize = 64;
	  this.digestLength = 32;
	  this.messageLengthSize = 8;
	};
	
	sha256.Algorithm.prototype.start = function() {
	  if(!sha256._k) {
	    sha256._init();
	  }
	  return sha256._createState();
	};
	
	sha256.Algorithm.prototype.writeMessageLength = function(
	  finalBlock, messageLength) {
	  // message length is in bits and in big-endian order; simply append
	  finalBlock.putBytes(messageLength.bytes());
	};
	
	sha256.Algorithm.prototype.digest = function(s, input) {
	  // consume 512 bit (64 byte) chunks
	  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
	  var len = input.length();
	  var _k = sha256._k;
	  var _w = sha256._w;
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 64 32-bit words according to SHA-256
	    for(i = 0; i < 16; ++i) {
	      _w[i] = input.getInt32();
	    }
	    for(; i < 64; ++i) {
	      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
	      t1 = _w[i - 2];
	      t1 =
	        ((t1 >>> 17) | (t1 << 15)) ^
	        ((t1 >>> 19) | (t1 << 13)) ^
	        (t1 >>> 10);
	      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
	      t2 = _w[i - 15];
	      t2 =
	        ((t2 >>> 7) | (t2 << 25)) ^
	        ((t2 >>> 18) | (t2 << 14)) ^
	        (t2 >>> 3);
	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
	      _w[i] = (t1 + _w[i - 7] + t2 + _w[i - 16]) | 0;
	    }
	
	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;
	    f = s.h5;
	    g = s.h6;
	    h = s.h7;
	
	    // round function
	    for(i = 0; i < 64; ++i) {
	      // Sum1(e)
	      s1 =
	        ((e >>> 6) | (e << 26)) ^
	        ((e >>> 11) | (e << 21)) ^
	        ((e >>> 25) | (e << 7));
	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch = g ^ (e & (f ^ g));
	      // Sum0(a)
	      s0 =
	        ((a >>> 2) | (a << 30)) ^
	        ((a >>> 13) | (a << 19)) ^
	        ((a >>> 22) | (a << 10));
	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj = (a & b) | (c & (a ^ b));
	
	      // main algorithm
	      t1 = h + s1 + ch + _k[i] + _w[i];
	      t2 = s0 + maj;
	      h = g;
	      g = f;
	      f = e;
	      e = (d + t1) | 0;
	      d = c;
	      c = b;
	      b = a;
	      a = (t1 + t2) | 0;
	    }
	
	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;
	    s.h5 = (s.h5 + f) | 0;
	    s.h6 = (s.h6 + g) | 0;
	    s.h7 = (s.h7 + h) | 0;
	    len -= 64;
	  }
	
	  return s;
	};
	
	sha256._createState = function() {
	  var state = {
	    h0: 0x6A09E667,
	    h1: 0xBB67AE85,
	    h2: 0x3C6EF372,
	    h3: 0xA54FF53A,
	    h4: 0x510E527F,
	    h5: 0x9B05688C,
	    h6: 0x1F83D9AB,
	    h7: 0x5BE0CD19
	  };
	  state.copy = function() {
	    var rval = sha256._createState();
	    rval.h0 = state.h0;
	    rval.h1 = state.h1;
	    rval.h2 = state.h2;
	    rval.h3 = state.h3;
	    rval.h4 = state.h4;
	    rval.h5 = state.h5;
	    rval.h6 = state.h6;
	    rval.h7 = state.h7;
	    return rval;
	  };
	  state.write = function(buffer) {
	    buffer.putInt32(state.h0);
	    buffer.putInt32(state.h1);
	    buffer.putInt32(state.h2);
	    buffer.putInt32(state.h3);
	    buffer.putInt32(state.h4);
	    buffer.putInt32(state.h5);
	    buffer.putInt32(state.h6);
	    buffer.putInt32(state.h7);
	  };
	  return state;
	};
	
	sha256._init = function() {
	  // create K table for SHA-256
	  sha256._k = [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
	
	  // used for word storage
	  sha256._w = new Array(64);
	};
	
	})(_nodejs); // end definition of NormalizeHash
	
	if(!XMLSerializer) {
	
	var _defineXMLSerializer = function() {
	  XMLSerializer = __webpack_require__(243).XMLSerializer;
	};
	
	} // end _defineXMLSerializer
	
	// define URL parser
	// parseUri 1.2.2
	// (c) Steven Levithan <stevenlevithan.com>
	// MIT License
	// with local jsonld.js modifications
	jsonld.url = {};
	jsonld.url.parsers = {
	  simple: {
	    // RFC 3986 basic parts
	    keys: ['href','scheme','authority','path','query','fragment'],
	    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
	  },
	  full: {
	    keys: ['href','protocol','scheme','authority','auth','user','password','hostname','port','path','directory','file','query','fragment'],
	    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
	  }
	};
	jsonld.url.parse = function(str, parser) {
	  var parsed = {};
	  var o = jsonld.url.parsers[parser || 'full'];
	  var m = o.regex.exec(str);
	  var i = o.keys.length;
	  while(i--) {
	    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];
	  }
	  parsed.normalizedPath = _removeDotSegments(parsed.path, !!parsed.authority);
	  return parsed;
	};
	
	/**
	 * Removes dot segments from a URL path.
	 *
	 * @param path the path to remove dot segments from.
	 * @param hasAuthority true if the URL has an authority, false if not.
	 */
	function _removeDotSegments(path, hasAuthority) {
	  var rval = '';
	
	  if(path.indexOf('/') === 0) {
	    rval = '/';
	  }
	
	  // RFC 3986 5.2.4 (reworked)
	  var input = path.split('/');
	  var output = [];
	  while(input.length > 0) {
	    if(input[0] === '.' || (input[0] === '' && input.length > 1)) {
	      input.shift();
	      continue;
	    }
	    if(input[0] === '..') {
	      input.shift();
	      if(hasAuthority ||
	        (output.length > 0 && output[output.length - 1] !== '..')) {
	        output.pop();
	      } else {
	        // leading relative URL '..'
	        output.push('..');
	      }
	      continue;
	    }
	    output.push(input.shift());
	  }
	
	  return rval + output.join('/');
	}
	
	if(_nodejs) {
	  // use node document loader by default
	  jsonld.useDocumentLoader('node');
	} else if(typeof XMLHttpRequest !== 'undefined') {
	  // use xhr document loader by default
	  jsonld.useDocumentLoader('xhr');
	}
	
	if(_nodejs) {
	  jsonld.use = function(extension) {
	    switch(extension) {
	      // TODO: Deprecated as of 0.4.0. Remove at some point.
	      case 'request':
	        // use node JSON-LD request extension
	        jsonld.request = __webpack_require__(243);
	        break;
	      default:
	        throw new JsonLdError(
	          'Unknown extension.',
	          'jsonld.UnknownExtension', {extension: extension});
	    }
	  };
	
	  // expose version
	  var _module = {exports: {}, filename: __dirname};
	  __webpack_require__(243)(_module, 'version');
	  jsonld.version = _module.exports.version;
	}
	
	// end of jsonld API factory
	return jsonld;
	};
	
	// external APIs:
	
	// used to generate a new jsonld API instance
	var factory = function() {
	  return wrapper(function() {
	    return factory();
	  });
	};
	
	if(!_nodejs && ("function" === 'function' && __webpack_require__(244))) {
	  // export AMD API
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // now that module is defined, wrap main jsonld API instance
	    wrapper(factory);
	    return factory;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	  // wrap the main jsonld API instance
	  wrapper(factory);
	
	  if("function" === 'function' &&
	    typeof module !== 'undefined' && module.exports) {
	    // export CommonJS/nodejs API
	    module.exports = factory;
	  }
	
	  if(_browser) {
	    // export simple browser API
	    if(typeof jsonld === 'undefined') {
	      jsonld = jsonldjs = factory;
	    } else {
	      jsonldjs = factory;
	    }
	  }
	}
	
	return factory;
	
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), (function() { return this; }()), __webpack_require__(237).setImmediate, "/"))

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   2.3.0
	 */
	
	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }
	
	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }
	
	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }
	
	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }
	
	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;
	
	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }
	
	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }
	
	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }
	
	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	
	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';
	
	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      var nextTick = process.nextTick;
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // setImmediate should be used instead instead
	      var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
	      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
	        nextTick = setImmediate;
	      }
	      return function() {
	        nextTick(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });
	
	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }
	
	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }
	
	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }
	
	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];
	
	        callback(arg);
	
	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }
	
	      lib$es6$promise$asap$$len = 0;
	    }
	
	    function lib$es6$promise$asap$$attemptVertex() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(241);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }
	
	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }
	
	    function lib$es6$promise$$internal$$noop() {}
	
	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;
	
	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$selfFullfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }
	
	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }
	
	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;
	
	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }
	
	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);
	
	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }
	
	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }
	
	      lib$es6$promise$$internal$$publish(promise);
	    }
	
	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	
	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;
	
	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }
	
	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;
	
	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }
	
	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;
	
	      parent._onerror = null;
	
	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;
	
	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;
	
	      if (subscribers.length === 0) { return; }
	
	      var child, callback, detail = promise._result;
	
	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];
	
	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }
	
	      promise._subscribers.length = 0;
	    }
	
	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }
	
	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;
	
	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);
	
	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }
	
	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }
	
	      } else {
	        value = detail;
	        succeeded = true;
	      }
	
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }
	
	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;
	
	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;
	
	        enumerator._init();
	
	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };
	
	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;
	
	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;
	
	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;
	
	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;
	
	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }
	
	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;
	
	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }
	
	      var length = entries.length;
	
	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }
	
	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }
	
	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
	
	    var lib$es6$promise$promise$$counter = 0;
	
	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }
	
	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }
	
	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.
	
	      Terminology
	      -----------
	
	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.
	
	      A promise can be in one of three states: pending, fulfilled, or rejected.
	
	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.
	
	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.
	
	
	      Basic Usage:
	      ------------
	
	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);
	
	        // on failure
	        reject(reason);
	      });
	
	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Advanced Usage:
	      ---------------
	
	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.
	
	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();
	
	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();
	
	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }
	
	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Unlike callbacks, promises are great composable primitives.
	
	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON
	
	        return values;
	      });
	      ```
	
	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];
	
	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }
	
	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }
	
	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }
	
	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;
	
	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,
	
	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.
	
	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```
	
	      Chaining
	      --------
	
	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.
	
	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });
	
	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	
	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```
	
	      Assimilation
	      ------------
	
	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```
	
	      If the assimliated promise rejects, then the downstream promise will also reject.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```
	
	      Simple Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var result;
	
	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```
	
	      Advanced Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var author, books;
	
	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	
	      function foundBooks(books) {
	
	      }
	
	      function failure(reason) {
	
	      }
	
	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;
	
	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }
	
	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;
	
	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }
	
	        return child;
	      },
	
	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.
	
	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }
	
	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }
	
	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;
	
	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }
	
	      var P = local.Promise;
	
	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }
	
	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
	
	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };
	
	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(242)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }
	
	    lib$es6$promise$polyfill$$default();
	}).call(this);
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), __webpack_require__(237).setImmediate, (function() { return this; }()), __webpack_require__(204)(module)))

/***/ },
/* 241 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 242 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 243 */
/***/ function(module, exports) {

	// Ignore module for browserify (see package.json)

/***/ },
/* 244 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;// Replace local require by a lazy loader
	var globalRequire = require;
	require = function () {};
	
	// Expose submodules
	var exports = module.exports = {
	  Lexer:        require('./lib/N3Lexer'),
	  Parser:       require('./lib/N3Parser'),
	  Writer:       require('./lib/N3Writer'),
	  Store:        require('./lib/N3Store'),
	  StreamParser: require('./lib/N3StreamParser'),
	  StreamWriter: require('./lib/N3StreamWriter'),
	  Util:         require('./lib/N3Util'),
	};
	
	// Load submodules on first access
	Object.keys(exports).forEach(function (submodule) {
	  Object.defineProperty(exports, submodule, {
	    configurable: true,
	    enumerable: true,
	    get: function () {
	      delete exports[submodule];
	      return exports[submodule] = __webpack_require__(246)("./N3" + submodule);
	    },
	  });
	});


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./N3Lexer": 247,
		"./N3Lexer.js": 247,
		"./N3Parser": 248,
		"./N3Parser.js": 248,
		"./N3Store": 249,
		"./N3Store.js": 249,
		"./N3StreamParser": 251,
		"./N3StreamParser.js": 251,
		"./N3StreamWriter": 281,
		"./N3StreamWriter.js": 281,
		"./N3Util": 250,
		"./N3Util.js": 250,
		"./N3Writer": 282,
		"./N3Writer.js": 282
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 246;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {// **N3Lexer** tokenizes N3 documents.
	var fromCharCode = String.fromCharCode;
	var immediately = typeof setImmediate === 'function' ? setImmediate :
	                  function setImmediate(func) { setTimeout(func, 0); };
	
	// Regular expression and replacement string to escape N3 strings.
	// Note how we catch invalid unicode sequences separately (they will trigger an error).
	var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\[uU]|\\(.)/g;
	var escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
	                           'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
	                           '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
	                           '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
	                           '/': '/', '?': '?', '#': '#', '@': '@', '%': '%' };
	var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
	
	// ## Constructor
	function N3Lexer(options) {
	  if (!(this instanceof N3Lexer))
	    return new N3Lexer(options);
	
	  // In line mode (N-Triples or N-Quads), only simple features may be parsed
	  if (options && options.lineMode) {
	    // Don't tokenize special literals
	    this._tripleQuotedString = this._number = this._boolean = /$0^/;
	    // Swap the tokenize method for a restricted version
	    var self = this;
	    this._tokenize = this.tokenize;
	    this.tokenize = function (input, callback) {
	      this._tokenize(input, function (error, token) {
	        if (!error && /^(?:IRI|prefixed|literal|langcode|type|\.|eof)$/.test(token.type))
	          callback && callback(error, token);
	        else
	          callback && callback(error || self._syntaxError(token.type, callback = null));
	      });
	    };
	  }
	}
	
	N3Lexer.prototype = {
	  // ## Regular expressions
	  // It's slightly faster to have these as properties than as in-scope variables.
	
	  _iri: /^<((?:[^>\\]|\\[uU])+)>/, // IRI with escape sequences; needs sanity check after unescaping
	  _unescapedIri: /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>/, // IRI without escape sequences; no unescaping
	  _unescapedString: /^"[^"\\]+"(?=[^"\\])/, // non-empty string without escape sequences
	  _singleQuotedString: /^"[^"\\]*(?:\\.[^"\\]*)*"(?=[^"\\])|^'[^'\\]*(?:\\.[^'\\]*)*'(?=[^'\\])/,
	  _tripleQuotedString: /^""("[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*")""|^''('[^'\\]*(?:(?:\\.|'(?!''))[^'\\]*)*')''/,
	  _langcode: /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i,
	  _prefix: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/,
	  _prefixed: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?=\.?[,;\s#()\[\]\{\}"'<])/,
	  _blank: /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=\.?[,;:\s#()\[\]\{\}"'<])/,
	  _number: /^[\-+]?(?:\d+\.?\d*([eE](?:[\-\+])?\d+)|\d*\.?\d+)(?=[.,;:\s#()\[\]\{\}"'<])/,
	  _boolean: /^(?:true|false)(?=[.,;:\s#()\[\]\{\}"'<])/,
	  _keyword: /^@[a-z]+(?=[\s#<:])/,
	  _sparqlKeyword: /^(?:PREFIX|BASE|GRAPH)(?=[\s#<:])/i,
	  _shortPredicates: /^a(?=\s+|<)/,
	  _newline: /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/,
	  _whitespace: /^[ \t]+/,
	  _endOfFile: /^(?:#[^\n\r]*)?$/,
	
	  // ## Private methods
	
	  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback.
	  _tokenizeToEnd: function (callback, inputFinished) {
	    // Continue parsing as far as possible; the loop will return eventually.
	    var input = this._input;
	    while (true) {
	      // Count and skip whitespace lines.
	      var whiteSpaceMatch;
	      while (whiteSpaceMatch = this._newline.exec(input))
	        input = input.substr(whiteSpaceMatch[0].length, input.length), this._line++;
	      // Skip whitespace on current line.
	      if (whiteSpaceMatch = this._whitespace.exec(input))
	        input = input.substr(whiteSpaceMatch[0].length, input.length);
	
	      // Stop for now if we're at the end.
	      if (this._endOfFile.test(input)) {
	        // If the input is finished, emit EOF.
	        if (inputFinished)
	          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });
	        return this._input = input;
	      }
	
	      // Look for specific token types based on the first character.
	      var line = this._line, type = '', value = '', prefix = '',
	          firstChar = input[0], match = null, matchLength = 0, unescaped, inconclusive = false;
	      switch (firstChar) {
	      case '^':
	        // Try to match a type.
	        if (input.length === 1) break;
	        else if (input[1] !== '^') return reportSyntaxError(this);
	        this._prevTokenType = '^';
	        // Move to type IRI or prefixed name.
	        input = input.substr(2);
	        if (input[0] !== '<') {
	          inconclusive = true;
	          break;
	        }
	        // Fall through in case the type is an IRI.
	
	      case '<':
	        // Try to find a full IRI without escape sequences.
	        if (match = this._unescapedIri.exec(input))
	          type = 'IRI', value = match[1];
	        // Try to find a full IRI with escape sequences.
	        else if (match = this._iri.exec(input)) {
	          unescaped = this._unescape(match[1]);
	          if (unescaped === null || illegalIriChars.test(unescaped))
	            return reportSyntaxError(this);
	          type = 'IRI', value = unescaped;
	        }
	        break;
	
	      case '_':
	        // Try to find a blank node. Since it can contain (but not end with) a dot,
	        // we always need a non-dot character before deciding it is a prefixed name.
	        // Therefore, try inserting a space if we're at the end of the input.
	        if ((match = this._blank.exec(input)) ||
	            inputFinished && (match = this._blank.exec(input + ' ')))
	          type = 'prefixed', prefix = '_', value = match[1];
	        break;
	
	      case '"':
	      case "'":
	        // Try to find a non-empty double-quoted literal without escape sequences.
	        if (match = this._unescapedString.exec(input))
	          type = 'literal', value = match[0];
	        // Try to find any other literal wrapped in a pair of single or double quotes.
	        else if (match = this._singleQuotedString.exec(input)) {
	          unescaped = this._unescape(match[0]);
	          if (unescaped === null)
	            return reportSyntaxError(this);
	          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
	        }
	        // Try to find a literal wrapped in three pairs of single or double quotes.
	        else if (match = this._tripleQuotedString.exec(input)) {
	          unescaped = match[1] || match[2];
	          // Count the newlines and advance line counter.
	          this._line += unescaped.split(/\r\n|\r|\n/).length - 1;
	          unescaped = this._unescape(unescaped);
	          if (unescaped === null)
	            return reportSyntaxError(this);
	          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
	        }
	        break;
	
	      case '@':
	        // Try to find a language code.
	        if (this._prevTokenType === 'literal' && (match = this._langcode.exec(input)))
	          type = 'langcode', value = match[1];
	        // Try to find a keyword.
	        else if (match = this._keyword.exec(input))
	          type = match[0];
	        break;
	
	      case '.':
	        // Try to find a dot as punctuation.
	        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {
	          type = '.';
	          matchLength = 1;
	          break;
	        }
	        // Fall through to numerical case (could be a decimal dot).
	
	      case '0':
	      case '1':
	      case '2':
	      case '3':
	      case '4':
	      case '5':
	      case '6':
	      case '7':
	      case '8':
	      case '9':
	      case '+':
	      case '-':
	        // Try to find a number.
	        if (match = this._number.exec(input)) {
	          type = 'literal';
	          value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#' +
	                  (match[1] ? 'double' : (/^[+\-]?\d+$/.test(match[0]) ? 'integer' : 'decimal'));
	        }
	        break;
	
	      case 'B':
	      case 'b':
	      case 'p':
	      case 'P':
	      case 'G':
	      case 'g':
	        // Try to find a SPARQL-style keyword.
	        if (match = this._sparqlKeyword.exec(input))
	          type = match[0].toUpperCase();
	        else
	          inconclusive = true;
	        break;
	
	      case 'f':
	      case 't':
	        // Try to match a boolean.
	        if (match = this._boolean.exec(input))
	          type = 'literal', value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#boolean';
	        else
	          inconclusive = true;
	        break;
	
	      case 'a':
	        // Try to find an abbreviated predicate.
	        if (match = this._shortPredicates.exec(input))
	          type = 'abbreviation', value = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
	        else
	          inconclusive = true;
	        break;
	
	      case ',':
	      case ';':
	      case '[':
	      case ']':
	      case '(':
	      case ')':
	      case '{':
	      case '}':
	        // The next token is punctuation
	        matchLength = 1;
	        type = firstChar;
	        break;
	
	      default:
	        inconclusive = true;
	      }
	
	      // Some first characters do not allow an immediate decision, so inspect more.
	      if (inconclusive) {
	        // Try to find a prefix.
	        if ((this._prevTokenType === '@prefix' || this._prevTokenType === 'PREFIX') &&
	            (match = this._prefix.exec(input)))
	          type = 'prefix', value = match[1] || '';
	        // Try to find a prefixed name. Since it can contain (but not end with) a dot,
	        // we always need a non-dot character before deciding it is a prefixed name.
	        // Therefore, try inserting a space if we're at the end of the input.
	        else if ((match = this._prefixed.exec(input)) ||
	                 inputFinished && (match = this._prefixed.exec(input + ' ')))
	          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
	      }
	
	      // A type token is special: it can only be emitted after an IRI or prefixed name is read.
	      if (this._prevTokenType === '^')
	        type = (type === 'IRI' || type === 'prefixed') ? 'type' : '';
	
	      // What if nothing of the above was found?
	      if (!type) {
	        // We could be in streaming mode, and then we just wait for more input to arrive.
	        // Otherwise, a syntax error has occurred in the input.
	        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
	        if (inputFinished || (!/^'''|^"""/.test(input) && /\n|\r/.test(input)))
	          return reportSyntaxError(this);
	        else
	          return this._input = input;
	      }
	
	      // Emit the parsed token.
	      callback(null, { line: line, type: type, value: value, prefix: prefix });
	      this._prevTokenType = type;
	
	      // Advance to next part to tokenize.
	      input = input.substr(matchLength || match[0].length, input.length);
	    }
	
	    // Signals the syntax error through the callback
	    function reportSyntaxError(self) { callback(self._syntaxError(/^\S*/.exec(input)[0])); }
	  },
	
	  // ### `_unescape` replaces N3 escape codes by their corresponding characters.
	  _unescape: function (item) {
	    try {
	      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
	        var charCode;
	        if (unicode4) {
	          charCode = parseInt(unicode4, 16);
	          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
	          return fromCharCode(charCode);
	        }
	        else if (unicode8) {
	          charCode = parseInt(unicode8, 16);
	          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
	          if (charCode <= 0xFFFF) return fromCharCode(charCode);
	          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));
	        }
	        else {
	          var replacement = escapeReplacements[escapedChar];
	          if (!replacement)
	            throw new Error();
	          return replacement;
	        }
	      });
	    }
	    catch (error) { return null; }
	  },
	
	  // ### `_syntaxError` creates a syntax error for the given issue
	  _syntaxError: function (issue) {
	    this._input = null;
	    return new Error('Syntax error: unexpected "' + issue + '" on line ' + this._line + '.');
	  },
	
	
	  // ## Public methods
	
	  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
	  // The input can be a string or a stream.
	  tokenize: function (input, callback) {
	    var self = this;
	    this._line = 1;
	
	    // If the input is a string, continuously emit tokens through the callback until the end.
	    if (typeof input === 'string') {
	      this._input = input;
	      immediately(function () { self._tokenizeToEnd(callback, true); });
	    }
	    // Otherwise, the input will be streamed.
	    else {
	      this._input = '';
	
	      // If no input was given, it will be streamed through `addChunk` and ended with `end`
	      if (!input || typeof input === 'function') {
	        this.addChunk = addChunk;
	        this.end = end;
	        if (!callback)
	          callback = input;
	      }
	      // Otherwise, the input itself must be a stream
	      else {
	        if (typeof input.setEncoding === 'function')
	          input.setEncoding('utf8');
	        input.on('data', addChunk);
	        input.on('end', end);
	      }
	    }
	
	    // Adds the data chunk to the buffer and parses as far as possible
	    function addChunk(data) {
	      if (self._input !== null) {
	        self._input += data;
	        self._tokenizeToEnd(callback, false);
	      }
	    }
	
	    // Parses until the end
	    function end() {
	      if (self._input !== null)
	        self._tokenizeToEnd(callback, true);
	    }
	  },
	};
	
	// ## Exports
	
	// Export the `N3Lexer` class as a whole.
	module.exports = N3Lexer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(237).setImmediate))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	// **N3Parser** parses N3 documents.
	var N3Lexer = __webpack_require__(247);
	
	var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
	    RDF_NIL    = RDF_PREFIX + 'nil',
	    RDF_FIRST  = RDF_PREFIX + 'first',
	    RDF_REST   = RDF_PREFIX + 'rest';
	
	var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
	    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
	    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;
	
	// The next ID for new blank nodes
	var blankNodePrefix = 0, blankNodeCount = 0;
	
	// ## Constructor
	function N3Parser(options) {
	  if (!(this instanceof N3Parser))
	    return new N3Parser(options);
	  this._tripleStack = [];
	  this._graph = null;
	
	  // Set the document IRI.
	  options = options || {};
	  this._setBase(options.documentIRI);
	
	  // Set supported features depending on the format.
	  var format = (typeof options.format === 'string') && options.format.match(/\w*$/)[0].toLowerCase(),
	      isTurtle = format === 'turtle', isTriG = format === 'trig',
	      isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),
	      isLineMode = isNTriples || isNQuads;
	  if (!(this._supportsNamedGraphs = !isTurtle))
	    this._readPredicateOrNamedGraph = this._readPredicate;
	  this._supportsQuads = !(isTurtle || isTriG || isNTriples);
	  // Disable relative IRIs in N-Triples or N-Quads mode
	  if (isLineMode) {
	    this._base = '';
	    this._resolveIRI = function (token) {
	      this._error('Disallowed relative IRI', token);
	      return this._callback = noop, this._subject = null;
	    };
	  }
	  this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :
	                            '_:' + options.blankNodePrefix.replace(/^_:/, '');
	  this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode });
	}
	
	// ## Private class methods
	
	// ### `_resetBlankNodeIds` restarts blank node identification.
	N3Parser._resetBlankNodeIds = function () {
	  blankNodePrefix = blankNodeCount = 0;
	};
	
	N3Parser.prototype = {
	  // ## Private methods
	
	  // ### `_setBase` sets the base IRI to resolve relative IRIs.
	  _setBase: function (baseIRI) {
	    if (!baseIRI)
	      baseIRI = null;
	    else if (baseIRI.indexOf('#') >= 0)
	      throw new Error('Invalid base IRI ' + baseIRI);
	    // Set base IRI and its components
	    if (this._base = baseIRI) {
	      this._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
	      baseIRI = baseIRI.match(schemeAuthority);
	      this._baseRoot   = baseIRI[0];
	      this._baseScheme = baseIRI[1];
	    }
	  },
	
	  // ### `_readInTopContext` reads a token when in the top context.
	  _readInTopContext: function (token) {
	    switch (token.type) {
	    // If an EOF token arrives in the top context, signal that we're done.
	    case 'eof':
	      if (this._graph !== null)
	        return this._error('Unclosed graph', token);
	      delete this._prefixes._;
	      return this._callback(null, null, this._prefixes);
	    // It could be a prefix declaration.
	    case '@prefix':
	      this._sparqlStyle = false;
	      return this._readPrefix;
	    case 'PREFIX':
	      this._sparqlStyle = true;
	      return this._readPrefix;
	    // It could be a base declaration.
	    case '@base':
	      this._sparqlStyle = false;
	      return this._readBaseIRI;
	    case 'BASE':
	      this._sparqlStyle = true;
	      return this._readBaseIRI;
	    // It could be a graph.
	    case '{':
	      if (this._supportsNamedGraphs) {
	        this._graph = '';
	        this._subject = null;
	        return this._readSubject;
	      }
	    case 'GRAPH':
	      if (this._supportsNamedGraphs)
	        return this._readNamedGraphLabel;
	    // Otherwise, the next token must be a subject.
	    default:
	      return this._readSubject(token);
	    }
	  },
	
	  // ### `_readSubject` reads a triple's subject.
	  _readSubject: function (token) {
	    this._predicate = null;
	    switch (token.type) {
	    case 'IRI':
	      if (this._base === null || absoluteIRI.test(token.value))
	        this._subject = token.value;
	      else
	        this._subject = this._resolveIRI(token);
	      break;
	    case 'prefixed':
	      var prefix = this._prefixes[token.prefix];
	      if (prefix === undefined)
	        return this._error('Undefined prefix "' + token.prefix + ':"', token);
	      this._subject = prefix + token.value;
	      break;
	    case '[':
	      // Start a new triple with a new blank node as subject.
	      this._subject = '_:b' + blankNodeCount++;
	      this._tripleStack.push({ subject: this._subject, predicate: null, object: null, type: 'blank' });
	      return this._readBlankNodeHead;
	    case '(':
	      // Start a new list
	      this._tripleStack.push({ subject: RDF_NIL, predicate: null, object: null, type: 'list' });
	      this._subject = null;
	      return this._readListItem;
	    case '}':
	      return this._readPunctuation(token);
	    default:
	      return this._error('Expected subject but got ' + token.type, token);
	    }
	    // The next token must be a predicate,
	    // or, if the subject was actually a graph IRI, a named graph.
	    return this._readPredicateOrNamedGraph;
	  },
	
	  // ### `_readPredicate` reads a triple's predicate.
	  _readPredicate: function (token) {
	    var type = token.type;
	    switch (type) {
	    case 'IRI':
	    case 'abbreviation':
	      if (this._base === null || absoluteIRI.test(token.value))
	        this._predicate = token.value;
	      else
	        this._predicate = this._resolveIRI(token);
	      break;
	    case 'prefixed':
	      if (token.prefix === '_')
	        return this._error('Disallowed blank node as predicate', token);
	      var prefix = this._prefixes[token.prefix];
	      if (prefix === undefined)
	        return this._error('Undefined prefix "' + token.prefix + ':"', token);
	      this._predicate = prefix + token.value;
	      break;
	    case '.':
	    case ']':
	    case '}':
	      // Expected predicate didn't come, must have been trailing semicolon.
	      if (this._predicate === null)
	        return this._error('Unexpected ' + type, token);
	      this._subject = null;
	      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
	    case ';':
	      // Extra semicolons can be safely ignored
	      return this._readPredicate;
	    default:
	      return this._error('Expected predicate to follow "' + this._subject + '"', token);
	    }
	    // The next token must be an object.
	    return this._readObject;
	  },
	
	  // ### `_readObject` reads a triple's object.
	  _readObject: function (token) {
	    switch (token.type) {
	    case 'IRI':
	      if (this._base === null || absoluteIRI.test(token.value))
	        this._object = token.value;
	      else
	        this._object = this._resolveIRI(token);
	      break;
	    case 'prefixed':
	      var prefix = this._prefixes[token.prefix];
	      if (prefix === undefined)
	        return this._error('Undefined prefix "' + token.prefix + ':"', token);
	      this._object = prefix + token.value;
	      break;
	    case 'literal':
	      this._object = token.value;
	      return this._readDataTypeOrLang;
	    case '[':
	      // Start a new triple with a new blank node as subject.
	      var blank = '_:b' + blankNodeCount++;
	      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: blank, type: 'blank' });
	      this._subject = blank;
	      return this._readBlankNodeHead;
	    case '(':
	      // Start a new list
	      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: RDF_NIL, type: 'list' });
	      this._subject = null;
	      return this._readListItem;
	    default:
	      return this._error('Expected object to follow "' + this._predicate + '"', token);
	    }
	    return this._getTripleEndReader();
	  },
	
	  // ### `_readPredicateOrNamedGraph` reads a triple's predicate, or a named graph.
	  _readPredicateOrNamedGraph: function (token) {
	    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
	  },
	
	  // ### `_readGraph` reads a graph.
	  _readGraph: function (token) {
	    if (token.type !== '{')
	      return this._error('Expected graph but got ' + token.type, token);
	    // The "subject" we read is actually the GRAPH's label
	    this._graph = this._subject, this._subject = null;
	    return this._readSubject;
	  },
	
	  // ### `_readBlankNodeHead` reads the head of a blank node.
	  _readBlankNodeHead: function (token) {
	    if (token.type === ']') {
	      this._subject = null;
	      return this._readBlankNodeTail(token);
	    }
	    else {
	      this._predicate = null;
	      return this._readPredicate(token);
	    }
	  },
	
	  // ### `_readBlankNodeTail` reads the end of a blank node.
	  _readBlankNodeTail: function (token) {
	    if (token.type !== ']')
	      return this._readBlankNodePunctuation(token);
	
	    // Store blank node triple.
	    if (this._subject !== null)
	      this._callback(null, { subject:   this._subject,
	                             predicate: this._predicate,
	                             object:    this._object,
	                             graph:     this._graph || '' });
	
	    // Restore parent triple that contains the blank node.
	    var triple = this._tripleStack.pop();
	    this._subject = triple.subject;
	    // Was the blank node the object?
	    if (triple.object !== null) {
	      // Restore predicate and object as well, and continue by reading punctuation.
	      this._predicate = triple.predicate;
	      this._object = triple.object;
	      return this._getTripleEndReader();
	    }
	    // The blank node was the subject, so continue reading the predicate.
	    // If the blank node didn't contain any predicates, it could also be the label of a named graph.
	    return this._predicate !== null ? this._readPredicate : this._readPredicateOrNamedGraph;
	  },
	
	  // ### `_readDataTypeOrLang` reads an _optional_ data type or language.
	  _readDataTypeOrLang: function (token) {
	    switch (token.type) {
	    case 'type':
	      var value;
	      if (token.prefix === '') {
	        if (this._base === null || absoluteIRI.test(token.value))
	          value = token.value;
	        else
	          value = this._resolveIRI(token);
	      }
	      else {
	        var prefix = this._prefixes[token.prefix];
	        if (prefix === undefined)
	          return this._error('Undefined prefix "' + token.prefix + ':"', token);
	        value = prefix + token.value;
	      }
	      this._object += '^^' + value;
	      return this._getTripleEndReader();
	    case 'langcode':
	      this._object += '@' + token.value.toLowerCase();
	      return this._getTripleEndReader();
	    default:
	      return this._getTripleEndReader().call(this, token);
	    }
	  },
	
	  // ### `_readListItem` reads items from a list.
	  _readListItem: function (token) {
	    var item = null,                  // The actual list item.
	        itemHead = null,              // The head of the rdf:first predicate.
	        prevItemHead = this._subject, // The head of the previous rdf:first predicate.
	        stack = this._tripleStack,    // The stack of triples part of recursion (lists, blanks, etc.).
	        parentTriple = stack[stack.length - 1], // The triple containing the current list.
	        next = this._readListItem;    // The next function to execute.
	
	    switch (token.type) {
	    case 'IRI':
	      if (this._base === null || absoluteIRI.test(token.value))
	        item = token.value;
	      else
	        item = this._resolveIRI(token);
	      break;
	    case 'prefixed':
	      var prefix = this._prefixes[token.prefix];
	      if (prefix === undefined)
	        return this._error('Undefined prefix "' + token.prefix + ':"', token);
	      item = prefix + token.value;
	      break;
	    case 'literal':
	      item = token.value;
	      next = this._readDataTypeOrLang;
	      break;
	    case '[':
	      // Stack the current list triple and start a new triple with a blank node as subject.
	      itemHead = '_:b' + blankNodeCount++;
	      item     = '_:b' + blankNodeCount++;
	      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: item, type: 'blank' });
	      this._subject = item;
	      next = this._readBlankNodeHead;
	      break;
	    case '(':
	      // Stack the current list triple and start a new list
	      itemHead = '_:b' + blankNodeCount++;
	      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: RDF_NIL, type: 'list' });
	      this._subject = null;
	      next = this._readListItem;
	      break;
	    case ')':
	      // Restore the parent triple.
	      stack.pop();
	      // If this list is contained within a parent list, return the membership triple here.
	      // This will be `<parent list element> rdf:first <this list>.`.
	      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')
	        this._callback(null, { subject:   parentTriple.subject,
	                               predicate: parentTriple.predicate,
	                               object:    parentTriple.object,
	                               graph:     this._graph || '' });
	      // Restore the parent triple's subject.
	      this._subject = parentTriple.subject;
	      // Was this list in the parent triple's subject?
	      if (parentTriple.predicate === null) {
	        // The next token is the predicate.
	        next = this._readPredicate;
	        // Skip writing the list tail if this was an empty list.
	        if (parentTriple.subject === RDF_NIL)
	          return next;
	      }
	      // The list was in the parent triple's object.
	      else {
	        // Restore the parent triple's predicate and object as well.
	        this._predicate = parentTriple.predicate;
	        this._object = parentTriple.object;
	        next = this._getTripleEndReader();
	        // Skip writing the list tail if this was an empty list.
	        if (parentTriple.object === RDF_NIL)
	          return next;
	      }
	      // Close the list by making the item head nil.
	      itemHead = RDF_NIL;
	      break;
	    default:
	      return this._error('Expected list item instead of "' + token.type + '"', token);
	    }
	
	     // Create a new blank node if no item head was assigned yet.
	    if (itemHead === null)
	      this._subject = itemHead = '_:b' + blankNodeCount++;
	
	    // Is this the first element of the list?
	    if (prevItemHead === null) {
	      // This list is either the object or the subject.
	      if (parentTriple.object === RDF_NIL)
	        parentTriple.object = itemHead;
	      else
	        parentTriple.subject = itemHead;
	    }
	    else {
	      // The rest of the list is in the current head.
	      this._callback(null, { subject:   prevItemHead,
	                             predicate: RDF_REST,
	                             object:    itemHead,
	                             graph:     this._graph || '' });
	    }
	    // Add the item's value.
	    if (item !== null)
	      this._callback(null, { subject:   itemHead,
	                             predicate: RDF_FIRST,
	                             object:    item,
	                             graph:     this._graph || '' });
	    return next;
	  },
	
	  // ### `_readPunctuation` reads punctuation between triples or triple parts.
	  _readPunctuation: function (token) {
	    var next, subject = this._subject, graph = this._graph;
	    switch (token.type) {
	    // A closing brace ends a graph
	    case '}':
	      if (this._graph === null)
	        return this._error('Unexpected graph closing', token);
	      this._graph = null;
	    // A dot just ends the statement, without sharing anything with the next.
	    case '.':
	      this._subject = null;
	      next = this._readInTopContext;
	      break;
	    // Semicolon means the subject is shared; predicate and object are different.
	    case ';':
	      next = this._readPredicate;
	      break;
	    // Comma means both the subject and predicate are shared; the object is different.
	    case ',':
	      next = this._readObject;
	      break;
	    // An IRI means this is a quad (only allowed if not already inside a graph).
	    case 'IRI':
	      if (this._supportsQuads && this._graph === null) {
	        if (this._base === null || absoluteIRI.test(token.value))
	          graph = token.value;
	        else
	          graph = this._resolveIRI(token);
	        subject = this._subject;
	        next = this._readQuadPunctuation;
	        break;
	      }
	    // An prefixed name means this is a quad (only allowed if not already inside a graph).
	    case 'prefixed':
	      if (this._supportsQuads && this._graph === null) {
	        var prefix = this._prefixes[token.prefix];
	        if (prefix === undefined)
	          return this._error('Undefined prefix "' + token.prefix + ':"', token);
	        graph = prefix + token.value;
	        next = this._readQuadPunctuation;
	        break;
	      }
	    default:
	      return this._error('Expected punctuation to follow "' + this._object + '"', token);
	    }
	    // A triple has been completed now, so return it.
	    if (subject !== null)
	      this._callback(null, { subject:   subject,
	                             predicate: this._predicate,
	                             object:    this._object,
	                             graph:     graph || '' });
	    return next;
	  },
	
	    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
	  _readBlankNodePunctuation: function (token) {
	    var next;
	    switch (token.type) {
	    // Semicolon means the subject is shared; predicate and object are different.
	    case ';':
	      next = this._readPredicate;
	      break;
	    // Comma means both the subject and predicate are shared; the object is different.
	    case ',':
	      next = this._readObject;
	      break;
	    default:
	      return this._error('Expected punctuation to follow "' + this._object + '"', token);
	    }
	    // A triple has been completed now, so return it.
	    this._callback(null, { subject:   this._subject,
	                           predicate: this._predicate,
	                           object:    this._object,
	                           graph:     this._graph || '' });
	    return next;
	  },
	
	  // ### `_readQuadPunctuation` reads punctuation after a quad.
	  _readQuadPunctuation: function (token) {
	    if (token.type !== '.')
	      return this._error('Expected dot to follow quad', token);
	    return this._readInTopContext;
	  },
	
	  // ### `_readPrefix` reads the prefix of a prefix declaration.
	  _readPrefix: function (token) {
	    if (token.type !== 'prefix')
	      return this._error('Expected prefix to follow @prefix', token);
	    this._prefix = token.value;
	    return this._readPrefixIRI;
	  },
	
	  // ### `_readPrefixIRI` reads the IRI of a prefix declaration.
	  _readPrefixIRI: function (token) {
	    if (token.type !== 'IRI')
	      return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);
	    var prefixIRI;
	    if (this._base === null || absoluteIRI.test(token.value))
	      prefixIRI = token.value;
	    else
	      prefixIRI = this._resolveIRI(token);
	    this._prefixes[this._prefix] = prefixIRI;
	    this._prefixCallback(this._prefix, prefixIRI);
	    return this._readDeclarationPunctuation;
	  },
	
	  // ### `_readBaseIRI` reads the IRI of a base declaration.
	  _readBaseIRI: function (token) {
	    if (token.type !== 'IRI')
	      return this._error('Expected IRI to follow base declaration', token);
	    try {
	      this._setBase(this._base === null ||
	                    absoluteIRI.test(token.value) ? token.value : this._resolveIRI(token));
	    }
	    catch (error) { this._error(error.message, token); }
	    return this._readDeclarationPunctuation;
	  },
	
	  // ### `_readNamedGraphLabel` reads the label of a named graph.
	  _readNamedGraphLabel: function (token) {
	    switch (token.type) {
	    case 'IRI':
	    case 'prefixed':
	      return this._readSubject(token), this._readGraph;
	    case '[':
	      return this._readNamedGraphBlankLabel;
	    default:
	      return this._error('Invalid graph label', token);
	    }
	  },
	
	  // ### `_readNamedGraphLabel` reads a blank node label of a named graph.
	  _readNamedGraphBlankLabel: function (token) {
	    if (token.type !== ']')
	      return this._error('Invalid graph label', token);
	    this._subject = '_:b' + blankNodeCount++;
	    return this._readGraph;
	  },
	
	  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration.
	  _readDeclarationPunctuation: function (token) {
	    // SPARQL-style declarations don't have punctuation.
	    if (this._sparqlStyle)
	      return this._readInTopContext(token);
	
	    if (token.type !== '.')
	      return this._error('Expected declaration to end with a dot', token);
	    return this._readInTopContext;
	  },
	
	  // ### `_getTripleEndReader` gets the next reader function at the end of a triple.
	  _getTripleEndReader: function () {
	    var stack = this._tripleStack;
	    if (stack.length === 0)
	      return this._readPunctuation;
	
	    switch (stack[stack.length - 1].type) {
	    case 'blank':
	      return this._readBlankNodeTail;
	    case 'list':
	      return this._readListItem;
	    }
	  },
	
	  // ### `_error` emits an error message through the callback.
	  _error: function (message, token) {
	    this._callback(new Error(message + ' at line ' + token.line + '.'));
	  },
	
	  // ### `_resolveIRI` resolves a relative IRI token against the base path,
	  // assuming that a base path has been set and that the IRI is indeed relative.
	  _resolveIRI: function (token) {
	    var iri = token.value;
	    switch (iri[0]) {
	    // An empty relative IRI indicates the base IRI
	    case undefined: return this._base;
	    // Resolve relative fragment IRIs against the base IRI
	    case '#': return this._base + iri;
	    // Resolve relative query string IRIs by replacing the query string
	    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
	    // Resolve root-relative IRIs at the root of the base IRI
	    case '/':
	      // Resolve scheme-relative IRIs to the scheme
	      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
	    // Resolve all other IRIs at the base IRI's path
	    default:
	      return this._removeDotSegments(this._basePath + iri);
	    }
	  },
	
	  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
	  _removeDotSegments: function (iri) {
	    // Don't modify the IRI if it does not contain any dot segments
	    if (!dotSegments.test(iri))
	      return iri;
	
	    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
	    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';
	
	    while (i < length) {
	      switch (next) {
	      // The path starts with the first slash after the authority
	      case ':':
	        if (pathStart < 0) {
	          // Skip two slashes before the authority
	          if (iri[++i] === '/' && iri[++i] === '/')
	            // Skip to slash after the authority
	            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
	              i = pathStart;
	        }
	        break;
	      // Don't modify a query string or fragment
	      case '?':
	      case '#':
	        i = length;
	        break;
	      // Handle '/.' or '/..' path segments
	      case '/':
	        if (iri[i + 1] === '.') {
	          next = iri[++i + 1];
	          switch (next) {
	          // Remove a '/.' segment
	          case '/':
	            result += iri.substring(segmentStart, i - 1);
	            segmentStart = i + 1;
	            break;
	          // Remove a trailing '/.' segment
	          case undefined:
	          case '?':
	          case '#':
	            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
	          // Remove a '/..' segment
	          case '.':
	            next = iri[++i + 1];
	            if (next === undefined || next === '/' || next === '?' || next === '#') {
	              result += iri.substring(segmentStart, i - 2);
	              // Try to remove the parent path from result
	              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
	                result = result.substr(0, segmentStart);
	              // Remove a trailing '/..' segment
	              if (next !== '/')
	                return result + '/' + iri.substr(i + 1);
	              segmentStart = i + 1;
	            }
	          }
	        }
	      }
	      next = iri[++i];
	    }
	    return result + iri.substring(segmentStart);
	  },
	
	  // ## Public methods
	
	  // ### `parse` parses the N3 input and emits each parsed triple through the callback.
	  parse: function (input, tripleCallback, prefixCallback) {
	    // The read callback is the next function to be executed when a token arrives.
	    // We start reading in the top context.
	    this._readCallback = this._readInTopContext;
	    this._prefixes = Object.create(null);
	    this._prefixes._ = this._blankNodePrefix || '_:b' + blankNodePrefix++ + '_';
	
	    // If the input argument is not given, shift parameters
	    if (typeof input === 'function')
	      prefixCallback = tripleCallback, tripleCallback = input, input = null;
	
	    // Set the triple and prefix callbacks.
	    this._callback = tripleCallback || noop;
	    this._prefixCallback = prefixCallback || noop;
	
	    // Execute the read callback when a token arrives.
	    var self = this;
	    this._lexer.tokenize(input, function (error, token) {
	      if (error !== null)
	        self._callback(error), self._callback = noop;
	      else if (self._readCallback !== undefined)
	        self._readCallback = self._readCallback(token);
	    });
	
	    // If no input was given, it can be added with `addChunk` and ended with `end`
	    if (!input) {
	      this.addChunk = this._lexer.addChunk;
	      this.end = this._lexer.end;
	    }
	  },
	};
	
	// The empty function
	function noop() {}
	
	// ## Exports
	
	// Export the `N3Parser` class as a whole.
	module.exports = N3Parser;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	// **N3Store** objects store N3 triples by graph in memory.
	
	var expandPrefixedName = __webpack_require__(250).expandPrefixedName;
	
	// ## Constructor
	function N3Store(triples, options) {
	  if (!(this instanceof N3Store))
	    return new N3Store(triples, options);
	
	  // The number of triples is initially zero.
	  this._size = 0;
	  // `_graphs` contains subject, predicate, and object indexes per graph.
	  this._graphs = Object.create(null);
	  // `_entities` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers.
	  // This saves memory, since only the numbers have to be stored in `_graphs`.
	  this._entities = Object.create(null);
	  this._entities['><'] = 0; // Dummy entry, so the first actual key is non-zero
	  this._entityCount = 0;
	  // `_blankNodeIndex` is the index of the last created blank node that was automatically named
	  this._blankNodeIndex = 0;
	
	  // Shift parameters if `triples` is not given
	  if (!options && triples && !triples[0])
	    options = triples, triples = null;
	
	  // Add triples and prefixes if passed
	  this._prefixes = Object.create(null);
	  if (options && options.prefixes)
	    this.addPrefixes(options.prefixes);
	  if (triples)
	    this.addTriples(triples);
	}
	
	N3Store.prototype = {
	  // ## Public properties
	
	  // ### `size` returns the number of triples in the store.
	  get size() {
	    // Return the triple count if if was cached.
	    var size = this._size;
	    if (size !== null)
	      return size;
	
	    // Calculate the number of triples by counting to the deepest level.
	    var graphs = this._graphs, subjects, subject;
	    for (var graphKey in graphs)
	      for (var subjectKey in (subjects = graphs[graphKey].subjects))
	        for (var predicateKey in (subject = subjects[subjectKey]))
	          size += Object.keys(subject[predicateKey]).length;
	    return this._size = size;
	  },
	
	  // ## Private methods
	
	  // ### `_addToIndex` adds a triple to a three-layered index.
	  _addToIndex: function (index0, key0, key1, key2) {
	    // Create layers as necessary.
	    var index1 = index0[key0] || (index0[key0] = {});
	    var index2 = index1[key1] || (index1[key1] = {});
	    // Setting the key to _any_ value signalizes the presence of the triple.
	    index2[key2] = null;
	  },
	
	  // ### `_removeFromIndex` removes a triple from a three-layered index.
	  _removeFromIndex: function (index0, key0, key1, key2) {
	    // Remove the triple from the index.
	    var index1 = index0[key0], index2 = index1[key1], key;
	    delete index2[key2];
	
	    // Remove intermediary index layers if they are empty.
	    for (key in index2) return;
	    delete index1[key1];
	    for (key in index1) return;
	    delete index0[key0];
	  },
	
	  // ### `_findInIndex` finds a set of triples in a three-layered index.
	  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
	  // Any of these keys can be `null`, which is interpreted as a wildcard.
	  // `name0`, `name1`, and `name2` are the names of the keys at each level,
	  // used when reconstructing the resulting triple
	  // (for instance: _subject_, _predicate_, and _object_).
	  // Finally, `graph` will be the graph of the created triples.
	  _findInIndex: function (index0, key0, key1, key2, name0, name1, name2, graph) {
	    var results = [], entityKeys = Object.keys(this._entities), tmp, index1, index2;
	
	    // If a key is specified, use only that part of index 0.
	    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
	    for (var value0 in index0) {
	      var entity0 = entityKeys[value0];
	
	      if (index1 = index0[value0]) {
	        // If a key is specified, use only that part of index 1.
	        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
	        for (var value1 in index1) {
	          var entity1 = entityKeys[value1];
	
	          if (index2 = index1[value1]) {
	            // If a key is specified, use only that part of index 2, if it exists.
	            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);
	            // Create triples for all items found in index 2.
	            for (var l = values.length - 1; l >= 0; l--) {
	              var result = { subject: '', predicate: '', object: '', graph: graph };
	              result[name0] = entity0;
	              result[name1] = entity1;
	              result[name2] = entityKeys[values[l]];
	              results.push(result);
	            }
	          }
	        }
	      }
	    }
	    return results;
	  },
	
	  // ### `_countInIndex` counts matching triples in a three-layered index.
	  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
	  // Any of these keys can be `null`, which is interpreted as a wildcard.
	  _countInIndex: function (index0, key0, key1, key2) {
	    var count = 0, tmp, index1, index2;
	
	    // If a key is specified, count only that part of index 0.
	    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
	    for (var value0 in index0) {
	      if (index1 = index0[value0]) {
	        // If a key is specified, count only that part of index 1.
	        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
	        for (var value1 in index1) {
	          if (index2 = index1[value1]) {
	            // If a key is specified, count the triple if it exists.
	            if (key2) (key2 in index2) && count++;
	            // Otherwise, count all triples.
	            else count += Object.keys(index2).length;
	          }
	        }
	      }
	    }
	    return count;
	  },
	
	  // ## Public methods
	
	  // ### `addTriple` adds a new N3 triple to the store.
	  addTriple: function (subject, predicate, object, graph) {
	    // Shift arguments if a triple object is given instead of components
	    if (!predicate)
	      graph = subject.graph, object = subject.object,
	        predicate = subject.predicate, subject = subject.subject;
	
	    // Find the graph that will contain the triple.
	    graph = graph || '';
	    var graphItem = this._graphs[graph];
	    // Create the graph if it doesn't exist yet.
	    if (!graphItem) {
	      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
	      // Freezing a graph helps subsequent `add` performance,
	      // and properties will never be modified anyway.
	      Object.freeze(graphItem);
	    }
	
	    // Since entities can often be long IRIs, we avoid storing them in every index.
	    // Instead, we have a separate index that maps entities to numbers,
	    // which are then used as keys in the other indexes.
	    var entities = this._entities;
	    subject   = entities[subject]   || (entities[subject]   = ++this._entityCount);
	    predicate = entities[predicate] || (entities[predicate] = ++this._entityCount);
	    object    = entities[object]    || (entities[object]    = ++this._entityCount);
	
	    this._addToIndex(graphItem.subjects,   subject,   predicate, object);
	    this._addToIndex(graphItem.predicates, predicate, object,    subject);
	    this._addToIndex(graphItem.objects,    object,    subject,   predicate);
	
	    // The cached triple count is now invalid.
	    this._size = null;
	  },
	
	  // ### `addTriples` adds multiple N3 triples to the store.
	  addTriples: function (triples) {
	    for (var i = triples.length - 1; i >= 0; i--)
	      this.addTriple(triples[i]);
	  },
	
	  // ### `addPrefix` adds support for querying with the given prefix
	  addPrefix: function (prefix, iri) {
	    this._prefixes[prefix] = iri;
	  },
	
	  // ### `addPrefixes` adds support for querying with the given prefixes
	  addPrefixes: function (prefixes) {
	    for (var prefix in prefixes)
	      this.addPrefix(prefix, prefixes[prefix]);
	  },
	
	  // ### `removeTriple` removes an N3 triple from the store if it exists.
	  removeTriple: function (subject, predicate, object, graph) {
	    // Shift arguments if a triple object is given instead of components.
	    if (!predicate)
	      graph = subject.graph, object = subject.object,
	        predicate = subject.predicate, subject = subject.subject;
	    graph = graph || '';
	
	    // Find internal identifiers for all components.
	    var graphItem, entities = this._entities, graphs = this._graphs;
	    if (!(subject     = entities[subject]))   return;
	    if (!(predicate   = entities[predicate])) return;
	    if (!(object      = entities[object]))    return;
	    if (!(graphItem   = graphs[graph]))       return;
	
	    // Verify that the triple exists.
	    var subjects, predicates;
	    if (!(subjects   = graphItem.subjects[subject])) return;
	    if (!(predicates = subjects[predicate])) return;
	    if (!(object in predicates)) return;
	
	    // Remove it from all indexes.
	    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);
	    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);
	    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);
	    if (this._size !== null) this._size--;
	
	    // Remove the graph if it is empty.
	    for (subject in graphItem.subjects) return;
	    delete graphs[graph];
	  },
	
	  // ### `removeTriples` removes multiple N3 triples from the store.
	  removeTriples: function (triples) {
	    for (var i = triples.length - 1; i >= 0; i--)
	      this.removeTriple(triples[i]);
	  },
	
	  // ### `find` finds a set of triples matching a pattern, expanding prefixes as necessary.
	  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
	  // Setting `graph` to `null` means the default graph.
	  find: function (subject, predicate, object, graph) {
	    var prefixes = this._prefixes;
	    return this.findByIRI(
	      expandPrefixedName(subject,   prefixes),
	      expandPrefixedName(predicate, prefixes),
	      expandPrefixedName(object,    prefixes),
	      expandPrefixedName(graph,     prefixes)
	    );
	  },
	
	  // ### `findByIRI` finds a set of triples matching a pattern.
	  // Setting `subject`, `predicate`, or `object` to a falsy value means an _anything_ wildcard.
	  // Setting `graph` to a falsy value means the default graph.
	  findByIRI: function (subject, predicate, object, graph) {
	    graph = graph || '';
	    var graphItem = this._graphs[graph], entities = this._entities;
	
	    // If the specified graph contain no triples, there are no results.
	    if (!graphItem) return [];
	
	    // Translate IRIs to internal index keys.
	    // Optimization: if the entity doesn't exist, no triples with it exist.
	    if (subject   && !(subject   = entities[subject]))   return [];
	    if (predicate && !(predicate = entities[predicate])) return [];
	    if (object    && !(object    = entities[object]))    return [];
	
	    // Choose the optimal index, based on what fields are present
	    if (subject) {
	      if (object)
	        // If subject and object are given, the object index will be the fastest.
	        return this._findInIndex(graphItem.objects, object, subject, predicate,
	                                 'object', 'subject', 'predicate', graph);
	      else
	        // If only subject and possibly predicate are given, the subject index will be the fastest.
	        return this._findInIndex(graphItem.subjects, subject, predicate, null,
	                                 'subject', 'predicate', 'object', graph);
	    }
	    else if (predicate)
	      // If only predicate and possibly object are given, the predicate index will be the fastest.
	      return this._findInIndex(graphItem.predicates, predicate, object, null,
	                               'predicate', 'object', 'subject', graph);
	    else if (object)
	      // If only object is given, the object index will be the fastest.
	      return this._findInIndex(graphItem.objects, object, null, null,
	                               'object', 'subject', 'predicate', graph);
	    else
	      // If nothing is given, iterate subjects and predicates first
	      return this._findInIndex(graphItem.subjects, null, null, null,
	                               'subject', 'predicate', 'object', graph);
	  },
	
	  // ### `count` returns the number of triples matching a pattern, expanding prefixes as necessary.
	  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
	  // Setting `graph` to `null` means the default graph.
	  count: function (subject, predicate, object, graph) {
	    var prefixes = this._prefixes;
	    return this.countByIRI(
	      expandPrefixedName(subject,   prefixes),
	      expandPrefixedName(predicate, prefixes),
	      expandPrefixedName(object,    prefixes),
	      expandPrefixedName(graph,     prefixes)
	    );
	  },
	
	  // ### `countByIRI` returns the number of triples matching a pattern.
	  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
	  // Setting `graph` to `null` means the default graph.
	  countByIRI: function (subject, predicate, object, graph) {
	    graph = graph || '';
	    var graphItem = this._graphs[graph], entities = this._entities;
	
	    // If the specified graph contain no triples, there are no results.
	    if (!graphItem) return 0;
	
	    // Translate IRIs to internal index keys.
	    // Optimization: if the entity doesn't exist, no triples with it exist.
	    if (subject   && !(subject   = entities[subject]))   return 0;
	    if (predicate && !(predicate = entities[predicate])) return 0;
	    if (object    && !(object    = entities[object]))    return 0;
	
	    // Choose the optimal index, based on what fields are present
	    if (subject) {
	      if (object)
	        // If subject and object are given, the object index will be the fastest.
	        return this._countInIndex(graphItem.objects, object, subject, predicate);
	      else
	        // If only subject and possibly predicate are given, the subject index will be the fastest.
	        return this._countInIndex(graphItem.subjects, subject, predicate, object);
	    }
	    else if (predicate) {
	      // If only predicate and possibly object are given, the predicate index will be the fastest.
	      return this._countInIndex(graphItem.predicates, predicate, object, subject);
	    }
	    else {
	      // If only object is possibly given, the object index will be the fastest.
	      return this._countInIndex(graphItem.objects, object, subject, predicate);
	    }
	  },
	
	  // ### `createBlankNode` creates a new blank node, returning its name.
	  createBlankNode: function (suggestedName) {
	    var name, index;
	    // Generate a name based on the suggested name
	    if (suggestedName) {
	      name = suggestedName = '_:' + suggestedName, index = 1;
	      while (this._entities[name])
	        name = suggestedName + index++;
	    }
	    // Generate a generic blank node name
	    else {
	      do { name = '_:b' + this._blankNodeIndex++; }
	      while (this._entities[name]);
	    }
	    // Add the blank node to the entities, avoiding the generation of duplicates
	    this._entities[name] = ++this._entityCount;
	    return name;
	  },
	};
	
	// ## Exports
	
	// Export the `N3Store` class as a whole.
	module.exports = N3Store;


/***/ },
/* 250 */
/***/ function(module, exports) {

	// **N3Util** provides N3 utility functions
	
	var Xsd = 'http://www.w3.org/2001/XMLSchema#';
	var XsdString  = Xsd + 'string';
	var XsdInteger = Xsd + 'integer';
	var XsdDecimal = Xsd + 'decimal';
	var XsdBoolean = Xsd + 'boolean';
	var RdfLangString = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString';
	
	var N3Util = {
	  // Tests whether the given entity (triple object) represents an IRI in the N3 library
	  isIRI: function (entity) {
	    if (!entity)
	      return entity;
	    var firstChar = entity[0];
	    return firstChar !== '"' && firstChar !== '_';
	  },
	
	  // Tests whether the given entity (triple object) represents a literal in the N3 library
	  isLiteral: function (entity) {
	    return entity && entity[0] === '"';
	  },
	
	  // Tests whether the given entity (triple object) represents a blank node in the N3 library
	  isBlank: function (entity) {
	    return entity && entity.substr(0, 2) === '_:';
	  },
	
	  // Gets the string value of a literal in the N3 library
	  getLiteralValue: function (literal) {
	    var match = /^"([^]*)"/.exec(literal);
	    if (!match)
	      throw new Error(literal + ' is not a literal');
	    return match[1];
	  },
	
	  // Gets the type of a literal in the N3 library
	  getLiteralType: function (literal) {
	    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
	    if (!match)
	      throw new Error(literal + ' is not a literal');
	    return match[1] || (match[2] ? RdfLangString : XsdString);
	  },
	
	  // Gets the language of a literal in the N3 library
	  getLiteralLanguage: function (literal) {
	    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
	    if (!match)
	      throw new Error(literal + ' is not a literal');
	    return match[1] ? match[1].toLowerCase() : '';
	  },
	
	  // Tests whether the given entity (triple object) represents a prefixed name
	  isPrefixedName: function (entity) {
	    return entity && /^[^:\/"']*:[^:\/"']+$/.test(entity);
	  },
	
	  // Expands the prefixed name to a full IRI (also when it occurs as a literal's type)
	  expandPrefixedName: function (prefixedName, prefixes) {
	    var match = /(?:^|"\^\^)([^:\/#"'\^_]*):[^\/]*$/.exec(prefixedName), prefix, base, index;
	    if (match)
	      prefix = match[1], base = prefixes[prefix], index = match.index;
	    if (base === undefined)
	      return prefixedName;
	
	    // The match index is non-zero when expanding a literal's type.
	    return index === 0 ? base + prefixedName.substr(prefix.length + 1)
	                       : prefixedName.substr(0, index + 3) +
	                         base + prefixedName.substr(index + prefix.length + 4);
	  },
	
	  // Creates an IRI in N3.js representation
	  createIRI: function (iri) {
	    return iri && iri[0] === '"' ? N3Util.getLiteralValue(iri) : iri;
	  },
	
	  // Creates a literal in N3.js representation
	  createLiteral: function (value, modifier) {
	    if (!modifier) {
	      switch (typeof value) {
	      case 'boolean':
	        modifier = XsdBoolean;
	        break;
	      case 'number':
	        if (isFinite(value)) {
	          modifier = value % 1 === 0 ? XsdInteger : XsdDecimal;
	          break;
	        }
	      default:
	        return '"' + value + '"';
	      }
	    }
	    return '"' + value +
	           (/^[a-z]+(-[a-z0-9]+)*$/i.test(modifier) ? '"@'  + modifier.toLowerCase()
	                                                    : '"^^' + modifier);
	  },
	};
	
	// Add the N3Util functions to the given object or its prototype
	function addN3Util(parent, toPrototype) {
	  for (var name in N3Util)
	    if (!toPrototype)
	      parent[name] = N3Util[name];
	    else
	      parent.prototype[name] = applyToThis(N3Util[name]);
	
	  return parent;
	}
	
	// Returns a function that applies `f` to the `this` object
	function applyToThis(f) {
	  return function (a) { return f(this, a); };
	}
	
	// Expose N3Util, attaching all functions to it
	module.exports = addN3Util(addN3Util);


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	// **N3StreamParser** parses an N3 stream into a triple stream
	var Transform = __webpack_require__(252).Transform,
	    util = __webpack_require__(278),
	    N3Parser = __webpack_require__(248);
	
	// ## Constructor
	function N3StreamParser(options) {
	  if (!(this instanceof N3StreamParser))
	    return new N3StreamParser(options);
	
	  // Initialize Transform base class
	  Transform.call(this, { decodeStrings: true });
	  this._readableState.objectMode = true;
	
	  // Set up parser
	  var self = this, parser = new N3Parser(options);
	  parser.parse(
	    // Handle triples by pushing them down the pipeline
	    function (error, triple) {
	      triple && self.push(triple) ||
	      error  && self.emit('error', error);
	    },
	    // Emit prefixes through the `prefix` event
	    this.emit.bind(this, 'prefix'));
	
	  // Implement Transform methods on top of parser
	  this._transform = function (chunk, encoding, done) { parser.addChunk(chunk); done(); };
	  this._flush = function (done) { parser.end(); done(); };
	}
	util.inherits(N3StreamParser, Transform);
	
	// ## Exports
	// Export the `N3StreamParser` class as a whole.
	module.exports = N3StreamParser;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(253).EventEmitter;
	var inherits = __webpack_require__(254);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(255);
	Stream.Writable = __webpack_require__(274);
	Stream.Duplex = __webpack_require__(275);
	Stream.Transform = __webpack_require__(276);
	Stream.PassThrough = __webpack_require__(277);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 254 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(252); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(256);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(269);
	exports.Duplex = __webpack_require__(268);
	exports.Transform = __webpack_require__(272);
	exports.PassThrough = __webpack_require__(273);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(257);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(258);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(253).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(252);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(253).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(259).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(263);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(264);
	util.inherits = __webpack_require__(265);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(266);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(267);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(268);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(271).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(268);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(271).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 258 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(260)
	var ieee754 = __webpack_require__(261)
	var isArray = __webpack_require__(262)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 260 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 261 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 262 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(259);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(259).Buffer))

/***/ },
/* 265 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 266 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(259).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(263);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(257);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(264);
	util.inherits = __webpack_require__(265);
	/*</replacement>*/
	
	var Readable = __webpack_require__(256);
	var Writable = __webpack_require__(269);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(257);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(264);
	util.inherits = __webpack_require__(265);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(270)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(252);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(253).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(259).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(263);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(268);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(268);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), __webpack_require__(237).setImmediate))

/***/ },
/* 270 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(259).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(268);
	
	/*<replacement>*/
	var util = __webpack_require__(264);
	util.inherits = __webpack_require__(265);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(272);
	
	/*<replacement>*/
	var util = __webpack_require__(264);
	util.inherits = __webpack_require__(265);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(269)


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(268)


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(272)


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(273)


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(279);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(280);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(27)))

/***/ },
/* 279 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 280 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	// **N3StreamWriter** serializes a triple stream into an N3 stream
	var Transform = __webpack_require__(252).Transform,
	    util = __webpack_require__(278),
	    N3Writer = __webpack_require__(282);
	
	// ## Constructor
	function N3StreamWriter(options) {
	  if (!(this instanceof N3StreamWriter))
	    return new N3StreamWriter(options);
	
	  // Initialize Transform base class
	  Transform.call(this, { encoding: 'utf8' });
	  this._writableState.objectMode = true;
	
	  // Set up writer with a dummy stream object
	  var self = this;
	  var writer = new N3Writer({
	    write: function (chunk, encoding, callback) { self.push(chunk); callback && callback(); },
	    end: function (callback) { self.push(null); callback && callback(); },
	  }, options);
	
	  // Implement Transform methods on top of writer
	  this._transform = function (triple, encoding, done) { writer.addTriple(triple, done); };
	  this._flush = function (done) { writer.end(done); };
	}
	util.inherits(N3StreamWriter, Transform);
	
	// ## Exports
	// Export the `N3StreamWriter` class as a whole.
	module.exports = N3StreamWriter;


/***/ },
/* 282 */
/***/ function(module, exports) {

	// **N3Writer** writes N3 documents.
	
	// Matches a literal as represented in memory by the N3 library
	var N3LiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i;
	
	// rdf:type predicate (for 'a' abbreviation)
	var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
	    RDF_TYPE   = RDF_PREFIX + 'type';
	
	// Characters in literals that require escaping
	var escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
	    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
	    escapeReplacements = { '\\': '\\\\', '"': '\\"', '\t': '\\t',
	                           '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f' };
	
	// ## Constructor
	function N3Writer(outputStream, options) {
	  if (!(this instanceof N3Writer))
	    return new N3Writer(outputStream, options);
	
	  // Shift arguments if the first argument is not a stream
	  if (outputStream && typeof outputStream.write !== 'function')
	    options = outputStream, outputStream = null;
	  options = options || {};
	
	  // If no output stream given, send the output as string through the end callback
	  if (!outputStream) {
	    var output = '';
	    this._outputStream = {
	      write: function (chunk, encoding, done) { output += chunk; done && done(); },
	      end:   function (done) { done && done(null, output); },
	    };
	    this._endStream = true;
	  }
	  else {
	    this._outputStream = outputStream;
	    this._endStream = options.end === undefined ? true : !!options.end;
	  }
	
	  // Initialize writer, depending on the format
	  this._subject = null;
	  if (!(/triple|quad/i).test(options.format)) {
	    this._graph = '';
	    this._prefixIRIs = Object.create(null);
	    options.prefixes && this.addPrefixes(options.prefixes);
	  }
	  else {
	    this._writeTriple = this._writeTripleLine;
	  }
	}
	
	N3Writer.prototype = {
	  // ## Private methods
	
	  // ### `_write` writes the argument to the output stream
	  _write: function (string, callback) {
	    this._outputStream.write(string, 'utf8', callback);
	  },
	
	    // ### `_writeTriple` writes the triple to the output stream
	  _writeTriple: function (subject, predicate, object, graph, done) {
	    try {
	      // Write the graph's label if it has changed
	      if (this._graph !== graph) {
	        // Close the previous graph and start the new one
	        this._write((this._subject === null ? '' : (this._graph ? '\n}\n' : '.\n')) +
	                    (graph ? this._encodeIriOrBlankNode(graph) + ' {\n' : ''));
	        this._subject = null;
	        // Don't treat identical blank nodes as repeating graphs
	        this._graph = graph[0] !== '[' ? graph : ']';
	      }
	      // Don't repeat the subject if it's the same
	      if (this._subject === subject) {
	        // Don't repeat the predicate if it's the same
	        if (this._predicate === predicate)
	          this._write(', ' + this._encodeObject(object), done);
	        // Same subject, different predicate
	        else
	          this._write(';\n    ' +
	                      this._encodePredicate(this._predicate = predicate) + ' ' +
	                      this._encodeObject(object), done);
	      }
	      // Different subject; write the whole triple
	      else
	        this._write((this._subject === null ? '' : '.\n') +
	                    this._encodeSubject(this._subject = subject) + ' ' +
	                    this._encodePredicate(this._predicate = predicate) + ' ' +
	                    this._encodeObject(object), done);
	    }
	    catch (error) { done && done(error); }
	  },
	
	  // ### `_writeTripleLine` writes the triple or quad to the output stream as a single line
	  _writeTripleLine: function (subject, predicate, object, graph, done) {
	    // Don't use prefixes
	    delete this._prefixMatch;
	    // Write the triple
	    try {
	      this._write(this._encodeIriOrBlankNode(subject) + ' ' +
	                  this._encodeIriOrBlankNode(predicate) + ' ' +
	                  this._encodeObject(object) +
	                  (graph ? ' ' + this._encodeIriOrBlankNode(graph) + '.\n' : '.\n'), done);
	    }
	    catch (error) { done && done(error); }
	  },
	
	  // ### `_encodeIriOrBlankNode` represents an IRI or blank node
	  _encodeIriOrBlankNode: function (entity) {
	    // A blank node or list is represented as-is
	    var firstChar = entity[0];
	    if (firstChar === '[' || firstChar === '(' || firstChar === '_' && entity[1] === ':')
	      return entity;
	    // Escape special characters
	    if (escape.test(entity))
	      entity = entity.replace(escapeAll, characterReplacer);
	    // Try to represent the IRI as prefixed name
	    var prefixMatch = this._prefixRegex.exec(entity);
	    return !prefixMatch ? '<' + entity + '>' :
	           (!prefixMatch[1] ? entity : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);
	  },
	
	  // ### `_encodeLiteral` represents a literal
	  _encodeLiteral: function (value, type, language) {
	    // Escape special characters
	    if (escape.test(value))
	      value = value.replace(escapeAll, characterReplacer);
	    // Write the literal, possibly with type or language
	    if (language)
	      return '"' + value + '"@' + language;
	    else if (type)
	      return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
	    else
	      return '"' + value + '"';
	  },
	
	  // ### `_encodeSubject` represents a subject
	  _encodeSubject: function (subject) {
	    if (subject[0] === '"')
	      throw new Error('A literal as subject is not allowed: ' + subject);
	    // Don't treat identical blank nodes as repeating subjects
	    if (subject[0] === '[')
	      this._subject = ']';
	    return this._encodeIriOrBlankNode(subject);
	  },
	
	  // ### `_encodePredicate` represents a predicate
	  _encodePredicate: function (predicate) {
	    if (predicate[0] === '"')
	      throw new Error('A literal as predicate is not allowed: ' + predicate);
	    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
	  },
	
	  // ### `_encodeObject` represents an object
	  _encodeObject: function (object) {
	    // Represent an IRI or blank node
	    if (object[0] !== '"')
	      return this._encodeIriOrBlankNode(object);
	    // Represent a literal
	    var match = N3LiteralMatcher.exec(object);
	    if (!match) throw new Error('Invalid literal: ' + object);
	    return this._encodeLiteral(match[1], match[2], match[3]);
	  },
	
	  // ### `_blockedWrite` replaces `_write` after the writer has been closed
	  _blockedWrite: function () {
	    throw new Error('Cannot write because the writer has been closed.');
	  },
	
	  // ### `addTriple` adds the triple to the output stream
	  addTriple: function (subject, predicate, object, graph, done) {
	    // The triple was given as a triple object, so shift parameters
	    if (object === undefined)
	      this._writeTriple(subject.subject, subject.predicate, subject.object,
	                        subject.graph || '', predicate);
	    // The optional `graph` parameter was not provided
	    else if (typeof graph !== 'string')
	      this._writeTriple(subject, predicate, object, '', graph);
	    // The `graph` parameter was provided
	    else
	      this._writeTriple(subject, predicate, object, graph, done);
	  },
	
	  // ### `addTriples` adds the triples to the output stream
	  addTriples: function (triples) {
	    for (var i = 0; i < triples.length; i++)
	      this.addTriple(triples[i]);
	  },
	
	  // ### `addPrefix` adds the prefix to the output stream
	  addPrefix: function (prefix, iri, done) {
	    var prefixes = {};
	    prefixes[prefix] = iri;
	    this.addPrefixes(prefixes, done);
	  },
	
	  // ### `addPrefixes` adds the prefixes to the output stream
	  addPrefixes: function (prefixes, done) {
	    // Add all useful prefixes
	    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
	    for (var prefix in prefixes) {
	      // Verify whether the prefix can be used and does not exist yet
	      var iri = prefixes[prefix];
	      if (/[#\/]$/.test(iri) && prefixIRIs[iri] !== (prefix += ':')) {
	        hasPrefixes = true;
	        prefixIRIs[iri] = prefix;
	        // Finish a possible pending triple
	        if (this._subject !== null) {
	          this._write(this._graph ? '\n}\n' : '.\n');
	          this._subject = null, this._graph = '';
	        }
	        // Write prefix
	        this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
	      }
	    }
	    // Recreate the prefix matcher
	    if (hasPrefixes) {
	      var IRIlist = '', prefixList = '';
	      for (var prefixIRI in prefixIRIs) {
	        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
	        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
	      }
	      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
	      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
	                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
	    }
	    // End a prefix block with a newline
	    this._write(hasPrefixes ? '\n' : '', done);
	  },
	
	  // ### `blank` creates a blank node with the given content
	  blank: function (predicate, object) {
	    var children = predicate, child, length;
	    // Empty blank node
	    if (predicate === undefined)
	      children = [];
	    // Blank node passed as blank("predicate", "object")
	    else if (typeof predicate === 'string')
	      children = [{ predicate: predicate, object: object }];
	    // Blank node passed as blank({ predicate: predicate, object: object })
	    else if (!('length' in predicate))
	      children = [predicate];
	
	    switch (length = children.length) {
	    // Generate an empty blank node
	    case 0:
	      return '[]';
	    // Generate a non-nested one-triple blank node
	    case 1:
	      child = children[0];
	      if (child.object[0] !== '[')
	        return '[ ' + this._encodePredicate(child.predicate) + ' ' +
	                      this._encodeObject(child.object) + ' ]';
	    // Generate a multi-triple or nested blank node
	    default:
	      var contents = '[';
	      // Write all triples in order
	      for (var i = 0; i < length; i++) {
	        child = children[i];
	        // Write only the object is the predicate is the same as the previous
	        if (child.predicate === predicate)
	          contents += ', ' + this._encodeObject(child.object);
	        // Otherwise, write the predicate and the object
	        else {
	          contents += (i ? ';\n  ' : '\n  ') +
	                      this._encodePredicate(child.predicate) + ' ' +
	                      this._encodeObject(child.object);
	          predicate = child.predicate;
	        }
	      }
	      return contents + '\n]';
	    }
	  },
	
	  // ### `list` creates a list node with the given content
	  list: function (elements) {
	    var length = elements && elements.length || 0, contents = new Array(length);
	    for (var i = 0; i < length; i++)
	      contents[i] = this._encodeObject(elements[i]);
	    return '(' + contents.join(' ') + ')';
	  },
	
	  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
	  _prefixRegex: /$0^/,
	
	  // ### `end` signals the end of the output stream
	  end: function (done) {
	    // Finish a possible pending triple
	    if (this._subject !== null) {
	      this._write(this._graph ? '\n}\n' : '.\n');
	      this._subject = null;
	    }
	    // Disallow further writing
	    this._write = this._blockedWrite;
	
	    // Try to end the underlying stream, ensuring done is called exactly one time
	    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
	    if (this._endStream) {
	      try { return this._outputStream.end(singleDone); }
	      catch (error) { /* error closing stream */ }
	    }
	    singleDone && singleDone();
	  },
	};
	
	// Replaces a character by its escaped version
	function characterReplacer(character) {
	  // Replace a single character by its escaped version
	  var result = escapeReplacements[character];
	  if (result === undefined) {
	    // Replace a single character with its 4-bit unicode escape sequence
	    if (character.length === 1) {
	      result = character.charCodeAt(0).toString(16);
	      result = '\\u0000'.substr(0, 6 - result.length) + result;
	    }
	    // Replace a surrogate pair with its 8-bit unicode escape sequence
	    else {
	      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
	                 character.charCodeAt(1) + 0x2400).toString(16);
	      result = '\\U00000000'.substr(0, 10 - result.length) + result;
	    }
	  }
	  return result;
	}
	
	// ## Exports
	
	// Export the `N3Writer` class as a whole.
	module.exports = N3Writer;


/***/ },
/* 283 */
/***/ function(module, exports) {

	'use strict'
	
	module.exports = rdfNamespace
	
	function rdfNamespace (namespaceUri) {
	  return function (term) {
	    return namespaceUri + term
	  }
	}


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides Solid helper functions involved with initializing, reading and
	 * writing the App Registry resources.
	 * @module app-registry
	 */
	
	module.exports.blankPrivateAppRegistry = blankPrivateAppRegistry
	module.exports.blankPublicAppRegistry = blankPublicAppRegistry
	module.exports.initAppRegistryPrivate = initAppRegistryPrivate
	module.exports.initAppRegistryPublic = initAppRegistryPublic
	module.exports.loadAppRegistry = loadAppRegistry
	
	var graphUtil = __webpack_require__(285)
	var rdf = __webpack_require__(230).rdflib
	var util = __webpack_require__(286)
	var vocab = __webpack_require__(228)
	var webClient = __webpack_require__(287)
	var webUtil = __webpack_require__(286)
	
	/**
	 * Returns a blank private app registry option.
	 * For use with `initAppRegistry()`.
	 * @method blankPrivateAppRegistry
	 * @private
	 * @return {Object} Blank app registry object
	 */
	function blankPrivateAppRegistry () {
	  var thisDoc = rdf.sym('')
	  var registryStatements = [
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('AppRegistry')),
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('UnlistedDocument'))
	  ]
	  var registry = {
	    data: graphUtil.serializeStatements(registryStatements),
	    graph: graphUtil.graphFromStatements(registryStatements),
	    slug: 'privateAppRegistry.ttl',
	    uri: null  // actual url not yet known
	  }
	  return registry
	}
	
	/**
	 * Returns a blank public app registry option.
	 * For use with `initAppRegistry()`.
	 * @method blankPublicAppRegistry
	 * @private
	 * @return {Object} Blank app registry object
	 */
	function blankPublicAppRegistry () {
	  var thisDoc = rdf.sym('')
	  var registryStatements = [
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('AppRegistry')),
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('ListedDocument'))
	  ]
	  var registry = {
	    data: graphUtil.serializeStatements(registryStatements),
	    graph: graphUtil.graphFromStatements(registryStatements),
	    slug: 'publicAppRegistry.ttl',
	    uri: null  // actual url not yet known
	  }
	  return registry
	}
	
	/**
	 * Initializes the private App Registry resource, updates
	 * the profile with the initialized registry, and returns the updated profile.
	 * @method initAppRegistryPrivate
	 * @param profile {SolidProfile} User's WebID profile
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>} Resolves with the updated profile instance.
	 */
	function initAppRegistryPrivate (profile, options) {
	  options = options || {}
	  var registryContainerUri = profile.appRegistryDefaultContainer()
	  var webId = rdf.sym(profile.webId)
	  var registry = blankPrivateAppRegistry()
	  // First, create the private App Registry resource
	  return webClient.post(registryContainerUri, registry.data,
	    registry.slug)
	    .catch(function (err) {
	      throw new Error('Could not create private registry document:', err)
	    })
	    .then(function (response) {
	      // Private registry resource created.
	      // Update the private profile (preferences) to link to it.
	      registry.uri = util.absoluteUrl(webUtil.hostname(registryContainerUri),
	        response.url)
	      var toAdd = [
	        rdf.st(webId, vocab.solid('privateAppRegistry'), rdf.sym(registry.uri))
	      ]
	      var toDel = []
	      // Note: this PATCH will actually create a private profile if it doesn't
	      // already exist.
	      return webClient.patch(profile.privateProfileUri(), toDel, toAdd, options)
	    })
	    .catch(function (err) {
	      throw new Error('Could not update profile with private registry:' + err)
	    })
	    .then(function (response) {
	      // Profile successfully patched with a link to the created private registry
	      // It's safe to update this instance of profile
	      profile.appRegistryUnlisted = registry
	      // Finally, return the updated profile with registry loaded
	      return profile
	    })
	}
	
	/**
	 * Initializes the public App Registry resource, updates
	 * the profile with the initialized registry, and returns the updated profile.
	 * @method initAppRegistryPublic
	 * @param profile {SolidProfile} User's WebID profile
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>} Resolves with the updated profile instance.
	 */
	function initAppRegistryPublic (profile, options) {
	  options = options || {}
	  var registryContainerUri = profile.appRegistryDefaultContainer()
	  var webId = rdf.sym(profile.webId)
	  var registry = blankPublicAppRegistry()
	  // First, create the public registry Registry resource
	  return webClient.post(registryContainerUri, registry.data,
	    registry.slug)
	    .catch(function (err) {
	      throw new Error('Could not create public registry document:', err)
	    })
	    .then(function (response) {
	      // Public registry resource created. Update the profile to link to it.
	      registry.uri = util.absoluteUrl(webUtil.hostname(registryContainerUri),
	        response.url)
	      var toAdd = [
	        rdf.st(webId, vocab.solid('publicAppRegistry'), rdf.sym(registry.uri))
	      ]
	      var toDel = []
	      return webClient.patch(profile.webId, toDel, toAdd, options)
	    })
	    .catch(function (err) {
	      throw new Error('Could not update profile with public registry:', err)
	    })
	    .then(function (response) {
	      // Profile successfully patched with a link to the created public registry
	      // It's safe to update this instance of profile
	      profile.appRegistryListed = registry
	      // Finally, return the updated profile with registry loaded
	      return profile
	    })
	}
	
	/**
	 * Loads the public and private app registry resources, adds them
	 * to the profile, and returns the profile.
	 * Called by the profile.loadAppRegistry() alias method.
	 * Usage:
	 *
	 *   ```
	 * var profile = solid.getProfile(url, options)
	 *   .then(function (profile) {
	 *     return profile.loadAppRegistry(options)
	 *   })
	 *   ```
	 * @method loadAppRegistry
	 * @param profile {SolidProfile}
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>}
	 */
	function loadAppRegistry (profile, options) {
	  options = options || {}
	  options.headers = options.headers || {}
	  // Politely ask for Turtle format
	  if (!options.headers['Accept']) {
	    options.headers['Accept'] = 'text/turtle'
	  }
	  // load public and private registry resources
	  var links = []
	  if (profile.appRegistryListed.uri) {
	    links.push(profile.appRegistryListed.uri)
	  }
	  if (profile.appRegistryUnlisted.uri) {
	    links.push(profile.appRegistryUnlisted.uri)
	  }
	  return webClient.loadParsedGraphs(links, options)
	    .then(function (loadedGraphs) {
	      loadedGraphs.forEach(function (graph) {
	        // For each registry resource loaded, add it to `profile.appRegistryListed`
	        //  or `profile.appRegistryUnlisted` as appropriate
	        if (graph && graph.value) {
	          profile.addAppRegistry(graph.value, graph.uri)
	        }
	      })
	      return profile
	    })
	}


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides convenience methods for graph manipulation.
	 * Currently depends on RDFLib
	 * @module graph-util
	 */
	module.exports.appendGraph = appendGraph
	module.exports.parseGraph = parseGraph
	module.exports.parseLinks = parseLinks
	module.exports.serializeStatements = serializeStatements
	module.exports.graphFromStatements = graphFromStatements
	module.exports.statementToNT = statementToNT
	
	var rdf = __webpack_require__(230).rdflib
	
	var ALL_STATEMENTS = null
	
	/**
	 * Appends RDF statements from one graph object to another
	 * @method appendGraph
	 * @param toGraph {Graph} rdf.Graph object to append to
	 * @param fromGraph {Graph} rdf.Graph object to append from
	 * @param docURI {String} Document URI to use as source
	 */
	function appendGraph (toGraph, fromGraph, docURI) {
	  // var source = (docURI) ? rdf.sym(docURI) : undefined
	  fromGraph.statementsMatching(ALL_STATEMENTS)
	    .forEach(function (st) {
	      toGraph.add(st.subject, st.predicate, st.object, st.why)
	    })
	}
	
	/**
	 * Converts a statement to string (if it isn't already), optionally slices off
	 * the period at the end, and returns the statement.
	 * @method statementToNT
	 * @param statement {String|Statement} RDF Statement to be converted.
	 * @param [excludeDot=false] {Boolean} Optionally slice off ending period.
	 * @return {String}
	 */
	function statementToNT (statement, excludeDot) {
	  if (typeof statement !== 'string') {
	    // This is an RDF Statement. Convert to string
	    statement = statement.toNT()
	  }
	  if (excludeDot && statement.endsWith('.')) {
	    statement = statement.slice(0, -1)
	  }
	  return statement
	}
	
	/**
	 * Converts a list of RDF statements into an rdflib Graph (Formula), and returns
	 * it.
	 * @method graphFromStatements
	 * @param statements {Array<Statement>}
	 * @return {rdf.Graph}
	 */
	function graphFromStatements (statements) {
	  var graph = rdf.graph()
	  statements.forEach(function (st) {
	    graph.addStatement(st)
	  })
	  return graph
	}
	
	/**
	 * Parses a given graph, from text rdfSource, as a given content type.
	 * Returns parsed graph.
	 * @method parseGraph
	 * @param baseUrl {String}
	 * @param rdfSource {String} Text source code
	 * @param contentType {String} Mime Type (determines which parser to use)
	 * @return {rdf.Graph}
	 */
	function parseGraph (baseUrl, rdfSource, contentType) {
	  var parsedGraph = rdf.graph()
	  rdf.parse(rdfSource, parsedGraph, baseUrl, contentType)
	  return parsedGraph
	}
	
	/**
	 * Extracts the URIs from a parsed graph that match parameters.
	 * The URIs are a set (duplicates are removed)
	 * @method parseLinks
	 * @param graph {rdf.IndexedFormula}
	 * @param subject {rdf.Symbol}
	 * @param predicate {rdf.Symbol}
	 * @param object {rdf.Symbol}
	 * @param source {rdf.Symbol}
	 * @return {Array<String>} Array of link URIs that match the parameters
	 */
	function parseLinks (graph, subject, predicate, object, source) {
	  var links = {}
	  var matches = graph.statementsMatching(subject,
	    predicate, object, source)
	  matches.forEach(function (match) {
	    links[match.object.uri] = true
	  })
	  return Object.keys(links)
	}
	
	/**
	 * Serializes an array of RDF statements into a simple N-Triples format
	 * suitable for writing to a solid server.
	 * @method serializeStatements
	 * @param statements {Array<Statement>} List of RDF statements
	 * @return {String}
	 */
	function serializeStatements (statements) {
	  var source = statements.map(function (st) { return st.toNT() })
	  source = source.join('\n')
	  return source
	}


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides misc utility functions for the web client
	 * @module web-util
	 */
	module.exports.composePatchQuery = composePatchQuery
	module.exports.parseAllowedMethods = parseAllowedMethods
	module.exports.parseLinkHeader = parseLinkHeader
	module.exports.absoluteUrl = absoluteUrl
	module.exports.hostname = hostname
	
	var graphUtil = __webpack_require__(285)
	
	/**
	 * Extracts the allowed HTTP methods from the 'Allow' and 'Accept-Patch'
	 * headers, and returns a hashmap of verbs allowed by the server
	 * @method parseAllowedMethods
	 * @param allowMethodsHeader {String} `Access-Control-Allow-Methods` response
	 *   header
	 * @param acceptPatchHeader {String} `Accept-Patch` response header
	 * @return {Object} Hashmap of verbs (in lowercase) allowed by the server for
	 *   the current user. Example:
	 *   ```
	 *   {
	 *     'get': true,
	 *     'put': true
	 *   }
	 *   ```
	 */
	function parseAllowedMethods (allowMethodsHeader, acceptPatchHeader) {
	  var allowedMethods = {}
	  if (allowMethodsHeader) {
	    var verbs = allowMethodsHeader.split(',')
	    verbs.forEach(function (methodName) {
	      if (methodName && allowMethodsHeader.indexOf(methodName) >= 0) {
	        allowedMethods[methodName.trim().toLowerCase()] = true
	      }
	    })
	  }
	  if (acceptPatchHeader &&
	      acceptPatchHeader.indexOf('application/sparql-update') >= 0) {
	    allowedMethods.patch = true
	  }
	  return allowedMethods
	}
	
	/**
	* Parses a Link header from an XHR HTTP Request.
	* @method parseLinkHeader
	* @param link {String} Contents of the Link response header
	* @return {Object}
	*/
	function parseLinkHeader (link) {
	  if (!link) {
	    return {}
	  }
	  var linkexp = /<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g
	  var paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g
	  var matches = link.match(linkexp)
	  var rels = {}
	  for (var i = 0; i < matches.length; i++) {
	    var split = matches[i].split('>')
	    var href = split[0].substring(1)
	    var ps = split[1]
	    var s = ps.match(paramexp)
	
	    for (var j = 0; j < s.length; j++) {
	      var p = s[j]
	      var paramsplit = p.split('=')
	      // var name = paramsplit[0]
	      var rel = paramsplit[1].replace(/["']/g, '')
	      if (!rels[rel]) {
	        rels[rel] = []
	      }
	      rels[rel].push(href)
	      if (rels[rel].length > 1) {
	        rels[rel].sort()
	      }
	    }
	  }
	  return rels
	}
	
	function hostname (url) {
	  var protocol, hostname, result, pathSegments
	  var fragments = url.split('//')
	  if (fragments.length === 2) {
	    protocol = fragments[0]
	    hostname = fragments[1]
	  } else {
	    hostname = url
	  }
	  pathSegments = hostname.split('/')
	  if (protocol) {
	    result = protocol + '//' + pathSegments[0]
	  } else {
	    result = pathSegments[0]
	  }
	  if (url.startsWith('//')) {
	    result = '//' + result
	  }
	  return result
	}
	
	/**
	* Return an absolute URL
	* @method absoluteUrl
	* @param baseUrl {String} URL to be used as base
	* @param pathUrl {String} Absolute or relative URL
	* @return {String}
	*/
	function absoluteUrl (baseUrl, pathUrl) {
	  if (pathUrl && pathUrl.slice(0, 4) !== 'http') {
	    return [baseUrl, pathUrl].map(function (path) {
	      if (path[0] === '/') {
	        path = path.slice(1)
	      }
	      if (path[path.length - 1] === '/') {
	        path = path.slice(0, path.length - 1)
	      }
	      return path
	    }).join('/')
	  }
	  return pathUrl
	}
	
	/**
	 * Composes and returns a PATCH SPARQL query (for use with `web.patch()`)
	 * @method composePatchQuery
	 * @param toDel {Array<String|Statement>} List of triples to delete
	 * @param toIns {Array<String|Statement>} List of triples to insert
	 * @return {String} SPARQL query for use with PATCH
	 */
	function composePatchQuery (toDel, toIns) {
	  var query = ''
	  var excludeDot = true
	  if (toDel && toDel.length > 0) {
	    toDel = toDel.map(function (st) {
	      return graphUtil.statementToNT(st, excludeDot)
	    })
	    query += 'DELETE DATA { ' + toDel.join(' . ') + ' };\n'
	  }
	  if (toIns && toIns.length > 0) {
	    toIns = toIns.map(function (st) {
	      return graphUtil.statementToNT(st, excludeDot)
	    })
	    query += 'INSERT DATA { ' + toIns.join(' . ') + ' };\n'
	  }
	  return query
	}


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides a Solid web client class for performing LDP CRUD operations.
	 * @module web
	 */
	var config = __webpack_require__(288)
	var graphUtil = __webpack_require__(285)
	var SolidResponse = __webpack_require__(289)
	var SolidContainer = __webpack_require__(290)
	var vocab = __webpack_require__(228)
	var XMLHttpRequest = __webpack_require__(292)
	var HttpError = __webpack_require__(293)
	
	/**
	 * Provides a collection of Solid/LDP web operations (CRUD)
	 * @class SolidWebClient
	 * @static
	 */
	var SolidWebClient = {
	  /**
	   * Creates a Solid container with the specified name.
	   * Uses PUT instead of POST to guarantee the container name (and uses
	   * conditional HTTP headers to fail with a `409 Conflict` error if
	   * a container with that name already exists).
	   * @method createContainer
	   * @param parentUrl {String} Parent directory/container in which to create
	   * @param name {String} Container name (slug / URL fragment), no trailing
	   *   slash needed.
	   * @param [options] Options hashmap (optional, see `solidRequest()`)
	   * @param [data] {String} Optional RDF data payload (additional triples
	   *   that will be added to the container's metadata)
	   * @throw {HttpError} Throws an error if a resource or container with the
	   *   same name already exists
	   * @return {Promise<SolidResponse>}
	   */
	  createContainer: function createContainer (parentUrl, name, options, data) {
	    return this.post(parentUrl, data, name, true)
	    // var newContainerUrl = parentUrl + name
	    // options = options || {}
	    // options.headers = options.headers || {}
	    // options.headers['If-None-Match'] = '*'
	    // var resourceType = vocab.ldp('BasicContainer')
	    // options.headers['Link'] = resourceType + '; rel="type"'
	    // var mimeType = 'text/turtle'
	    // return this.put(newContainerUrl, data, mimeType, options)
	    //  .catch(function (error) {
	    //    if (error instanceof HttpError) {
	    //      if (error.code === HttpError.CONFLICT) {
	    //        error.message = 'A resource with the same name already exists'
	    //      } else if (error.code === HttpError.PRECONDITION_FAILED) {
	    //        error.message = 'A container with the same name already exists'
	    //      }
	    //      throw error
	    //    }
	    //  })
	  },
	
	  /**
	   * Creates and returns the appropriate Solid wrapper for the XHR response.
	   * @method createResponse
	   * @param xhrResponse {XMLHttpRequest} XHR Response
	   * @param method {String} HTTP verb
	   * @return {SolidResponse|SolidContainer} Either a SolidResponse or a
	   *   SolidContainer instance.
	   */
	  createResponse: function createResponse (xhrResponse, method) {
	    var response = new SolidResponse(xhrResponse, method)
	    if (response.method === 'get' && response.isContainer()) {
	      return new SolidContainer(response.location, response)
	    }
	    return response
	  },
	
	  /**
	   * Returns the current window's location (for use with `needsProxy()`)
	   * if used in browser, or `null` if used from Node.
	   * @method currentUrl
	   * @return {String|Null}
	   */
	  currentUrl: function currentUrl () {
	    if (typeof window !== 'undefined') {
	      return window.location.href
	    } else {
	      return null
	    }
	  },
	
	  /**
	   * Determines whether the web client needs to fall back onto a Proxy url,
	   * to avoid being blocked by CORS
	   * @method needsProxy
	   * @param url {String}
	   * @return {Boolean}
	   */
	  needsProxy: function needsProxy (url) {
	    var currentUrl = this.currentUrl()
	    var currentIsHttps = currentUrl && currentUrl.slice(0, 6) === 'https:'
	    var targetIsHttp = url && url.slice(0, 5) === 'http:'
	    return currentIsHttps && targetIsHttp
	  },
	
	  /**
	   * Turns a given URL into a proxied version, using a proxy template
	   * @method proxyUrl
	   * @param url {String} Intended URL
	   * @param proxyUrlTemplate {String}
	   * @return {String}
	   */
	  proxyUrl: function proxyUrl (url, proxyUrlTemplate) {
	    proxyUrlTemplate = proxyUrlTemplate || config.proxyUrl
	    return proxyUrlTemplate.replace('{uri}', encodeURIComponent(url))
	  },
	
	  /**
	   * Sends a generic XHR request with the appropriate Solid headers,
	   * and returns a promise that resolves to a parsed response.
	   * @method solidRequest
	   * @param url {String} URL of the request
	   * @param method {String} HTTP Verb ('GET', 'PUT', etc)
	   * @param [options] Options hashmap
	   * @param [options.noCredentials=false] {Boolean} Don't use `withCredentials`
	   * @param [options.forceProxy=false] {Boolean} Enforce using proxy URL if true
	   * @param [options.headers={}] {Object} HTTP headers to send along
	   *          with request
	   * @param [options.proxyUrl=config.proxyUrl] {String} Proxy URL to use for
	   *          CORS Requests.
	   * @param [options.timeout=config.timeout] {Number} Request timeout in
	   *          milliseconds.
	   * @param [data] {Object} Optional data / payload
	   * @throws {HttpError} Rejects with `httpError.HttpError` of the appropriate
	   *   type
	   * @return {Promise<SolidResponse>}
	   */
	  solidRequest: function solidRequest (url, method, options, data) {
	    options = options || {}
	    options.headers = options.headers || {}
	    options.proxyUrl = options.proxyUrl || config.proxyUrl
	    options.timeout = options.timeout || config.timeout
	    if (this.needsProxy(url) || options.forceProxy) {
	      url = this.proxyUrl(url)
	    }
	    var webClient = this
	    return new Promise(function (resolve, reject) {
	      var http = new XMLHttpRequest()
	      http.open(method, url)
	      if (!options.noCredentials) {
	        http.withCredentials = true
	      }
	      for (var header in options.headers) {  // Add in optional headers
	        http.setRequestHeader(header, options.headers[header])
	      }
	      if (options.timeout) {
	        http.timeout = options.timeout
	      }
	      http.onload = function () {
	        if (this.status >= 200 && this.status < 300) {
	          resolve(webClient.createResponse(this, method))
	        } else {
	          reject(new HttpError(this.status, this.statusText, {xhr: this}))
	        }
	      }
	      http.onerror = function () {
	        reject(new HttpError(this.status, this.statusText, {xhr: this}))
	      }
	      if (typeof data === 'undefined' || !data) {
	        http.send()
	      } else {
	        http.send(data)
	      }
	    })
	  },
	
	  /**
	   * Checks to see if a Solid resource exists, and returns useful resource
	   *   metadata info.
	   * @method head
	   * @param url {String} URL of a resource or container
	   * @param [options] Options hashmap
	   * @param [options.headers] {Object} HTTP headers to send along with request
	   * @param [options.proxyUrl=config.proxyUrl] {String} Proxy URL to use for
	   *          CORS Requests.
	   * @param [options.timeout=config.timeout] {Number} Request timeout in
	   *          milliseconds.
	   * @return {Promise} Result of an HTTP HEAD operation (returns a meta object)
	   */
	  head: function head (url, options) {
	    return this.solidRequest(url, 'HEAD', options)
	  },
	
	  /**
	   * Retrieves a resource or container by making an HTTP GET call.
	   * @method get
	   * @param url {String} URL of the resource or container to fetch
	   * @param [options] Options hashmap
	   * @param [options.headers] {Object} HTTP headers to send along with request
	   * @param [options.proxyUrl=config.proxyUrl] {String} Proxy URL to use for
	   *          CORS Requests.
	   * @param [options.timeout=config.timeout] {Number} Request timeout in
	   *          milliseconds.
	   * @return {Promise<SolidResponse|SolidContainer>|Object} Result of the HTTP
	   *   GET operation, or an error object
	   */
	  get: function get (url, options) {
	    options = options || {}
	    options.headers = options.headers || {}
	    // If no explicit Accept: header specified, set one
	    if (!options.headers['Accept']) {
	      options.headers['Accept'] =
	        'text/turtle;q=0.8,*/*;q=0.5'
	    }
	    return this.solidRequest(url, 'GET', options)
	  },
	
	  /**
	   * Lists the contents of a Solid Container.
	   * (Deprecated, use `web.get()` instead.)
	   * @method list
	   * @deprecated
	   * @param url {String} Url of the container to list
	   * @param [options] Options hashmap, see docs for `solidResponse()`
	   * @return {Promise<SolidContainer>}
	   */
	  list: function list (url, options) {
	    console.warn('web.list() is deprecated. Use web.get() instead.')
	    if (typeof url !== 'string') {
	      throw new Error('Invalid url passed to list()')
	    }
	    // Make sure the container url ends in a /
	    var urlNotEmpty = url !== ''
	    var noEndingSlash = !url.endsWith('/')
	    if (urlNotEmpty && noEndingSlash) {
	      url = url + '/'
	    }
	    options = options || {}
	    options.headers = options.headers || {}
	    if (!options.headers['Accept']) {
	      options.headers['Accept'] = 'text/turtle'
	    }
	    return this.get(url, options)
	      .then(function (result) {
	        return new SolidContainer(url, result)
	      })
	  },
	
	  /**
	   * Loads a list of given RDF graphs via an async `Promise.all()`,
	   * which resolves to an array of uri/parsed-graph hashes.
	   * @method loadParsedGraphs
	   * @param locations {Array<String>} Array of graph URLs to load
	   * @param [options] Options hashmap
	   * @param [options.forceProxy=false] {Boolean} Enforce using proxy URL if true
	   * @param [options.headers={}] {Object} HTTP headers to send along
	   *          with request
	   * @param [options.proxyUrl=config.proxyUrl] {String} Proxy URL to use for
	   *          CORS Requests.
	   * @param [options.timeout=config.timeout] {Number} Request timeout in
	   *          milliseconds.
	   * @return {Promise<Array<Object>>}
	   */
	  loadParsedGraphs: function loadParsedGraphs (locations, options) {
	    var web = this
	    var loadPromises = locations.map(function (location) {
	      return web.get(location, options)
	        .then(function (response) {
	          var contentType = response.contentType()
	          return graphUtil.parseGraph(location, response.raw(), contentType)
	        })
	        .catch(function () {
	          // Suppress the error, no need to reject, just return null graph
	          return null
	        })
	        .then(function (parsedGraph) {
	          return {
	            uri: location,
	            value: parsedGraph
	          }
	        })
	    })
	    return Promise.all(loadPromises)
	  },
	
	  /**
	   * Issues an HTTP OPTIONS request. Useful for discovering server capabilities
	   * (`Accept-Patch:`, `Updates-Via:` for websockets, etc).
	   * @method head
	   * @param url {String} URL of a resource or container
	   * @return {Promise} Result of an HTTP HEAD operation (returns a meta object)
	   */
	  options: function options (url) {
	    return this.solidRequest(url, 'OPTIONS')
	  },
	
	  /**
	   * Retrieves a resource via HTTP, parses it using the default parser
	   * specified in `config.parser`, and returns the result.
	   * @method getParsedGraph
	   * @param url {String} URL of the resource or container to fetch
	   * @param proxyUrl {String} URL template of the proxy to use for CORS
	   *                          requests. Defaults to `config.proxyUrl`.
	   * @param timeout {Number} Request timeout in milliseconds.
	   *                         Defaults to `config.timeout`.
	   * @param [suppressError=false] {Boolean} Resolve with a null graph on error
	   *   if true, reject otherwise. Set to true when using `Promise.all()`
	   * @return {Promise<Object>|Object}
	   */
	  getParsedGraph: function getParsedGraph (url, proxyUrl, timeout,
	      suppressError) {
	    proxyUrl = proxyUrl || config.proxyUrl
	    timeout = timeout || config.timeout
	    if (config.parser === 'rdflib') {
	      var getParsedGraph = __webpack_require__(296).getParsedGraph
	    } else {
	      throw Error('Parser library not supported: ' + config.parser)
	    }
	    return getParsedGraph(url, proxyUrl, timeout, suppressError)
	  },
	
	  /**
	   * Creates a new resource by performing
	   *   a Solid/LDP POST operation to a specified container.
	   * @param url {String} URL of the container to post to
	   * @param data {Object} Data/payload of the resource to be created
	   * @param slug {String} Suggested URL fragment for the new resource
	   * @param isContainer {Boolean} Is the object being created a Container
	   *            or Resource?
	   * @param mimeType {String} Content Type of the data/payload
	   * @method post
	   * @return {Promise|Object} Result of XHR POST (returns parsed
	   *     response meta object) or an anonymous error object with status code
	   */
	  post: function post (url, data, slug, isContainer, mimeType) {
	    var resourceType
	    if (isContainer) {
	      resourceType = vocab.ldp('BasicContainer')
	      mimeType = 'text/turtle' // Force the right mime type for containers only
	    } else {
	      resourceType = vocab.ldp('Resource')
	      mimeType = mimeType || 'text/turtle'  // default to Turtle
	    }
	    var options = {}
	    options.headers = {}
	    options.headers['Link'] = resourceType + '; rel="type"'
	    options.headers['Content-Type'] = mimeType
	    if (slug && slug.length > 0) {
	      options.headers['Slug'] = slug
	    }
	    return this.solidRequest(url, 'POST', options, data)
	  },
	
	  /**
	   * Updates an existing resource or creates a new resource by performing
	   *   a Solid/LDP PUT operation to a specified container
	   * @method put
	   * @param url {String} URL of the resource to be updated/created
	   * @param data {Object} Data/payload of the resource to be created or updated
	   * @param mimeType {String} MIME Type of the resource to be created
	   * @param [options] Options hashmap, see docs for `solidResponse()`
	   * @return {Promise|Object} Result of PUT operation (returns parsed response
	   *     meta object if successful, rejects with an anonymous error status
	   *     object if not successful)
	   */
	  put: function put (url, data, mimeType, options) {
	    options = options || {}
	    options.headers = options.headers || {}
	    // options.headers['Link'] = '<' + resourceType + '>; rel="type"'
	    options.headers['Content-Type'] = mimeType
	    return this.solidRequest(url, 'PUT', options, data)
	  },
	
	  /**
	   * Partially edits an RDF-type resource by performing a PATCH operation.
	   *   Accepts arrays of individual statements (in Turtle format) as params.
	   *   For example:
	   *   [ '<a> <b> <c> .', '<d> <e> <f> .']
	   * @method patch
	   * @param url {String} URL of the resource to be edited
	   * @param toDel {Array<String>} Triples to remove from the resource
	   * @param toIns {Array<String>} Triples to insert into the resource
	   * @param [options] Options hashmap
	   * @return {Promise|Object} Result of PATCH operation (returns parsed response
	   *     meta object if successful, rejects with an anonymous error status
	   *     object if not successful)
	   */
	  patch: function patch (url, toDel, toIns, options) {
	    var composePatchQuery = __webpack_require__(286).composePatchQuery
	    var data = composePatchQuery(toDel, toIns)
	    var mimeType = 'application/sparql-update'
	    options = options || {}
	    options.headers = options.headers || {}
	    // options.headers['Link'] = '<' + resourceType + '>; rel="type"'
	    options.headers['Content-Type'] = mimeType
	    return this.solidRequest(url, 'PATCH', options, data)
	  },
	
	  /**
	   * Deletes an existing resource or container.
	   * @method del
	   * @param url {String} URL of the resource or container to be deleted
	   * @return {Promise|Object} Result of the HTTP Delete operation (returns true
	   *   on success, or an anonymous error object on failure)
	   */
	  del: function del (url) {
	    return this.solidRequest(url, 'DELETE')
	  }
	}
	
	// Alias some extra Solid web client methods
	SolidWebClient.create = SolidWebClient.post
	SolidWebClient.replace = SolidWebClient.put
	SolidWebClient.update = SolidWebClient.patch
	module.exports = SolidWebClient


/***/ },
/* 288 */
/***/ function(module, exports) {

	'use strict'
	/**
	 * Provides a simple configuration object for Solid web client and other
	 * modules.
	 * @module config
	 */
	module.exports = {
	  /**
	   * Default authentication endpoint
	   */
	  authEndpoint: 'https://databox.me/',
	
	  /**
	   * Default RDF parser library
	   */
	  parser: 'rdflib',
	
	  /**
	   * Default proxy URL for servicing CORS requests
	   */
	  proxyUrl: 'https://databox.me/,proxy?uri={uri}',
	
	  /**
	   * Default signup endpoints (list of identity providers)
	   */
	  signupEndpoint: 'https://solid.github.io/solid-idps/',
	
	  /**
	   * Default height of the Signup popup window, in pixels
	   */
	  signupWindowHeight: 600,
	
	  /**
	   * Default width of the Signup popup window, in pixels
	   */
	  signupWindowWidth: 1024,
	
	  /**
	   * Timeout for web/ajax operations, in milliseconds
	   */
	  timeout: 50000
	}


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	* @module response
	*/
	module.exports = SolidResponse
	
	var webUtil = __webpack_require__(286)
	var graphUtil = __webpack_require__(285)  // Used by .parsedGraph()
	
	/**
	* Provides a wrapper around an XHR response object, and adds several
	* Solid-specific parsed fields (link headers, allowed verbs, etc)
	* @class SolidResponse
	* @constructor
	* @param xhrResponse {XMLHttpRequest} Result of XHR operation
	* @param method {String} HTTP verb for the original request
	*/
	function SolidResponse (xhrResponse, method) {
	  if (!xhrResponse) {
	    this.xhr = null
	    this.user = ''
	    this.method = null
	    this.types = []
	    this.graph = null
	    return
	  }
	  /**
	   * Hashmap of parsed `Link:` headers. Example:
	   *
	   *   ```
	   *   {
	   *     acl: [ 'resourceName.acl' ],
	   *     describedBy: [ 'resourceName.meta' ],
	   *     type: [
	   *       'http://www.w3.org/ns/ldp#RDFResource',
	   *       'http://www.w3.org/ns/ldp#Resource'
	   *     ]
	   *   }
	   *   ```
	   * @property linkHeaders
	   * @type Object
	   */
	  var linkHeader = xhrResponse.getResponseHeader('Link')
	  this.linkHeaders = webUtil.parseLinkHeader(linkHeader) || {}
	
	  if (method) {
	    method = method.toLowerCase()
	  } else {
	    method = ''
	  }
	  /**
	   * HTTP verb for the original request (GET, PUT, etc)
	   * @property method
	   * @type String
	   */
	  this.method = method
	
	  /**
	   * Name of the corresponding `.acl` resource
	   * @property acl
	   * @type String
	   */
	  this.acl = this.linkHeaders['acl']
	  if (this.acl) {
	    this.acl = this.acl[0]  // Extract the single .acl link
	  }
	  /**
	   * Hashmap of HTTP methods/verbs allowed by the server.
	   * (If a verb is not allowed, it's not included.)
	   * Example:
	   *   ```
	   *   {
	   *     'get': true,
	   *     'put': true
	   *   }
	   *   ```
	   * @property allowedMethods
	   * @type Object
	   */
	  this.allowedMethods = this.parseAllowedMethods(xhrResponse, method)
	
	  /**
	   * Cache of the parsed graph of xhr.response,
	   * lazy-initialized when you call `response.parsedGraph()`
	   * @property graph
	   * @type {IndexedFormula}
	   */
	  this.graph = null
	
	  /**
	   * Name of the corresponding `.meta` resource
	   * @property meta
	   * @type String
	   */
	  this.meta = this.linkHeaders['meta'] || this.linkHeaders['describedBy']
	  if (this.meta) {
	    this.meta = this.meta[0]  // Extract the single .meta link
	  }
	  /**
	   * LDP Types for the resource.
	   * Example: [
	   *   'http://www.w3.org/ns/ldp#Resource',
	   *   'http://www.w3.org/ns/ldp#RDFResource'
	   * ]
	   * @property types
	   * @type Array<String>
	   */
	  this.types = this.linkHeaders.type || []
	  /**
	  * URL of the resource created or retrieved
	  * @property url
	  * @type String
	  */
	  this.url = xhrResponse.getResponseHeader('Location') || xhrResponse.responseURL
	  /**
	   * WebID URL of the currently authenticated user (empty string if none)
	   * @property user
	   * @type String
	   */
	  this.user = xhrResponse.getResponseHeader('User') || ''
	  /**
	   * URL of the corresponding websocket instance, for this resource
	   * Example: `wss://example.org/blog/hello-world`
	   * @property websocket
	   * @type String
	   */
	  this.websocket = xhrResponse.getResponseHeader('Updates-Via') || ''
	  /**
	   * Raw XHR response object
	   * @property xhr
	   * @type XMLHttpRequest
	   */
	  this.xhr = xhrResponse
	}
	
	/**
	 * Returns the absolute URL of the ACL resource for this response.
	 * @method aclAbsoluteUrl
	 * @return {String}
	 */
	SolidResponse.prototype.aclAbsoluteUrl = function aclAbsoluteUrl () {
	  if (!this.acl) {
	    return this.acl
	  }
	  var aclAbsoluteUrl = webUtil.absoluteUrl(this.url, this.acl)
	  return aclAbsoluteUrl
	}
	
	/**
	 * Returns the Content-Type of the response (or null if no response
	 * is present)
	 * @method contentType
	 * @return {String|Null}
	 */
	SolidResponse.prototype.contentType = function contentType () {
	  if (this.xhr) {
	    return this.xhr.getResponseHeader('Content-Type')
	  } else {
	    return null
	  }
	}
	
	/**
	 * Returns true if the resource exists (not a 404)
	 * @method exists
	 * @return {Boolean}
	 */
	SolidResponse.prototype.exists = function exists () {
	  return this.xhr && this.xhr.status >= 200 && this.xhr.status < 400
	}
	
	/**
	 * Is this a Container instance (vs a regular resource).
	 * @return {Boolean}
	 */
	SolidResponse.prototype.isContainer = function isContainer () {
	  return this.isType('http://www.w3.org/ns/ldp#Container') ||
	    this.isType('http://www.w3.org/ns/ldp#BasicContainer')
	}
	
	/**
	 * Returns true if the user is logged in with the server
	 * @method isLoggedIn
	 * @return {Boolean}
	 */
	SolidResponse.prototype.isLoggedIn = function isLoggedIn () {
	  return this.user // && this.user.slice(0, 4) === 'http'
	}
	
	/**
	 * Returns true if this a given type matches this resource's types
	 * @method isType
	 * @param rdfClass {String}
	 * @return {Boolean}
	 */
	SolidResponse.prototype.isType = function isType (rdfClass) {
	  return this.types.indexOf(rdfClass) !== -1
	}
	
	/**
	 * Returns the absolute URL of the .meta resource for this response.
	 * @method metaAbsoluteUrl
	 * @return {String}
	 */
	SolidResponse.prototype.metaAbsoluteUrl = function metaAbsoluteUrl () {
	  if (!this.meta) {
	    return this.meta
	  }
	  var metaAbsoluteUrl = webUtil.absoluteUrl(this.url, this.meta)
	  return metaAbsoluteUrl
	}
	
	/**
	 * In case that this was preflight-type request (OPTIONS or POST, for example),
	 * parses and returns the allowed methods for the resource (for the current
	 * user).
	 * @method parseAllowedMethods
	 * @param xhrResponse {XMLHttpRequest}
	 * @param method {String} HTTP verb for the original request
	 * @return {Object} Hashmap of the allowed methods
	 */
	SolidResponse.prototype.parseAllowedMethods =
	  function parseAllowedMethods (xhrResponse, method) {
	    if (method === 'get') {
	      // Not a preflight request
	      return {}
	    } else {
	      return webUtil.parseAllowedMethods(
	        xhrResponse.getResponseHeader('Allow'),
	        xhrResponse.getResponseHeader('Accept-Patch')
	      )
	    }
	  }
	
	/**
	 * Returns the parsed graph of the response (lazy-initializes it if it's not
	 * present)
	 * @method parsedGraph
	 * @return {IndexedFormula}
	 */
	SolidResponse.prototype.parsedGraph = function parsedGraph () {
	  if (!this.graph) {
	    this.graph = graphUtil.parseGraph(this.url, this.raw(), this.contentType())
	  }
	  return this.graph
	}
	
	/**
	 * Returns the raw XHR response (or null if absent)
	 * @method raw
	 * @return {Object|Null}
	 */
	SolidResponse.prototype.raw = function raw () {
	  if (this.xhr) {
	    return this.xhr.response
	  } else {
	    return null
	  }
	}


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * @module container
	 */
	module.exports = SolidContainer
	var rdf = __webpack_require__(230).rdflib
	var graphUtil = __webpack_require__(285)
	var parseLinks = graphUtil.parseLinks
	var vocab = __webpack_require__(228)
	var SolidResource = __webpack_require__(291)
	
	/**
	 * @class SolidContainer
	 * @extends SolidResource
	 * @constructor
	 * @param uri {String}
	 * @param response {SolidResponse}
	 */
	function SolidContainer (uri, response) {
	  // Call parent constructor
	  SolidResource.call(this, uri, response)
	
	  /**
	   * Hashmap of Containers within this container, keyed by absolute uri
	   * @property containers
	   * @type Object
	   */
	  this.containers = {}
	  /**
	   * List of URIs of all contents (containers and resources)
	   * @property contentsUris
	   * @type Array<String>
	   */
	  this.contentsUris = []
	
	  /**
	   * Hashmap of Contents that are just resources (not containers),
	   * keyed by absolute uri
	   * @property resources
	   * @type Object
	   */
	  this.resources = {}
	
	  if (response) {
	    this.initFromResponse(this.uri, response)
	  }
	}
	// SolidContainer.prototype object inherits from SolidResource.prototype
	SolidContainer.prototype = Object.create(SolidResource.prototype)
	SolidContainer.prototype.constructor = SolidContainer
	
	/**
	 * Extracts the contents (resources and sub-containers)
	 * of the given graph and adds them to this container
	 * @method appendFromGraph
	 * @param parsedGraph {Graph}
	 * @param graphUri {String}
	 */
	SolidContainer.prototype.appendFromGraph =
	  function appendFromGraph (parsedGraph, graphUri) {
	    // Set this container's types
	    this.types = Object.keys(parsedGraph.findTypeURIs(rdf.sym(this.uri)))
	
	    // Extract all the contents links (resources and containers)
	    var contentsUris = parseLinks(parsedGraph, null, vocab.ldp('contains'))
	    this.contentsUris = this.contentsUris.concat(contentsUris.sort())
	
	    // Extract links that are just containers
	    var containersLinks = parsedGraph.each(null, null, vocab.ldp('Container'))
	    var self = this
	    var container
	    containersLinks.forEach(function (containerLink) {
	      // Filter out . (the link to this directory)
	      if (containerLink.uri !== self.uri) {
	        container = new SolidContainer(containerLink.uri)
	        container.types = Object.keys(parsedGraph.findTypeURIs(containerLink))
	        self.containers[container.uri] = container
	      }
	    })
	    // Now that containers are defined, all the rest are non-container resources
	    var isResource
	    var isContainer
	    var resource
	    contentsUris.forEach(function (link) {
	      isContainer = link in self.containers
	      isResource = link !== self.uri && !isContainer
	      if (isResource) {
	        resource = new SolidResource(link)
	        resource.types = Object.keys(parsedGraph.findTypeURIs(rdf.sym(link)))
	        self.resources[link] = resource
	      }
	    })
	  }
	
	/**
	 * Returns a list of SolidResource or SolidContainer instances that match
	 * a given type.
	 * @method findByType
	 * @param rdfClass {String}
	 * @return {Array<SolidResource|SolidContainer>}
	 */
	SolidContainer.prototype.findByType = function findByType (rdfClass) {
	  var matches = []
	  var key
	  var container
	  for (key in this.containers) {
	    container = this.containers[key]
	    if (container.isType(rdfClass)) {
	      matches.push(container)
	    }
	  }
	  var resource
	  for (key in this.resources) {
	    resource = this.resources[key]
	    if (resource.isType(rdfClass)) {
	      matches.push(resource)
	    }
	  }
	  return matches
	}
	
	/**
	 * @method initFromResponse
	 * @param uri {String}
	 * @param response {SolidResponse}
	 */
	SolidContainer.prototype.initFromResponse =
	  function initFromResponse (uri, response) {
	    var contentType = response.contentType()
	    if (!contentType) {
	      throw new Error('Cannot parse container without a Content-Type: header')
	    }
	    var parsedGraph = graphUtil.parseGraph(uri, response.raw(),
	      contentType)
	    this.parsedGraph = parsedGraph
	    this.appendFromGraph(parsedGraph, uri)
	  }
	
	/**
	 * Is this a Container instance (vs a regular resource).
	 * @return {Boolean}
	 */
	SolidResource.prototype.isContainer = function isContainer () {
	  return true
	}
	
	/**
	 * Returns true if there are no resources or containers inside this container.
	 * @method isEmpty
	 * @return {Boolean}
	 */
	SolidContainer.prototype.isEmpty = function isEmpty () {
	  return this.contentsUris.length === 0
	}
	


/***/ },
/* 291 */
/***/ function(module, exports) {

	'use strict'
	/**
	 * @module resource
	 */
	
	/**
	 * Represents a Solid / LDP Resource (currently used when listing
	 * SolidContainer resources)
	 * @class SolidResource
	 * @constructor
	 */
	module.exports = SolidResource
	
	function SolidResource (uri, response) {
	  /**
	   * Short name (page/filename part of the resource path),
	   * derived from the URI
	   * @property name
	   * @type String
	   */
	  this.name = null
	  /**
	   * Parsed graph of the contents of the resource
	   * @property parsedGraph
	   * @type Graph
	   */
	  this.parsedGraph = null
	  /**
	   * Optional SolidResponse object from which this resource was initialized
	   * @property response
	   * @type SolidResponse
	   */
	  this.response = response
	  /**
	   * List of RDF Types (classes) to which this resource belongs
	   * @property types
	   * @type Array<String>
	   */
	  this.types = []
	  /**
	   * Absolute url of the resource
	   * @property url
	   * @type String
	   */
	  this.uri = uri
	
	  if (response) {
	    if (response.url !== uri) {
	      // Override the given url (which may be relative) with that of the
	      // response object (which will be absolute)
	      this.uri = response.url
	    }
	  }
	  this.initName()
	}
	
	/**
	 * Initializes the short name from the url
	 * @method initName
	 */
	SolidResource.prototype.initName = function initName () {
	  if (!this.uri) {
	    return
	  }
	  // Split on '/', use the last fragment
	  var fragments = this.uri.split('/')
	  this.name = fragments.pop()
	  if (!this.name && fragments.length > 0) {
	    // URI ended in a '/'. Try again.
	    this.name = fragments.pop()
	  }
	}
	
	/**
	 * Is this a Container instance (vs a regular resource).
	 * (Is overridden in the subclass, `SolidContainer`)
	 * @return {Boolean}
	 */
	SolidResource.prototype.isContainer = function isContainer () {
	  return false
	}
	
	/**
	 * Returns true if this a given type matches this resource's types
	 * @method isType
	 * @param rdfClass {String}
	 * @return {Boolean}
	 */
	SolidResource.prototype.isType = function isType (rdfClass) {
	  return this.types.indexOf(rdfClass) !== -1
	}


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/* global Components */
	/**
	 * Provides a generic wrapper around the XMLHttpRequest object, to make it
	 * usable both in the browser and firefox extension and in Node.js
	 * @module xhr
	 */
	var XMLHttpRequest
	if (typeof tabulator !== 'undefined' && tabulator.isExtension) {
	  // Running inside the Tabulator Firefox extension
	  // Cannot use XMLHttpRequest natively, must request it through SDK
	  XMLHttpRequest = Components
	    .classes['@mozilla.org/xmlextras/xmlhttprequest;1']
	    .createInstance()
	    .QueryInterface(Components.interfaces.nsIXMLHttpRequest)
	} else if (typeof window !== 'undefined' && 'XMLHttpRequest' in window) {
	  // Running inside the browser
	  XMLHttpRequest = window.XMLHttpRequest
	} else {
	  // in Node.js
	  XMLHttpRequest = __webpack_require__(232)
	}
	module.exports = XMLHttpRequest


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = HttpError
	var StandardError = __webpack_require__(294)
	var STATUS_CODE_TO_NAME = __webpack_require__(295)
	var STATUS_NAME_TO_CODE = exports
	
	function HttpError(code, msg, props) {
	  if (typeof code == "string") code = STATUS_NAME_TO_CODE[code]
	  if (typeof code != "number") throw new TypeError("Non-numeric HTTP code")
	  if (typeof msg == "object" && msg != null) props = msg, msg = null
	  StandardError.call(this, msg || STATUS_CODE_TO_NAME[code], props)
	  this.code = code
	}
	
	HttpError.prototype = Object.create(StandardError.prototype, {
	  constructor: {value: HttpError, configurable: true, writable: true}
	})
	
	// Set name explicitly for when the code gets minified.
	HttpError.prototype.name = "HttpError"
	
	Object.defineProperties(HttpError.prototype, {
	  statusCode: alias("code"),
	  statusMessage: alias("message"),
	
	  status: {
	    configurable: true,
	    get: function() { return this.code },
	    set: function(value) {
	      Object.defineProperty(this, "status", {
	        value: value, configurable: true, enumerable: true, writable: true
	      })
	    }
	  }
	})
	
	HttpError.prototype.toString = function() {
	  return this.name + ": " + this.code + " " + this.message
	}
	
	for (var code in STATUS_CODE_TO_NAME) {
	  var name = STATUS_CODE_TO_NAME[code]
	  exports[name.replace("'", "").replace(/[- ]/g, "_").toUpperCase()] = +code
	}
	
	function alias(name) {
	  return {
	    configurable: true,
	    get: function() { return this[name] },
	    set: function(value) { return this[name] = value },
	  }
	}


/***/ },
/* 294 */
/***/ function(module, exports) {

	var has = Object.hasOwnProperty
	var proto = Object.getPrototypeOf
	var trace = Error.captureStackTrace
	module.exports = StandardError
	
	function StandardError(msg, props) {
	  // Let all properties be enumerable for easier serialization.
	  if (msg && typeof msg == "object") props = msg, msg = undefined
	  else this.message = msg
	
	  // Name has to be an own property (or on the prototype a single step up) for
	  // the stack to be printed with the correct name.
	  if (props) for (var key in props) this[key] = props[key]
	  if (!has.call(this, "name"))
	    this.name = has.call(proto(this), "name")? this.name : this.constructor.name
	
	  if (trace && !("stack" in this)) trace(this, this.constructor)
	}
	
	StandardError.prototype = Object.create(Error.prototype, {
	  constructor: {value: StandardError, configurable: true, writable: true}
	})
	
	// Set name explicitly for when the code gets minified.
	StandardError.prototype.name = "StandardError"


/***/ },
/* 295 */
/***/ function(module, exports) {

	module.exports = {
		"100": "Continue",
		"101": "Switching Protocols",
		"102": "Processing",
		"200": "OK",
		"201": "Created",
		"202": "Accepted",
		"203": "Non-Authoritative Information",
		"204": "No Content",
		"205": "Reset Content",
		"206": "Partial Content",
		"207": "Multi-Status",
		"208": "Already Reported",
		"226": "IM Used",
		"300": "Multiple Choices",
		"301": "Moved Permanently",
		"302": "Found",
		"303": "See Other",
		"304": "Not Modified",
		"305": "Use Proxy",
		"307": "Temporary Redirect",
		"308": "Permanent Redirect",
		"400": "Bad Request",
		"401": "Unauthorized",
		"402": "Payment Required",
		"403": "Forbidden",
		"404": "Not Found",
		"405": "Method Not Allowed",
		"406": "Not Acceptable",
		"407": "Proxy Authentication Required",
		"408": "Request Timeout",
		"409": "Conflict",
		"410": "Gone",
		"411": "Length Required",
		"412": "Precondition Failed",
		"413": "Payload Too Large",
		"414": "URI Too Long",
		"415": "Unsupported Media Type",
		"416": "Range Not Satisfiable",
		"417": "Expectation Failed",
		"418": "I'm a teapot",
		"421": "Misdirected Request",
		"422": "Unprocessable Entity",
		"423": "Locked",
		"424": "Failed Dependency",
		"425": "Unordered Collection",
		"426": "Upgrade Required",
		"428": "Precondition Required",
		"429": "Too Many Requests",
		"431": "Request Header Fields Too Large",
		"500": "Internal Server Error",
		"501": "Not Implemented",
		"502": "Bad Gateway",
		"503": "Service Unavailable",
		"504": "Gateway Timeout",
		"505": "HTTP Version Not Supported",
		"506": "Variant Also Negotiates",
		"507": "Insufficient Storage",
		"508": "Loop Detected",
		"509": "Bandwidth Limit Exceeded",
		"510": "Not Extended",
		"511": "Network Authentication Required"
	};

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides a wrapper for rdflib's web operations (`rdf.Fetcher` based)
	 * @module web-rdflib
	 */
	var rdf = __webpack_require__(230).rdflib
	
	/**
	 * @class rdflibWebClient
	 * @static
	 */
	var rdflibWebClient = {
	  /**
	   * Retrieves a resource via HTTP, parses it, and returns the result.
	   * @method getParsedGraph
	   * @param url {String} URL of the resource or container to fetch
	   * @param proxyUrl {String} URL template of the proxy to use for CORS
	   *                          requests.
	   * @param timeout {Number} Request timeout in milliseconds.
	   * @param [suppressError=false] {Boolean} Resolve with a null graph on error
	   *   if true, reject otherwise. Set to true when using `Promise.all()`
	   * @return {Promise<Object>|Object}
	   */
	  getParsedGraph: function getParsedGraph (url, proxyUrl, timeout,
	      suppressError) {
	    rdf.Fetcher.crossSiteProxyTemplate = proxyUrl
	    var promise = new Promise(function (resolve, reject) {
	      var graph = rdf.graph()
	      var fetcher = new rdf.Fetcher(graph, timeout)
	
	      var docURI = (url.indexOf('#') >= 0)
	        ? url.slice(0, url.indexOf('#'))
	        : url
	      fetcher.nowOrWhenFetched(docURI, undefined, function (ok, body, xhr) {
	        if (!ok) {
	          if (suppressError) {
	            resolve(null)
	          } else {
	            reject({status: xhr.status, xhr: xhr})
	          }
	        } else {
	          resolve(graph)
	        }
	      })
	    }, function (error) {
	      console.log('Error in getParsedGraph: %o', error)
	    })
	
	    return promise
	  }
	}
	
	module.exports = rdflibWebClient


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/*
	The MIT License (MIT)
	
	Copyright (c) 2015 Solid
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	
	Solid.js is a Javascript library for Solid applications. This library currently
	depends on rdflib.js. Please make sure to load the rdflib.js script before
	loading solid.js.
	
	If you would like to know more about the solid Solid project, please see
	https://github.com/solid/
	*/
	'use strict'
	/**
	 * Provides Solid methods for WebID authentication and signup
	 * @module auth
	 */
	module.exports.currentUser = currentUser
	module.exports.listen = listen
	module.exports.login = login
	module.exports.signup = signup
	
	var webClient = __webpack_require__(287)
	
	/**
	 * Returns the WebID of the current user (by doing a login()/HEAD request to
	 * the current page). Convenience method, useful for standalone apps that aren't
	 * wrapping any resource.
	 * @method currentUser
	 * @return {String} WebID of the current user or `null` if none detected
	 */
	function currentUser () {
	  if (typeof window === 'undefined') {
	    return null  // only works in the browser
	  }
	  var currentPageUrl = window.location.href
	  return login(currentPageUrl)
	    .catch(function (reason) {
	      // console.log('Detecting current user failed: %o', reason)
	      return null
	    })
	}
	
	/**
	 * Sets up an event listener to monitor login messages from child window/iframe
	 * @method listen
	 * @static
	 * @return {Promise<String>} Event listener promise, resolves to user's WebID
	 */
	function listen () {
	  var promise = new Promise(function (resolve, reject) {
	    var eventMethod = window.addEventListener
	      ? 'addEventListener'
	      : 'attachEvent'
	    var eventListener = window[eventMethod]
	    var messageEvent = eventMethod === 'attachEvent'
	      ? 'onmessage'
	      : 'message'
	    eventListener(messageEvent, function (e) {
	      var u = e.data
	      if (u.slice(0, 5) === 'User:') {
	        var user = u.slice(5, u.length)
	        if (user && user.length > 0 && user.slice(0, 4) === 'http') {
	          return resolve(user)
	        } else {
	          return reject(user)
	        }
	      }
	    }, true)
	  })
	
	  return promise
	}
	
	/**
	 * Performs a Solid login() via an XHR HEAD operation.
	 * (Attempts to find the current user's WebID from the User header, if
	 *   already authenticated.)
	 * @method login
	 * @static
	 * @param [url] {String} Location of a Solid server or container at which the
	 *   user might be authenticated.
	 *   Defaults to: current page location
	 * @param [alternateAuthUrl] {String} URL of an alternate/default auth endpoint.
	 *   Defaults to `config.authEndpoint`
	 * @return {Promise<String>} XHR HEAD operation promise, resolves to user's WebID
	 */
	function login (url, alternateAuthUrl) {
	  var defaultAuthEndpoint = __webpack_require__(288).authEndpoint
	  url = url || window.location.origin + window.location.pathname
	  alternateAuthUrl = alternateAuthUrl || defaultAuthEndpoint
	  // First, see if user is already logged in (do a quick HEAD request)
	  return webClient.head(url)
	    .then(function (solidResponse) {
	      if (solidResponse.isLoggedIn()) {
	        return solidResponse.user
	      } else {
	        // If not logged in, try logging in at an alternate endpoint
	        return webClient.head(alternateAuthUrl)
	          .then(function (solidResponse) {
	            // Will return an empty string is this login also fails
	            return solidResponse.user
	          })
	      }
	    })
	}
	
	/**
	 * Opens a signup popup window, sets up `listen()`.
	 * @method signup
	 * @static
	 * @param signupUrl {String} Location of a Solid server for user signup.
	 * @return {Promise<String>} Returns a listener promise, resolves with signed
	 *   up user's WebID.
	 */
	function signup (signupUrl) {
	  var config = __webpack_require__(288)
	  signupUrl = signupUrl || config.signupEndpoint
	  var width = config.signupWindowWidth
	  var height = config.signupWindowHeight
	  // set borders
	  var leftPosition = (window.screen.width / 2) - ((width / 2) + 10)
	  // set title and status bars
	  var topPosition = (window.screen.height / 2) - ((height / 2) + 50)
	  var windowTitle = 'Solid signup'
	  var windowUrl = signupUrl + '?origin=' +
	    encodeURIComponent(window.location.origin)
	  var windowSpecs = 'resizable,scrollbars,status,width=' + width + ',height=' +
	    height + ',left=' + leftPosition + ',top=' + topPosition
	  window.open(windowUrl, windowTitle, windowSpecs)
	
	  return new Promise(function (resolve, reject) {
	    listen().then(function (webid) {
	      return resolve(webid)
	    }).catch(function (err) {
	      return reject(err)
	    })
	  })
	}


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides Solid helper functions involved with parsing a user's WebId profile.
	 * @module identity
	 */
	module.exports.discoverWebID = discoverWebID
	module.exports.getProfile = getProfile
	module.exports.loadExtendedProfile = loadExtendedProfile
	
	var graphUtil = __webpack_require__(285)
	var webClient = __webpack_require__(287)
	var SolidProfile = __webpack_require__(299)
	var vocab = __webpack_require__(228)
	
	/**
	 * Discovers a user's WebId (URL) starting from the account/domain URL.
	 * Usage:
	 *
	 *   ```
	 *   solid.identity.discoverWebID(url)
	 *     .then(function (webId) {
	 *       console.log('Web ID is: ' + webId)
	 *     })
	 *     .catch(function (err) {
	 *       console.log('Could not discover web id: ' + err)
	 *     })
	 *   ```
	 * @method discoverWebID
	 * @param url {String} Location of a user's account or domain.
	 * @throw {Error} Reason why the WebID could not be discovered
	 * @return {Promise<String>}
	 */
	function discoverWebID (url) {
	  return webClient.options(url)
	    .then(function (response) {
	      var metaUrl = response.metaAbsoluteUrl()
	      if (!metaUrl) {
	        throw new Error('Could not find a meta URL in the Link header')
	      }
	      return webClient.getParsedGraph(metaUrl)
	    })
	    .then(function (graph) {
	      var webId = graph.any(undefined, vocab.solid('account'))
	      if (!webId || !webId.uri) {
	        throw new Error('Could not find a WebID matching the domain ' + url)
	      }
	      return webId
	    })
	}
	
	/**
	 * Fetches a user's WebId profile, optionally follows `sameAs` etc links,
	 *   and return a promise with a parsed SolidProfile instance.
	 * @method getProfile
	 * @param profileUrl {String} WebId or Location of a user's profile.
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @param [options.ignoreExtended=false] Do not load extended profile if true.
	 * @return {Promise<SolidProfile>}
	 */
	function getProfile (profileUrl, options) {
	  options = options || {}
	  // Politely ask for Turtle formatted profiles
	  options.headers = options.headers || {
	    'Accept': 'text/turtle'
	  }
	  options.noCredentials = true  // profiles are always public
	  // Load main profile
	  return webClient.get(profileUrl, options)
	    .then(function (response) {
	      var contentType = response.contentType()
	      if (!contentType) {
	        throw new Error('Cannot parse profile without a Content-Type: header')
	      }
	      var parsedProfile = graphUtil.parseGraph(profileUrl, response.raw(),
	        contentType)
	      var profile = new SolidProfile(profileUrl, parsedProfile, response)
	      profile.isLoaded = true
	      if (options.ignoreExtended) {
	        return profile
	      } else {
	        return loadExtendedProfile(profile, options)
	      }
	    })
	}
	
	/**
	 * Loads the related external profile resources (all the `sameAs` and `seeAlso`
	 * links, as well as Preferences), and appends them to the profile's
	 * `parsedGraph`. Returns the profile instance.
	 * @method loadExtendedProfile
	 * @private
	 * @param profile {SolidProfile}
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>}
	 */
	function loadExtendedProfile (profile, options) {
	  var links = profile.relatedProfilesLinks()
	  return webClient.loadParsedGraphs(links, options)
	    .then(function (loadedGraphs) {
	      loadedGraphs.forEach(function (graph) {
	        if (graph && graph.value) {
	          profile.appendFromGraph(graph.value, graph.uri)
	        }
	      })
	      return profile
	    })
	}


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * @module profile
	 */
	module.exports = SolidProfile
	
	var appRegistry = __webpack_require__(284)
	var rdf = __webpack_require__(230).rdflib
	var vocab = __webpack_require__(228)
	var registry = __webpack_require__(300)
	var typeRegistry = __webpack_require__(301)
	var graphUtil = __webpack_require__(285)
	var parseLinks = graphUtil.parseLinks
	
	var PREFERENCES_DEFAULT_URI = '/settings/prefs.ttl'
	var PROFILE_CONTAINER_DEFAULT_URI = '/profile/'
	
	/**
	 * Provides convenience methods for a WebID Profile.
	 * Used by `identity.getProfile()`
	 * @class SolidProfile
	 * @constructor
	 */
	function SolidProfile (profileUrl, parsedProfile, response) {
	  /**
	   * Listed (public) App Registry (link and parsed graph)
	   * @property appRegistryListed
	   * @type Object
	   */
	  this.appRegistryListed = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * Unlisted (private) App Registry (link and parsed graph)
	   * @property appRegistryUnlisted
	   * @type Object
	   */
	  this.appRegistryUnlisted = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * Main Inbox resource for this profile (link and parsed graph)
	   * @property inbox
	   * @type Object
	   */
	  this.inbox = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * Has this profile been loaded? (Set in `identity.getProfile()`)
	   * @property isLoaded
	   * @type Boolean
	   */
	  this.isLoaded = false
	  /**
	   * Profile owner's avatar / icon url. (Initialized in .appendFromGraph())
	   * @type String
	   */
	  this.picture = null
	  /**
	   * Profile owner's name. (Initialized in .appendFromGraph())
	   * @property name
	   * @type String
	   */
	  this.name = null
	  /**
	   * Links to root storage containers (read/write dataspaces for this profile)
	   * @property storage
	   * @type Array<String>
	   */
	  this.storage = []
	  /**
	   * Listed (public) Type registry index (link and parsed graph)
	   * @property typeIndexListed
	   * @type Object
	   */
	  this.typeIndexListed = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * Unlisted (private) Type registry index (link and parsed graph)
	   * @property typeIndexUnlisted
	   * @type Object
	   */
	  this.typeIndexUnlisted = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * Parsed graph of the extended WebID Profile document.
	   * Included the WebID profile, preferences, and related profile graphs
	   * @property parsedGraph
	   * @type Graph
	   */
	  this.parsedGraph = null
	  /**
	   * Profile preferences object (link and parsed graph).
	   * Currently used as a 'Private Profile', and is part of the Extended Profile.
	   * @property preferences
	   * @type Object
	   */
	  this.preferences = {
	    uri: null,
	    graph: null
	  }
	  /**
	   * SolidResponse instance from which this profile object was created.
	   * Contains the raw profile source, the XHR object, etc.
	   * @property response
	   * @type SolidResponse
	   */
	  this.response = response
	  /**
	   * Links to "see also" profile documents. Typically loaded immediately
	   * after retrieving the initial WebID Profile document.
	   * @property relatedProfiles
	   * @type Object
	   */
	  this.relatedProfiles = {
	    sameAs: [],
	    seeAlso: []
	  }
	  /**
	   * WebId URL (the `foaf:primaryTopic` of the profile document)
	   * @property webId
	   * @type String
	   */
	  this.webId = null
	
	  if (!profileUrl) {
	    return
	  }
	  /**
	   * Location of the base WebID Profile document (minus the hash fragment).
	   * @property baseProfileUrl
	   * @type String
	   */
	  this.baseProfileUrl = (profileUrl.indexOf('#') >= 0)
	    ? profileUrl.slice(0, profileUrl.indexOf('#'))
	    : profileUrl
	
	  if (parsedProfile) {
	    this.initWebId(parsedProfile)
	    this.appendFromGraph(parsedProfile, this.baseProfileUrl)
	  }
	}
	
	/**
	 * Update the profile based on a parsed graph, which can be either the
	 * initial WebID profile, or the various extended profile graphs
	 * (such as the seeAlso, sameAs and preferences links)
	 * @method appendFromGraph
	 * @param parsedProfile {rdf.IndexedFormula} RDFLib-parsed user profile
	 * @param profileUrl {String} URL of this particular parsed graph
	 */
	SolidProfile.prototype.appendFromGraph =
	  function appendFromGraph (parsedProfile, profileUrl) {
	    if (!parsedProfile) {
	      return
	    }
	    this.parsedGraph = this.parsedGraph || rdf.graph()  // initialize if null
	    // Add the graph of this parsedProfile to the existing graph
	    graphUtil.appendGraph(this.parsedGraph, parsedProfile, profileUrl)
	
	    var webId = rdf.sym(this.webId)
	    var links
	
	    // Load the profile owner's name and avatar/icon url
	    if (!this.name) {
	      this.name = this.find(vocab.foaf('name'))
	    }
	    if (!this.picture) {
	      this.picture = this.find(vocab.foaf('img'))
	    }
	    // Add sameAs and seeAlso
	    links = parseLinks(parsedProfile, null, vocab.owl('sameAs'))
	    this.relatedProfiles.sameAs = this.relatedProfiles.sameAs.concat(links)
	
	    links = parseLinks(parsedProfile, null, vocab.rdfs('seeAlso'))
	    this.relatedProfiles.seeAlso = this.relatedProfiles.seeAlso.concat(links)
	
	    // Add preferencesFile link (singular). Note that preferencesFile has
	    // Write-Once semantics -- it's initialized from public profile, but
	    // cannot be overwritten by related profiles
	    if (!this.preferences.uri) {
	      this.preferences.uri = parseLink(parsedProfile, webId,
	        vocab.pim('preferencesFile'))
	    }
	    // Init inbox (singular). Note that inbox has
	    // Write-Once semantics -- it's initialized from public profile, but
	    // cannot be overwritten by related profiles
	    if (!this.inbox.uri) {
	      this.inbox.uri = parseLink(parsedProfile, webId,
	        vocab.solid('inbox'))
	    }
	
	    // Add storage
	    links = parseLinks(parsedProfile, webId, vocab.pim('storage'))
	    this.storage =
	      this.storage.concat(links)
	
	    // Add links to Listed and Unlisted Type Indexes.
	    // Note: these are just the links.
	    // The actual index files will be loaded and parsed
	    //   in `profile.loadTypeRegistry()`)
	    if (!this.typeIndexListed.uri) {
	      this.typeIndexListed.uri = parseLink(parsedProfile, webId,
	        vocab.solid('publicTypeIndex'))
	    }
	    if (!this.typeIndexUnlisted.uri) {
	      this.typeIndexUnlisted.uri = parseLink(parsedProfile, webId,
	        vocab.solid('privateTypeIndex'))
	    }
	
	    // Add links to Listed and Unlisted App Registry resources.
	    // Note: these are just the links.
	    // The actual index files will be loaded and parsed
	    //   in `profile.loadAppRegistry()`)
	    if (!this.appRegistryListed.uri) {
	      this.appRegistryListed.uri = parseLink(parsedProfile, webId,
	        vocab.solid('publicAppRegistry'))
	    }
	    if (!this.appRegistryUnlisted.uri) {
	      this.appRegistryUnlisted.uri = parseLink(parsedProfile, webId,
	        vocab.solid('privateAppRegistry'))
	    }
	  }
	
	/**
	 * Returns the default location of the container in which the App Registry
	 * resources will reside. (Uses the same container as the profile
	 * document.)
	 * @method appRegistryDefaultContainer
	 * @return {String}
	 */
	SolidProfile.prototype.appRegistryDefaultContainer =
	  function appRegistryDefaultContainer () {
	    var profileUri = this.webId || this.baseProfileUrl
	    var baseContainer
	    if (profileUri) {
	      baseContainer = profileUri.replace(/\\/g, '/').replace(/\/[^\/]*\/?$/, '') + '/'
	    } else {
	      baseContainer = PROFILE_CONTAINER_DEFAULT_URI
	    }
	    return baseContainer
	  }
	
	/**
	 * Returns the value of a given "field" (predicate) from the profile's parsed
	 * graph. If there are more than one matches for this predicate, .find()
	 * returns the first one. If there are no matches, `null` is returned.
	 * Usage:
	 *
	 *   ```
	 *   var inboxUrl = profile.find(vocab.solid('inbox'))
	 *   if (inboxUrl) {
	 *     console.log('Inbox is located at:', inboxUrl)
	 *   }
	 *   ```
	 * @method find
	 * @param predicate {NamedNode} RDF named node of the predicate
	 * @return {String|Null} String value (or uri)
	 */
	SolidProfile.prototype.find = function find (predicate) {
	  if (!this.parsedGraph) {
	    throw new Error('Profile graph not yet loaded.')
	  }
	  var subject = rdf.sym(this.webId)
	  var result = this.parsedGraph.any(subject, predicate)
	  if (!result) {
	    return result
	  }
	  return result.value || result.uri
	}
	
	/**
	 * Returns all values of a given "field" (predicate) from the profile's parsed
	 * graph.
	 * Usage:
	 *
	 *   ```
	 *   var related = profile.findAll(vocab.owl('sameAs'))
	 *   ```
	 * @method findAll
	 * @param predicate {NamedNode} RDF named node of the predicate
	 * @return {Array<String>} Array of string values/uris
	 */
	SolidProfile.prototype.findAll = function findAll (predicate) {
	  if (!this.parsedGraph) {
	    throw new Error('Profile graph not yet loaded.')
	  }
	  var subject = rdf.sym(this.webId)
	  var matches = this.parsedGraph.statementsMatching(subject, predicate)
	  matches = matches.map(function (ea) {
	    return ea.object.value || ea.object.uri
	  })
	  return matches.sort()
	}
	
	/**
	 * Extracts the WebID from a parsed profile graph and initializes it.
	 * Should only be done once (when creating a new SolidProfile instance)
	 * @method initWebId
	 * @param parsedProfile {rdf.IndexedFormula} RDFLib-parsed user profile
	 */
	SolidProfile.prototype.initWebId = function initWebId (parsedProfile) {
	  if (!parsedProfile) {
	    return
	  }
	  try {
	    this.webId = extractWebId(this.baseProfileUrl, parsedProfile).uri
	  } catch (e) {
	    throw new Error('Unable to parse WebID from profile: ' + e)
	  }
	}
	
	/**
	 * Returns an array of related external profile links (sameAs and seeAlso and
	 * Preferences files)
	 * @method relatedProfilesLinks
	 * @return {Array<String>}
	 */
	SolidProfile.prototype.relatedProfilesLinks = function relatedProfilesLinks () {
	  var links = []
	  links = links.concat(this.relatedProfiles.sameAs)
	    .concat(this.relatedProfiles.seeAlso)
	  if (this.preferences.uri) {
	    links = links.concat(this.preferences.uri)
	  }
	  return links
	}
	
	/**
	 * Returns whether or not the profile has a private (unlisted) App Registry
	 * associated with it (linked to from the profile document).
	 * @method hasAppRegistryPrivate
	 * @throws {Error} If the profile has not been loaded (via getProfile()).
	 * @return {Boolean} Returns truthy value if the private (unlisted) app registry
	 *   exists (that is, has a link in the profile).
	 */
	SolidProfile.prototype.hasAppRegistryPrivate =
	  function hasAppRegistryPrivate () {
	    if (!this.isLoaded) {
	      throw new Error('Must load profile before checking if registry exists.')
	    }
	    return this.appRegistryUnlisted.uri
	  }
	
	/**
	 * Returns whether or not the profile has a public (listed) App Registry
	 * associated with it (linked to from the profile document).
	 * @method hasAppRegistryPublic
	 * @throws {Error} If the profile has not been loaded (via getProfile()).
	 * @return {Boolean} Returns truthy value if the public (listed) app registry
	 *   exists (that is, has a link in the profile).
	 */
	SolidProfile.prototype.hasAppRegistryPublic =
	  function hasAppRegistryPublic () {
	    if (!this.isLoaded) {
	      throw new Error('Must load profile before checking if registry exists.')
	    }
	    return this.appRegistryListed.uri
	  }
	
	/**
	 * Returns true if the profile has any links to root storage
	 * @method hasStorage
	 * @return {Boolean}
	 */
	SolidProfile.prototype.hasStorage = function hasStorage () {
	  return this.storage && this.storage.length > 0
	}
	
	/**
	 * Returns whether or not the profile has a private (unlisted) Type Index
	 * Registry associated with it (linked to from the profile document).
	 * @method hasTypeRegistryPrivate
	 * @throws {Error} If the profile has not been loaded (via getProfile()).
	 * @return {Boolean} Returns truthy value if the private (unlisted) type index
	 *   registry exists (that is, has a link in the profile).
	 */
	SolidProfile.prototype.hasTypeRegistryPrivate =
	  function hasTypeRegistryPrivate () {
	    if (!this.isLoaded) {
	      throw new Error('Must load profile before checking if registry exists.')
	    }
	    return this.typeIndexUnlisted.uri
	  }
	
	/**
	 * Returns whether or not the profile has a public (listed) Type Index Registry
	 * associated with it (linked to from the profile document).
	 * @method hasTypeRegistryPublic
	 * @throws {Error} If the profile has not been loaded (via getProfile()).
	 * @return {Boolean} Returns truthy value if the public (listed) type index
	 *   registry exists (that is, has a link in the profile).
	 */
	SolidProfile.prototype.hasTypeRegistryPublic =
	  function hasTypeRegistryPublic () {
	    if (!this.isLoaded) {
	      throw new Error('Must load profile before checking if registry exists.')
	    }
	    return this.typeIndexListed.uri
	  }
	
	/**
	 * Convenience method to load the app registry. Usage:
	 *
	 *   ```
	 *   Solid.getProfile(url, options)
	 *     .then(function (profile) {
	 *       return profile.loadAppRegistry(options)
	 *     })
	 *   ```
	 * @method loadAppRegistry
	 * @param [options] Options hashmap (see Solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.loadAppRegistry = function loadAppRegistry (options) {
	  return appRegistry.loadAppRegistry(this, options)
	}
	
	/**
	 * Convenience method to load the type index registry. Usage:
	 *
	 *   ```
	 *   Solid.getProfile(url, options)
	 *     .then(function (profile) {
	 *       return profile.loadTypeRegistry(options)
	 *     })
	 *   ```
	 * @method loadTypeRegistry
	 * @param [options] Options hashmap (see Solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.loadTypeRegistry = function loadTypeRegistry (options) {
	  return typeRegistry.loadTypeRegistry(this, options)
	}
	
	/**
	 * Adds a parsed app registry graph to the appropriate registry (public
	 *   or private). (Used when parsing the extended profile).
	 * @method addAppRegistry
	 * @private
	 * @param graph {Graph} Parsed graph (loaded from an app registry resource)
	 * @param uri {String} Location of the app registry document
	 */
	SolidProfile.prototype.addAppRegistry = function addAppRegistry (graph, uri) {
	  // Is this a public app registry?
	  if (registry.isListed(graph)) {
	    if (!this.appRegistryListed.graph) {  // only initialize once
	      this.appRegistryListed.uri = uri
	      this.appRegistryListed.graph = graph
	    }
	  } else if (registry.isUnlisted(graph)) {
	    if (!this.appRegistryUnlisted.graph) {
	      this.appRegistryUnlisted.uri = uri
	      this.appRegistryUnlisted.graph = graph
	    }
	  } else {
	    throw new Error('Attempting to add an invalid app registry resource')
	  }
	}
	
	/**
	 * Adds a parsed type index graph to the appropriate type registry (public
	 *   or private). (Used when parsing the extended profile).
	 * @method addTypeRegistry
	 * @private
	 * @param graph {$rdf.IndexedFormula} Parsed graph (loaded from a type index
	 *   resource)
	 * @param uri {String} Location of the type registry index document
	 */
	SolidProfile.prototype.addTypeRegistry = function addTypeRegistry (graph, uri) {
	  // Is this a public type registry?
	  if (registry.isListed(graph)) {
	    if (!this.typeIndexListed.graph) {  // only initialize once
	      this.typeIndexListed.uri = uri
	      this.typeIndexListed.graph = graph
	    }
	  } else if (registry.isUnlisted(graph)) {
	    if (!this.typeIndexUnlisted.graph) {
	      this.typeIndexUnlisted.uri = uri
	      this.typeIndexUnlisted.graph = graph
	    }
	  } else {
	    throw new Error('Attempting to add an invalid type registry index')
	  }
	}
	
	/**
	 * Reloads the contents of the profile's App Registry resources.
	 * @method reloadAppRegistry
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.reloadAppRegistry = function reloadAppRegistry () {
	  this.resetAppRegistry()
	  return this.loadAppRegistry()
	}
	
	/**
	 * Reloads the contents of the profile's Type Index registries.
	 * @method reloadTypeRegistry
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.reloadTypeRegistry = function reloadTypeRegistry () {
	  this.resetTypeRegistry()
	  return this.loadTypeRegistry()
	}
	
	/**
	 * Resets the contents (graphs) of the profile's App Registry resources to null.
	 * Used internally by `reloadAppRegistry()`.
	 * @method resetAppRegistry
	 * @private
	 */
	SolidProfile.prototype.resetAppRegistry = function resetAppRegistry () {
	  this.appRegistryListed.graph = null
	  this.appRegistryUnlisted.graph = null
	}
	
	/**
	 * Resets the contents (graphs) of the profile's Type Index registries to null.
	 * Used internally by `reloadTypeRegistry()`.
	 * @method resetTypeRegistry
	 * @private
	 */
	SolidProfile.prototype.resetTypeRegistry = function resetTypeRegistry () {
	  this.typeIndexListed.graph = null
	  this.typeIndexUnlisted.graph = null
	}
	
	/**
	 * Returns lists of registry entries for a given RDF Class.
	 * @method typeRegistryForClass
	 * @param rdfClass {rdf.NamedNode} RDF Class symbol
	 * @return {Array<IndexRegistration>}
	 */
	SolidProfile.prototype.typeRegistryForClass =
	  function typeRegistryForClass (rdfClass) {
	    return typeRegistry.typeRegistryForClass(this, rdfClass)
	  }
	
	/**
	 * Returns the default location of the container in which the Type Registry
	 * Index resources will reside. (Uses the same container as the profile
	 * document.)
	 * @method typeRegistryDefaultContainer
	 * @return {String}
	 */
	SolidProfile.prototype.typeRegistryDefaultContainer =
	  function typeRegistryDefaultContainer () {
	    var profileUri = this.webId || this.baseProfileUrl
	    var baseContainer
	    if (profileUri) {
	      baseContainer = profileUri.replace(/\\/g, '/').replace(/\/[^\/]*\/?$/, '') + '/'
	    } else {
	      baseContainer = PROFILE_CONTAINER_DEFAULT_URI
	    }
	    return baseContainer
	  }
	
	/**
	 * Returns the relative URL of the private profile (preferences) resource.
	 * @method privateProfileUri
	 * @return {String}
	 */
	SolidProfile.prototype.privateProfileUri = function privateProfileUri () {
	  if (this.preferences && this.preferences.uri) {
	    return this.preferences.uri
	  } else {
	    return PREFERENCES_DEFAULT_URI
	  }
	}
	
	/**
	 * Registers a given RDF class in the user's type index registries, so that
	 * other applications can discover it.
	 * @method registerType
	 * @param rdfClass {rdf.NamedNode} Type to register in the index.
	 * @param location {String} Absolute URI to the location you want the class
	 *   registered to. (Example: Registering Address books in
	 *   `https://example.com/contacts/`)
	 * @param [locationType='container'] {String} Either 'instance' or 'container',
	 *   defaults to 'container'
	 * @param [isListed=false] {Boolean} Whether to register in a listed or unlisted
	 *   index). Defaults to `false` (unlisted).
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.registerType =
	  function (rdfClass, location, locationType, isListed) {
	    return typeRegistry.registerType(this, rdfClass, location, locationType,
	      isListed)
	  }
	
	/**
	 * Removes a given RDF class from the user's type index registry
	 * @method unregisterType
	 * @param rdfClass {rdf.NamedNode} Type to register in the index.
	 * @param [isListed=false] {Boolean} Whether to register in a listed or unlisted
	 *   index). Defaults to `false` (unlisted).
	 * @param [location] {String} If present, only unregister the class from this
	 *   location (absolute URI).
	 * @return {Promise<SolidProfile>}
	 */
	SolidProfile.prototype.unregisterType = function (rdfClass, isListed, location) {
	  return typeRegistry.unregisterType(this, rdfClass, isListed, location)
	}
	
	/**
	 * Extracts the WebID symbol from a parsed profile graph.
	 * @method extractWebId
	 * @param baseProfileUrl {String} Profile URL, with no hash fragment
	 * @param parsedProfile {rdf.IndexedFormula} RDFLib-parsed user profile
	 * @return {rdf.NamedNode} WebID symbol
	 */
	function extractWebId (baseProfileUrl, parsedProfile) {
	  var subj = rdf.sym(baseProfileUrl)
	  var pred = vocab.foaf('primaryTopic')
	  var match = parsedProfile.any(subj, pred)
	  return match
	}
	
	/**
	 * Extracts the first URI from a parsed graph that matches parameters
	 * @method parseLinks
	 * @param graph {rdf.IndexedFormula}
	 * @param subject {rdf.NamedNode}
	 * @param predicate {rdf.NamedNode}
	 * @param object {rdf.NamedNode}
	 * @param source {rdf.NamedNode}
	 * @return {String} URI that matches the parameters
	 */
	function parseLink (graph, subject, predicate, object, source) {
	  var first = graph.any(subject, predicate, object, source)
	  if (first) {
	    return first.uri
	  } else {
	    return null
	  }
	}


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * @module registry
	 */
	
	module.exports.isListed = isListed
	module.exports.isUnlisted = isUnlisted
	
	var vocab = __webpack_require__(228)
	
	/**
	 * Returns true if the parsed graph is a `solid:UnlistedDocument` document.
	 * @method isUnlisted
	 * @param graph {Graph} Parsed graph (loaded from a registry-like resource)
	 * @return {Boolean}
	 */
	function isUnlisted (graph) {
	  return graph.any(null, null, vocab.solid('UnlistedDocument'), graph.uri)
	}
	
	/**
	 * Returns true if the parsed graph is a `solid:ListedDocument` document.
	 * @method isListed
	 * @param graph {Graph} Parsed graph (loaded from a registry-like resource)
	 * @return {Boolean}
	 */
	function isListed (graph) {
	  return graph.any(null, null, vocab.solid('ListedDocument'), graph.uri)
	}


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides Solid helper functions involved with loading the Type Index
	 * Registry files, and with registering resources with them.
	 * @module type-registry
	 */
	module.exports.blankPrivateTypeIndex = blankPrivateTypeIndex
	module.exports.blankPublicTypeIndex = blankPublicTypeIndex
	module.exports.initTypeRegistryPrivate = initTypeRegistryPrivate
	module.exports.initTypeRegistryPublic = initTypeRegistryPublic
	module.exports.loadTypeRegistry = loadTypeRegistry
	module.exports.registerType = registerType
	module.exports.typeRegistryForClass = typeRegistryForClass
	module.exports.unregisterType = unregisterType
	
	var IndexRegistration = __webpack_require__(302)
	var rdf = __webpack_require__(230).rdflib
	var webClient = __webpack_require__(287)
	var util = __webpack_require__(286)
	var graphUtil = __webpack_require__(285)
	var webUtil = __webpack_require__(286)
	var vocab = __webpack_require__(228)
	
	/**
	 * Returns a blank private type index registry option.
	 * For use with `initTypeRegistry()`.
	 * @method blankPrivateTypeIndex
	 * @private
	 * @return {Object} Blank type index registry object
	 */
	function blankPrivateTypeIndex () {
	  var thisDoc = rdf.sym('')
	  var indexStatements = [
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('TypeIndex')),
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('UnlistedDocument'))
	  ]
	  var privateIndex = {
	    data: graphUtil.serializeStatements(indexStatements),
	    graph: graphUtil.graphFromStatements(indexStatements),
	    slug: 'privateTypeIndex.ttl',
	    uri: null  // actual url not yet known
	  }
	  return privateIndex
	}
	
	/**
	 * Returns a blank public type index registry option.
	 * For use with `initTypeRegistry()`.
	 * @method blankPublicTypeIndex
	 * @private
	 * @return {Object} Blank type index registry object
	 */
	function blankPublicTypeIndex () {
	  var thisDoc = rdf.sym('')
	  var indexStatements = [
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('TypeIndex')),
	    rdf.st(thisDoc, vocab.rdf('type'), vocab.solid('ListedDocument'))
	  ]
	  var publicIndex = {
	    data: graphUtil.serializeStatements(indexStatements),
	    graph: graphUtil.graphFromStatements(indexStatements),
	    slug: 'publicTypeIndex.ttl',
	    uri: null  // actual url not yet known
	  }
	  return publicIndex
	}
	
	/**
	 * Initializes the private Type Index Registry resource, updates
	 * the profile with the initialized index, and returns the updated profile.
	 * @method initTypeRegistryPrivate
	 * @param profile {SolidProfile} User's WebID profile
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>} Resolves with the updated profile instance.
	 */
	function initTypeRegistryPrivate (profile, options) {
	  options = options || {}
	  var registryContainerUri = profile.typeRegistryDefaultContainer()
	  var webId = rdf.sym(profile.webId)
	  var privateIndex = blankPrivateTypeIndex()
	  // First, create the private Type Index Registry resource
	  return webClient.post(registryContainerUri, privateIndex.data,
	                        privateIndex.slug)
	    .catch(function (err) {
	      throw new Error('Could not create privateIndex document:', err)
	    })
	    .then(function (response) {
	      // Private type index resource created.
	      // Update the private profile (preferences) to link to it.
	      privateIndex.uri = util.absoluteUrl(webUtil.hostname(registryContainerUri),
	        response.url)
	      var toAdd = [
	        rdf.st(webId, vocab.solid('privateTypeIndex'), rdf.sym(privateIndex.uri))
	      ]
	      var toDel = []
	      // Note: this PATCH will actually create a private profile if it doesn't
	      // already exist.
	      return webClient.patch(profile.privateProfileUri(), toDel, toAdd, options)
	    })
	    .catch(function (err) {
	      throw new Error('Could not update profile with private index:' + err)
	    })
	    .then(function (response) {
	      // Profile successfully patched with a link to the created private index
	      // It's safe to update this instance of profile
	      profile.typeIndexUnlisted = privateIndex
	      // Finally, return the updated profile with type index loaded
	      return profile
	    })
	}
	
	/**
	 * Initializes the public Type Index Registry resource, updates
	 * the profile with the initialized index, and returns the updated profile.
	 * @method initTypeRegistryPublic
	 * @param profile {SolidProfile} User's WebID profile
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>} Resolves with the updated profile instance.
	 */
	function initTypeRegistryPublic (profile, options) {
	  options = options || {}
	  var registryContainerUri = profile.typeRegistryDefaultContainer()
	  var webId = rdf.sym(profile.webId)
	  var publicIndex = blankPublicTypeIndex()
	  // First, create the public Type Index Registry resource
	  return webClient.post(registryContainerUri, publicIndex.data,
	                        publicIndex.slug)
	    .catch(function (err) {
	      throw new Error('Could not create publicIndex document:', err)
	    })
	    .then(function (response) {
	      // Public type index resource created. Update the profile to link to it.
	      publicIndex.uri = util.absoluteUrl(webUtil.hostname(registryContainerUri),
	        response.url)
	      var toAdd = [
	        rdf.st(webId, vocab.solid('publicTypeIndex'), rdf.sym(publicIndex.uri))
	      ]
	      var toDel = []
	      return webClient.patch(profile.webId, toDel, toAdd, options)
	    })
	    .catch(function (err) {
	      throw new Error('Could not update profile with public index:', err)
	    })
	    .then(function (response) {
	      // Profile successfully patched with a link to the created public index
	      // It's safe to update this instance of profile
	      profile.typeIndexListed = publicIndex
	      // Finally, return the updated profile with type index loaded
	      return profile
	    })
	}
	
	/**
	 * Adds an RDF class to a user's type index registry, and returns the
	 * profile (with the appropriate type registry index updated).
	 * Called by `registerTypeIndex()`, which does all the argument validation.
	 * @method addToTypeIndex
	 * @param profile {SolidProfile} User's WebID profile
	 * @param rdfClass {NamedNode} RDF type to register in the index.
	 * @param location {String} Absolute URI to the location you want the class
	 *   registered to.
	 * @param locationType {String} Either 'instance' or 'container'
	 * @param isListed {Boolean} Whether to register in a listed or unlisted index).
	 * @return {Promise<SolidProfile>}
	 */
	function addToTypeIndex (profile, rdfClass, location, locationType,
	                         isListed) {
	  // TODO: Check to see if a registry entry for this type already exists.
	  // Generate a fragment identifier for the new registration
	  var hash = __webpack_require__(226)
	  var fragmentId = hash.unique(rdfClass.uri)
	  var registryUri
	  var registryGraph
	  if (isListed) {
	    registryUri = profile.typeIndexListed.uri
	    registryGraph = profile.typeIndexListed.graph
	  } else {
	    registryUri = profile.typeIndexUnlisted.uri
	    registryGraph = profile.typeIndexUnlisted.graph
	  }
	  if (!registryUri) {
	    throw new Error('Cannot register type, registry URL missing')
	  }
	  var registrationUri = rdf.sym(registryUri + '#' + fragmentId)
	  // Set the class for the location type
	  var locationTypeClass
	  if (locationType === 'instance') {
	    locationTypeClass = vocab.solid('instance')
	  } else {
	    locationTypeClass = vocab.solid('instanceContainer')
	    // Add trailing slash if it's missing and is a container
	    if (location.lastIndexOf('/') !== location.length - 1) {
	      location += '/'
	    }
	  }
	  // triples to delete (none for the moment)
	  var toDel = []
	  // Create the list of triples to add in the PATCH operation
	  var toAdd = [
	    // example: '<#ab09fd> a solid:TypeRegistration;'
	    rdf.st(registrationUri, vocab.rdf('type'), vocab.solid('TypeRegistration')),
	    // example: 'solid:forClass sioc:Post;'
	    rdf.st(registrationUri, vocab.solid('forClass'), rdfClass),
	    // example: 'solid:instanceContainer </posts/>.'
	    rdf.st(registrationUri, locationTypeClass, rdf.sym(location))
	  ]
	  return webClient.patch(registryUri, toDel, toAdd)
	    .then(function (response) {
	      // Update the profile object with the new registry without reloading
	      var newRegistration = graphUtil.graphFromStatements(toAdd)
	      if (registryGraph) {
	        graphUtil.appendGraph(registryGraph, newRegistration)
	      } else {
	        registryGraph = newRegistration
	      }
	      return profile
	    })
	}
	
	/**
	 * Loads the public and private type registry index resources, adds them
	 * to the profile, and returns the profile.
	 * Called by the profile.loadTypeRegistry() alias method.
	 * Usage:
	 *
	 *   ```
	 * var profile = solid.getProfile(url, options)
	 *   .then(function (profile) {
	 *     return profile.loadTypeRegistry(options)
	 *   })
	 *   ```
	 * @method loadTypeRegistry
	 * @param profile {SolidProfile}
	 * @param [options] Options hashmap (see solid.web.solidRequest() function docs)
	 * @return {Promise<SolidProfile>}
	 */
	function loadTypeRegistry (profile, options) {
	  options = options || {}
	  options.headers = options.headers || {}
	  // Politely ask for Turtle format
	  if (!options.headers['Accept']) {
	    options.headers['Accept'] = 'text/turtle'
	  }
	  // load public and private index resources
	  var links = []
	  if (profile.typeIndexListed.uri) {
	    links.push(profile.typeIndexListed.uri)
	  }
	  if (profile.typeIndexUnlisted.uri) {
	    links.push(profile.typeIndexUnlisted.uri)
	  }
	  return webClient.loadParsedGraphs(links, options)
	    .then(function (loadedGraphs) {
	      loadedGraphs.forEach(function (graph) {
	        // For each index resource loaded, add it to `profile.typeIndexListed`
	        //  or `profile.typeIndexUnlisted` as appropriate
	        if (graph && graph.value) {
	          profile.addTypeRegistry(graph.value, graph.uri)
	        }
	      })
	      return profile
	    })
	}
	
	/**
	 * Registers a given RDF class in the user's type index registries, so that
	 * other applications can discover it.
	 * Note: If the relevant type index registry does not exist, it will be created.
	 * @method registerType
	 * @param profile {SolidProfile} Loaded WebID profile
	 * @param rdfClass {rdf.NamedNode} Type to register in the index.
	 * @param location {String} Absolute URI to the location you want the class
	 *   registered to. (Example: Registering Address books in
	 *   `https://example.com/contacts/`)
	 * @param [locationType='container'] {String} Either 'instance' or 'container',
	 *   defaults to 'container'
	 * @param [isListed=false] {Boolean} Whether to register in a listed or unlisted
	 *   index). Defaults to `false` (unlisted).
	 * @return {Promise<SolidProfile>} Resolves with the updated profile.
	 */
	function registerType (profile, rdfClass, location, locationType, isListed) {
	  if (!profile) {
	    throw new Error('No profile provided')
	  }
	  if (!profile.isLoaded) {
	    throw new Error('Profile is not loaded')
	  }
	  if (!rdfClass || !location) {
	    throw new Error('Type registration requires type class and location')
	  }
	  locationType = locationType || 'container'
	  if (locationType !== 'container' && locationType !== 'instance') {
	    throw new Error('Invalid location type')
	  }
	  return loadTypeRegistry(profile)  // make sure type registry is loaded
	    .then(function (profile) {
	      if (isListed && !profile.hasTypeRegistryPublic()) {
	        // Public type registry is needed, but doesn't exist. Create it.
	        return initTypeRegistryPublic(profile)
	      }
	      if (!isListed && !profile.hasTypeRegistryPrivate()) {
	        // Private type registry is needed, but doesn't exist. Create it.
	        return initTypeRegistryPrivate(profile)
	      }
	      // Relevant type registry exists, proceed
	      return profile
	    })
	    .then(function (profile) {
	      // Made sure the relevant type registry exists, and can now add to it
	      return addToTypeIndex(profile, rdfClass, location, locationType,
	        isListed)
	    })
	}
	
	/**
	 * Returns lists of registry entries for a profile and a given RDF Class.
	 * @method typeRegistryForClass
	 * @param profile {SolidProfile}
	 * @param rdfClass {rdf.NamedNode} RDF Class
	 * @return {Array<IndexRegistration>}
	 */
	function typeRegistryForClass (profile, rdfClass) {
	  var registrations = []
	  var isListed = true
	
	  return registrations
	    .concat(
	      // Public/listed registrations
	      registrationsFromGraph(profile.typeIndexListed.graph, rdfClass, isListed)
	    )
	    .concat(
	      // Private/unlisted registrations
	      registrationsFromGraph(profile.typeIndexUnlisted.graph, rdfClass,
	        !isListed)
	    )
	}
	
	/**
	 * Returns a list of registry entries from a given parsed type index graph.
	 * @method registrationsFromGraph
	 * @param graph {rdf.IndexedFormula} Parsed type index graph
	 * @param rdfClass {rdf.NamedNode} RDF Class
	 * @param isListed {Boolean} Whether to register in a listed or unlisted index
	 * @return {Array<IndexRegistration>}
	 */
	function registrationsFromGraph (graph, rdfClass, isListed) {
	  var entrySubject, instanceMatches, containerMatches
	  var registrations = []
	  if (!graph) {
	    return registrations
	  }
	  var matches = graph.statementsMatching(null, null, rdfClass)
	  matches.forEach(function (match) {
	    entrySubject = match.subject
	    // Have the hash fragment of the registration, now need to determine
	    // location type, and the actual location.
	    instanceMatches =
	      graph.statementsMatching(entrySubject, vocab.solid('instance'))
	    instanceMatches.forEach(function (location) {
	      registrations.push(new IndexRegistration(entrySubject.uri, rdfClass,
	        'instance', location.object.uri, isListed))
	    })
	    // Now try to find solid:instanceContainer matches
	    containerMatches =
	      graph.statementsMatching(entrySubject, vocab.solid('instanceContainer'))
	    containerMatches.forEach(function (location) {
	      registrations.push(new IndexRegistration(entrySubject.uri, rdfClass,
	        'container', location.object.uri, isListed))
	    })
	  })
	  return registrations
	}
	
	/**
	 * Removes an RDF class from a user's type index registry.
	 * Called by `unregisterTypeIndex()`, which does all the argument validation.
	 * @param profile {SolidProfile} User's WebID profile
	 * @param rdfClass {rdf.NamedNode} Type to remove from the registry
	 * @param isListed {Boolean} Whether to remove from a listed or unlisted index
	 * @param [location] {String} If present, only unregister the class from this
	 *   location (absolute URI).
	 * @return {Promise<SolidProfile>}
	 */
	function removeFromTypeIndex (profile, rdfClass, isListed, location) {
	  var registryUri
	  var registryGraph
	  if (isListed) {
	    registryUri = profile.typeIndexListed.uri
	    registryGraph = profile.typeIndexListed.graph
	  } else {
	    registryUri = profile.typeIndexUnlisted.uri
	    registryGraph = profile.typeIndexUnlisted.graph
	  }
	  if (!registryUri) {
	    throw new Error('Cannot unregister type, registry URL missing')
	  }
	  // Get the existing registrations
	  var registrations = registrationsFromGraph(registryGraph, rdfClass, isListed)
	  if (registrations.length === 0) {
	    // No existing registrations, no need to do anything, just return profile
	    return Promise.resolve(profile)
	  }
	  if (location) {
	    // If location is present, filter the to-remove list only to registrations
	    // that are in that location.
	    registrations = registrations.filter(function (registration) {
	      return registration.locationUri === location
	    })
	  }
	  // Generate triples to delete
	  var toDel = []
	  registrations.forEach(function (registration) {
	    registryGraph.statementsMatching(rdf.sym(registration.registrationUri))
	      .forEach(function (statement) {
	        toDel.push(statement)
	      })
	  })
	  // Nothing to add
	  var toAdd = []
	  return webClient.patch(registryUri, toDel, toAdd)
	    .then(function (result) {
	      // Update the registry, to reflect new state
	      return profile.reloadTypeRegistry()
	    })
	}
	
	/**
	 * Removes a given RDF class from a user's type index registry, so that
	 * other applications can discover it.
	 * @method unregisterType
	 * @param profile {SolidProfile} Loaded WebID profile
	 * @param rdfClass {rdf.NamedNode} Type to register in the index.
	 * @param [isListed=false] {Boolean} Whether to remove from a listed or unlisted
	 *   index). Defaults to `false` (unlisted).
	 * @param [location] {String} If present, only unregister the class from this
	 *   location (absolute URI).
	 * @throws {Error}
	 * @return {Promise<SolidProfile>}
	 */
	function unregisterType (profile, rdfClass, isListed, location) {
	  if (!profile) {
	    throw new Error('No profile provided')
	  }
	  if (!profile.isLoaded) {
	    throw new Error('Profile is not loaded')
	  }
	  if (!rdfClass) {
	    throw new Error('Unregistering a type requires type class')
	  }
	  return loadTypeRegistry(profile)  // make sure type registry is loaded
	    .then(function (profile) {
	      if (isListed && !profile.typeIndexListed.graph) {
	        throw new Error('Profile has no Listed type index')
	      }
	      if (!isListed && !profile.typeIndexUnlisted.graph) {
	        throw new Error('Profile has no Unlisted type index')
	      }
	      return removeFromTypeIndex(profile, rdfClass, isListed, location)
	    })
	}


/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict'
	/**
	 * @module index-registration
	 */
	module.exports = IndexRegistration
	
	/**
	 * Represents a Solid Index registration (an entry in the Type Index Registry).
	 * Returned in a list by `profile.typeRegistryForClass()`
	 * @class IndexRegistration
	 * @constructor
	 * @param registrationUri {String} Absolute URI (with fragment identifier) of
	 *   the registration (its location in the type index)
	 * @param rdfClass {rdf.NamedNode} RDF Class for this registration
	 * @param locationType {String} One of 'instance' or 'container'
	 * @param locationUri {String} URI of the location containing resources of this
	 *   type
	 * @param isListed {Boolean} Is this registration in a listed or unlisted index
	 */
	function IndexRegistration (registrationUri, rdfClass, locationType,
	                            locationUri, isListed) {
	  /**
	   * Is this a listed or unlisted registration
	   * @property isListed
	   * @type Boolean
	   */
	  this.isListed = isListed
	  /**
	   * Location type, one of 'instance' or 'container'
	   * @property locationType
	   * @type String
	   */
	  this.locationType = locationType
	  /**
	   * URI of the solid instance or container that holds resources of this type
	   * @property locationUri
	   * @type String
	   */
	  this.locationUri = locationUri
	  /**
	   * RDF Class for this registration
	   * @property rdfClass
	   * @type rdf.NamedNode
	   */
	  this.rdfClass = rdfClass
	  /**
	   * Absolute URI (with fragment identifier) of the registration
	   * @property registrationUri
	   * @type String
	   */
	  this.registrationUri = registrationUri
	}
	
	/**
	 * Convenience method, returns true if this registration is of type
	 * `solid:instanceContainer`
	 * @method isContainer
	 * @return {Boolean}
	 */
	IndexRegistration.prototype.isContainer = function isInstance () {
	  return this.locationType === 'container'
	}
	
	/**
	 * Convenience method, returns true if this registration is of type
	 * `solid:instance`
	 * @method isInstance
	 * @return {Boolean}
	 */
	IndexRegistration.prototype.isInstance = function isInstance () {
	  return this.locationType === 'instance'
	}


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * @module permissions
	 */
	
	var PermissionSet = __webpack_require__(304)
	var webClient = __webpack_require__(287)
	
	/**
	 * Clears (deletes) an ACL resource for a given resource url.
	 * Usage:
	 *
	 *   ```
	 *   solid.clearPermissions('https://alice.example.com/docs/file1')
	 *     .then(function (result) {
	 *       // Now the ACL resource at file1.acl is deleted
	 *     })
	 *   ```
	 * @method clearPermissions
	 * @param resourceUrl {String} URL of a resource (not its ACL)
	 * @return {Promise<PermissionSet>}
	 */
	function clearPermissions (resourceUrl) {
	  var aclResourceUrl
	  return webClient.head(resourceUrl)
	    .then(function (response) {
	      aclResourceUrl = response.aclAbsoluteUrl()
	      if (!aclResourceUrl) {
	        throw new Error('ACL URL not found for resource.')
	      }
	      return webClient.del(aclResourceUrl)
	    })
	}
	
	/**
	 * Fetches and returns a PermissionSet initialized from an ACL resource.
	 * Usage:
	 *
	 *   ```
	 *   solid.getPermissions('https://alice.example.com/docs/file1')
	 *     .then(function (permissionSet) {
	 *       // loads the PermissionSet instance, parsed from file1.acl for example
	 *       // now you can edit it and save it
	 *       return permissionSet
	 *         .addPermission(aliceWebId, [solid.acl.READ, solid.acl.WRITE])
	 *         .addPermission(aliceWebId, solid.acl.CONTROL)
	 *         .addPermission(solid.acl.EVERYONE, solid.acl.READ)
	 *         .save()
	 *     })
	 *   ```
	 * @method getPermissions
	 * @param resourceUrl {String} URL of a resource (not its ACL)
	 * @return {Promise<PermissionSet>}
	 */
	function getPermissions (resourceUrl) {
	  var aclResourceUrl
	  var permissions
	  return webClient.head(resourceUrl)
	    .then(function (response) {
	      aclResourceUrl = response.aclAbsoluteUrl()
	      if (!aclResourceUrl) {
	        throw new Error('ACL URL not found for resource.')
	      }
	      permissions =
	        new PermissionSet(resourceUrl, aclResourceUrl, response.isContainer())
	      return webClient.getParsedGraph(aclResourceUrl)
	    })
	    .then(function (aclGraph) {
	      permissions.initFromGraph(aclGraph)
	      return permissions
	    })
	}
	
	module.exports.clearPermissions = clearPermissions
	module.exports.getPermissions = getPermissions


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * @module permission-set
	 * Models the set of Authorizations in a given .acl resource.
	 * @see https://github.com/solid/web-access-control-spec for details.
	 * The working assumptions here are:
	 *   - Model the various permissions in an ACL resource as a set of unique
	 *     authorizations, with one agent (or one group), and only
	 *     one resource (acl:accessTo) per authorization.
	 *   - If the source RDF of the ACL resource has multiple agents or multiple
	 *     resources in one authorization, separate them into multiple separate
	 *     Authorization objects (with one agent/group and one resourceUrl each)
	 *   - A single Authorization object can grant access to multiple modes (read,
	 *     write, control, etc)
	 *   - By default, all the authorizations in a container's ACL will be marked
	 *     as 'to be inherited', that is will have `acl:default` set.
	 */
	
	var Authorization = __webpack_require__(225)
	var vocab = __webpack_require__(228)
	var rdf = __webpack_require__(230).rdflib
	var webClient = __webpack_require__(287)
	
	/**
	 * Resource types, used by PermissionSet objects
	 * @type {String}
	 */
	var RESOURCE = 'resource'
	var CONTAINER = 'container'
	
	function PermissionSet (resourceUrl, aclUrl, isContainer) {
	  /**
	   * Hashmap of all Authorizations in this permission set, keyed by a hashed
	   * combination of an agent's/group's webId and the resourceUrl.
	   * @property authorizations
	   * @type {Object}
	   */
	  this.authorizations = {}
	  /**
	   * The URL of the resource for which these permissions apply.
	   * @property resourceUrl
	   * @type {String}
	   */
	  this.resourceUrl = resourceUrl
	  /**
	   * The URL of the corresponding ACL resource, at which these permissions will
	   * be saved.
	   * @property aclUrl
	   * @type {String}
	   */
	  this.aclUrl = aclUrl
	  /**
	   * Whether this permission set is for a 'container' or a 'resource'.
	   * Determines whether or not the inherit/'acl:default' attribute is set on
	   * all its Authorizations.
	   * @property resourceType
	   * @type {String}
	   */
	  this.resourceType = isContainer ? CONTAINER : RESOURCE
	}
	
	/**
	 * Adds a given Authorization instance to the permission set.
	 * Low-level function, clients should use `addPermission()` instead, in most
	 * cases.
	 * @method addAuthorization
	 * @param auth {Authorization}
	 * @return {PermissionSet} Returns self (chainable)
	 */
	function addAuthorization (auth) {
	  var hashFragment = auth.hashFragment()
	  if (hashFragment in this.authorizations) {
	    // An authorization for this agent and resource combination already exists
	    // Merge the incoming access modes with its existing ones
	    this.authorizations[hashFragment].mergeWith(auth)
	  } else {
	    this.authorizations[hashFragment] = auth
	  }
	  return this
	}
	PermissionSet.prototype.addAuthorization = addAuthorization
	
	/**
	 * Adds an agentClass/group permission for the given access mode and agent id.
	 * @method addGroupPermission
	 * @param webId {String}
	 * @param accessMode {String|Array<String>}
	 * @return {PermissionSet} Returns self (chainable)
	 */
	function addGroupPermission (webId, accessMode) {
	  var auth = new Authorization(this.resourceUrl, this.isAuthInherited())
	  auth.setGroup(webId)
	  auth.addMode(accessMode)
	  this.addAuthorization(auth)
	  return this
	}
	PermissionSet.prototype.addGroupPermission = addGroupPermission
	
	/**
	 * Adds a permission for the given access mode and agent id.
	 * @method addPermission
	 * @param webId {String} URL of an agent for which this permission applies
	 * @param accessMode {String|Array<String>} One or more access modes
	 * @param [origin] {String|Array<String>} One or more allowed origins (optional)
	 * @return {PermissionSet} Returns self (chainable)
	 */
	function addPermission (webId, accessMode, origin) {
	  if (!webId) {
	    throw new Error('addPermission() requires a valid webId')
	  }
	  if (!accessMode) {
	    throw new Error('addPermission() requires a valid accessMode')
	  }
	  var auth = new Authorization(this.resourceUrl, this.isAuthInherited())
	  auth.setAgent(webId)
	  auth.addMode(accessMode)
	  if (origin) {
	    auth.addOrigin(origin)
	  }
	  this.addAuthorization(auth)
	  return this
	}
	PermissionSet.prototype.addPermission = addPermission
	
	/**
	 * Returns a list of all the Authorizations that belong to this permission set.
	 * Mostly for internal use.
	 * @method allAuthorizations
	 * @return {Array<Authorization>}
	 */
	function allAuthorizations () {
	  var authList = []
	  var auth
	  var self = this
	  Object.keys(this.authorizations).forEach(function (authKey) {
	    auth = self.authorizations[authKey]
	    authList.push(auth)
	  })
	  return authList
	}
	PermissionSet.prototype.allAuthorizations = allAuthorizations
	
	/**
	 * Returns an RDF graph representation of this permission set and all its
	 * Authorizations. Used by `save()`.
	 * @method buildGraph
	 * @private
	 * @return {Graph}
	 */
	function buildGraph () {
	  var graph = rdf.graph()
	  this.allAuthorizations().forEach(function (auth) {
	    graph.add(auth.rdfStatements())
	  })
	  return graph
	}
	PermissionSet.prototype.buildGraph = buildGraph
	
	/**
	 * Sends a delete request to a particular ACL resource. Intended to be used for
	 * an existing loaded PermissionSet, but you can also specify a particular
	 * URL to delete.
	 * Usage:
	 *
	 *   ```
	 *   // If you have an existing PermissionSet as a result of `getPermissions()`:
	 *   solid.getPermissions('https://www.example.com/file1')
	 *     .then(function (permissionSet) {
	 *       // do stuff
	 *       return permissionSet.clear()  // deletes that permissionSet
	 *     })
	 *   // Otherwise, use the helper function
	 *   //   solid.clearPermissions(resourceUrl) instead
	 *   solid.clearPermissions('https://www.example.com/file1')
	 *     .then(function (response) {
	 *       // file1.acl is now deleted
	 *     })
	 *   ```
	 * @method clear
	 * @throws {Error} Rejects with an error if it doesn't know where to delete, or
	 *   with any XHR errors that crop up.
	 * @return {Promise<Request>}
	 */
	function clear () {
	  var aclUrl = this.aclUrl
	  if (!aclUrl) {
	    return Promise.reject(new Error('Cannot clear - unknown target url'))
	  }
	  return webClient.del(aclUrl)
	}
	PermissionSet.prototype.clear = clear
	
	/**
	 * Returns the number of Authorizations in this permission set.
	 * @method count
	 * @return {Number}
	 */
	function count () {
	  return Object.keys(this.authorizations).length
	}
	PermissionSet.prototype.count = count
	
	/**
	 * Returns whether or not this permission set is equal to another one.
	 * A PermissionSet is considered equal to another one iff:
	 * - It has the same number of authorizations, and each of those authorizations
	 *   has a corresponding one in the other set
	 * - They are both intended for the same resource (have the same resourceUrl)
	 * - They are both intended to be saved at the same aclUrl
	 * @method equals
	 * @param ps {PermissionSet} The other permission set to compare to
	 * @return {Boolean}
	 */
	function equals (ps) {
	  var self = this
	  var sameUrl = this.resourceUrl === ps.resourceUrl
	  var sameAclUrl = this.aclUrl === ps.aclUrl
	  var sameResourceType = this.resourceType === ps.resourceType
	  var myAuthKeys = Object.keys(this.authorizations)
	  var otherAuthKeys = Object.keys(ps.authorizations)
	  if (myAuthKeys.length !== otherAuthKeys.length) { return false }
	  var sameAuths = true
	  var myAuth, otherAuth
	  myAuthKeys.forEach(function (authKey) {
	    myAuth = self.authorizations[authKey]
	    otherAuth = ps.authorizations[authKey]
	    if (!otherAuth) {
	      sameAuths = false
	    }
	    if (!myAuth.equals(otherAuth)) {
	      sameAuths = false
	    }
	  })
	  return sameUrl && sameAclUrl && sameResourceType && sameAuths
	}
	PermissionSet.prototype.equals = equals
	
	/**
	 * Iterates over all the authorizations in this permission set.
	 * Convenience method.
	 * Usage:
	 *
	 *   ```
	 *   solid.getPermissions(resourceUrl)
	 *     .then(function (permissionSet) {
	 *       permissionSet.forEach(function (auth) {
	 *         // do stuff with auth
	 *       })
	 *     })
	 *   ```
	 * @method forEach
	 * @param callback {Function} Function to apply to each authorization
	 */
	function forEach (callback) {
	  var self = this
	  this.allAuthorizations().forEach(function (auth) {
	    callback.call(self, auth)
	  })
	}
	PermissionSet.prototype.forEach = forEach
	
	/**
	 * Creates and loads all the authorizations from a given RDF graph.
	 * Used by `solid.getPermissions()`.
	 * @method initFromGraph
	 * @param graph {Graph} RDF Graph (parsed from the source ACL)
	 */
	function initFromGraph (graph) {
	  var matches = graph.statementsMatching(null, null, vocab.acl('Authorization'))
	  var fragment, agentMatches, mailTos, groupMatches, resourceUrls, auth
	  var accessModes, origins, inherit
	  var self = this
	  // Iterate through each grouping of authorizations in the .acl graph
	  matches.forEach(function (match) {
	    fragment = match.subject
	    // Extract all the authorized agents/groups (acl:agent and acl:agentClass)
	    agentMatches = graph.statementsMatching(fragment, vocab.acl('agent'))
	    mailTos = agentMatches.filter(isMailTo)
	    // Now filter out mailtos
	    agentMatches = agentMatches.filter(function (ea) { return !isMailTo(ea) })
	    groupMatches = graph.statementsMatching(fragment, vocab.acl('agentClass'))
	    // Extract the acl:accessTo statements. (Have to support multiple ones)
	    resourceUrls = graph.statementsMatching(fragment, vocab.acl('accessTo'))
	    // Extract the access modes
	    accessModes = graph.statementsMatching(fragment, vocab.acl('mode'))
	    // Extract allowed origins
	    origins = graph.statementsMatching(fragment, vocab.acl('origin'))
	    // Check if these permissions are to be inherited
	    inherit = graph.any(fragment, vocab.acl('defaultForNew')) ||
	        graph.any(fragment, vocab.acl('default'))
	    // Create an Authorization object for each agent or group
	    //   (and for each resourceUrl (acl:accessTo))
	    agentMatches.forEach(function (agentMatch) {
	      resourceUrls.forEach(function (resourceUrl) {
	        auth = new Authorization(resourceUrl.object.uri, inherit)
	        auth.setAgent(agentMatch)
	        auth.addMode(accessModes)
	        auth.addOrigin(origins)
	        mailTos.forEach(function (mailTo) {
	          auth.addMailTo(mailTo)
	        })
	        self.addAuthorization(auth)
	      })
	    })
	    groupMatches.forEach(function (groupMatch) {
	      resourceUrls.forEach(function (resourceUrl) {
	        auth = new Authorization(resourceUrl.object.uri, inherit)
	        auth.setGroup(groupMatch)
	        auth.addMode(accessModes)
	        auth.addOrigin(origins)
	        self.addAuthorization(auth)
	      })
	    })
	  })
	}
	PermissionSet.prototype.initFromGraph = initFromGraph
	
	/**
	 * Returns whether or not authorizations added to this permission set be
	 * inherited, by default? (That is, should they have acl:default set on them).
	 * @method isAuthInherited
	 * @return {Boolean}
	 */
	function isAuthInherited () {
	  return this.resourceType === CONTAINER
	}
	PermissionSet.prototype.isAuthInherited = isAuthInherited
	
	/**
	 * Returns whether or not this permission set has any Authorizations added to it
	 * @method isEmpty
	 * @return {Boolean}
	 */
	function isEmpty () {
	  return this.count() === 0
	}
	PermissionSet.prototype.isEmpty = isEmpty
	
	/**
	 * Returns the corresponding Authorization for a given agent/group webId (and
	 * for a given resourceUrl, although it assumes by default that it's the same
	 * resourceUrl as the PermissionSet).
	 * @method permissionFor
	 * @param webId {String} URL of the agent or group
	 * @param [resourceUrl] {String}
	 * @return {Authorization} Returns the corresponding Authorization, or `null`
	 *   if no webId is given, or if no such authorization exists.
	 */
	function permissionFor (webId, resourceUrl) {
	  if (!webId) {
	    return null
	  }
	  resourceUrl = resourceUrl || this.resourceUrl
	  var hashFragment = Authorization.hashFragmentFor(webId, resourceUrl)
	  return this.authorizations[hashFragment]
	}
	PermissionSet.prototype.permissionFor = permissionFor
	
	/**
	 * Deletes a given Authorization instance from the permission set.
	 * Low-level function, clients should use `removePermission()` instead, in most
	 * cases.
	 * @method removeAuthorization
	 * @param auth {Authorization}
	 * @return {PermissionSet} Returns self (chainable)
	 */
	function removeAuthorization (auth) {
	  var hashFragment = auth.hashFragment()
	  delete this.authorizations[hashFragment]
	  return this
	}
	PermissionSet.prototype.removeAuthorization = removeAuthorization
	
	/**
	 * Removes one or more access modes from an authorization in this permission set
	 * (defined by a unique combination of agent/group id (webId) and a resourceUrl).
	 * If no more access modes remain for that authorization, it's deleted from the
	 * permission set.
	 * @method removePermission
	 * @param webId
	 * @param accessMode {String|Array<String>}
	 * @return {PermissionSet} Returns self (via a chainable function)
	 */
	function removePermission (webId, accessMode) {
	  var auth = this.permissionFor(webId, this.resourceUrl)
	  if (!auth) {
	    // No authorization for this webId + resourceUrl exists. Bail.
	    return this
	  }
	  // Authorization exists, remove the accessMode from it
	  auth.removeMode(accessMode)
	  if (auth.isEmpty()) {
	    // If no more access modes remain, after removing, delete it from this
	    // permission set
	    this.removeAuthorization(auth)
	  }
	  return this
	}
	PermissionSet.prototype.removePermission = removePermission
	
	/**
	 * @method save
	 * @param [aclUrl] {String} Optional URL to save the .ACL resource to. Defaults
	 *   to its pre-set `aclUrl`, if not explicitly passed in.
	 * @throws {Error} Rejects with an error if it doesn't know where to save, or
	 *   with any XHR errors that crop up.
	 * @return {Promise<Request>}
	 */
	function save (aclUrl) {
	  aclUrl = aclUrl || this.aclUrl
	  if (!aclUrl) {
	    return Promise.reject(new Error('Cannot save - unknown target url'))
	  }
	  return webClient.put(aclUrl, this.serialize())
	}
	PermissionSet.prototype.save = save
	
	/**
	 * Serializes this permission set (and all its Authorizations) to a string RDF
	 * representation (Turtle by default).
	 * Note: invalid authorizations (ones that don't have at least one agent/group,
	 * at least one resourceUrl and at least one access mode) do not get serialized,
	 * and are instead skipped.
	 * @method serialize
	 * @param [contentType='text/turtle'] {String}
	 * @throws {Error} Rejects with an error if one is encountered during RDF
	 *   serialization.
	 * @return {Promise<String>} Graph serialized to contentType RDF syntax
	 */
	function serialize (contentType) {
	  contentType = contentType || 'text/turtle'
	  var graph = this.buildGraph()
	  var target = null
	  var base = null
	  return new Promise(function (resolve, reject) {
	    rdf.serialize(target, graph, base, contentType, function (err, result) {
	      if (err) { return reject(err) }
	      if (!result) {
	        return reject(new Error('Error serializing the graph to ' +
	          contentType))
	      }
	      resolve(result)
	    })
	  })
	}
	PermissionSet.prototype.serialize = serialize
	
	/**
	 * Returns whether or not a given agent webId is actually a `mailto:` link.
	 * Standalone helper function.
	 * @param agent {String|Statement} URL string (or RDF `acl:agent` triple)
	 * @return {Boolean}
	 */
	function isMailTo (agent) {
	  if (typeof agent === 'string') {
	    return agent.startsWith('mailto:')
	  } else {
	    return agent.object.uri.startsWith('mailto:')
	  }
	}
	
	module.exports = PermissionSet
	module.exports.RESOURCE = RESOURCE
	module.exports.CONTAINER = CONTAINER
	module.exports.isMailTo = isMailTo


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * Provides miscelaneous meta functions (such as library version)
	 * @module meta
	 */
	var lib = __webpack_require__(306)
	
	/**
	 * Returns Solid.js library version (read from `package.json`)
	 * @return {String} Lib version
	 */
	module.exports.version = function version () {
	  return lib.version
	}


/***/ },
/* 306 */
/***/ function(module, exports) {

	module.exports = {
		"name": "solid-client",
		"version": "0.20.0",
		"description": "Common library for writing Solid read-write-web applications",
		"main": "./index.js",
		"files": [
			"index.js",
			"config.js",
			"lib",
			"dist"
		],
		"scripts": {
			"build-with-rdflib": "browserify -r ./index.js:solid --exclude 'xhr2' -d -p [minifyify --map dist/solid-client.js.map --output dist/solid-client.js.map] --standalone 'SolidClient' -o dist/solid-client.min.js",
			"build-without-rdflib": "browserify -r ./index.js:solid --exclude 'xhr2' --exclude 'rdflib' -d -p [minifyify --map dist/solid-client-no-rdflib.js.map --output dist/solid-client-no-rdflib.js.map] --standalone 'SolidClient' -o dist/solid-client-no-rdflib.min.js",
			"build-qunit-resources": "npm run clean && mkdir -p dist/resources && npm run build-with-rdflib && browserify -r ./test/resources/profile-minimal.js:test-minimal-profile -o dist/resources/test-minimal-profile.js && browserify -r ./test/resources/profile-private.js:test-minimal-prefs -o dist/resources/test-minimal-prefs.js",
			"build": "npm run test && npm run clean && mkdir dist && npm run build-with-rdflib && npm run build-without-rdflib",
			"prepublish": "npm run build",
			"clean": "rm -rf dist/",
			"standard": "standard lib/*",
			"tape": "tape test/unit/*.js",
			"test": "npm run standard && npm run tape",
			"qunit": "npm run build-qunit-resources && open test/integration/index.html"
		},
		"repository": {
			"type": "git",
			"url": "git+https://github.com/solid/solid.js.git"
		},
		"keywords": [
			"solid",
			"decentralized",
			"web",
			"rdf",
			"ldp",
			"linked",
			"data"
		],
		"author": {
			"name": "Andrei Sambra",
			"email": "andrei@fcns.eu"
		},
		"license": "MIT",
		"bugs": {
			"url": "https://github.com/solid/solid.js/issues"
		},
		"homepage": "https://github.com/solid/solid.js",
		"dependencies": {
			"rdf-ns": "0.0.2",
			"rdflib": "^0.7.0",
			"shorthash": "0.0.2",
			"standard-http-error": "^2.0.0",
			"xhr2": "^0.1.3"
		},
		"devDependencies": {
			"blue-tape": "^0.2.0",
			"browserify": "^13.0.0",
			"minifyify": "^7.2.1",
			"qunit": "^0.9.0",
			"standard": "^5.4.1",
			"tape": "^4.4.0"
		},
		"standard": {
			"globals": [
				"$rdf",
				"SolidClient",
				"tabulator",
				"QUnit"
			]
		},
		"gitHead": "49950ec11057cfdb7227a8759b8117fb825f01d5",
		"_id": "solid-client@0.20.0",
		"_shasum": "1e6557f343d47b22367944253a0c102880a035c4",
		"_from": "solid-client@>=0.20.0 <0.21.0",
		"_npmVersion": "3.9.3",
		"_nodeVersion": "6.2.1",
		"_npmUser": {
			"name": "dan-f",
			"email": "dfriedman58@gmail.com"
		},
		"dist": {
			"shasum": "1e6557f343d47b22367944253a0c102880a035c4",
			"tarball": "https://registry.npmjs.org/solid-client/-/solid-client-0.20.0.tgz"
		},
		"maintainers": [
			{
				"name": "codenamedmitri",
				"email": "dzagidulin@gmail.com"
			},
			{
				"name": "dan-f",
				"email": "dfriedman58@gmail.com"
			}
		],
		"_npmOperationalInternal": {
			"host": "packages-16-east.internal.npmjs.com",
			"tmp": "tmp/solid-client-0.20.0.tgz_1466692561907_0.03752308199182153"
		},
		"directories": {},
		"_resolved": "https://registry.npmjs.org/solid-client/-/solid-client-0.20.0.tgz"
	};

/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict'
	/**
	 * Provides Web API helpers dealing with a user's online / offline status.
	 * @module status
	 */
	module.exports.isOnline = isOnline
	module.exports.onOffline = onOffline
	module.exports.onOnline = onOnline
	
	/**
	 * Returns a user's online status (true if user is on line)
	 * @method isOnline
	 * @static
	 * @return {Boolean}
	 */
	function isOnline () {
	  return window.navigator.onLine
	}
	
	/**
	 * Adds an even listener to trigger when the user goes offline.
	 * @method onOffline
	 * @static
	 * @param callback {Function} Callback to invoke when user goes offline.
	 */
	function onOffline (callback) {
	  window.addEventListener('offline', callback, false)
	}
	
	/**
	 * Adds an even listener to trigger when the user comes online.
	 * @method onOnline
	 * @static
	 * @param callback {Function} Callback to invoke when user comes online
	 */
	function onOnline (callback) {
	  window.addEventListener('online', callback, false)
	}


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.App = undefined;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(183);
	
	var _Dashboard = __webpack_require__(309);
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _Navbar = __webpack_require__(313);
	
	var _Navbar2 = _interopRequireDefault(_Navbar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// export unconnected App for testing
	var App = exports.App = function App(_ref) {
	  var profile = _ref.profile;
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_Navbar2.default, { picURL: profile.picture || 'solid-logo.svg' }),
	    _react2.default.createElement(_Dashboard2.default, null)
	  );
	};
	
	App.propTypes = {
	  profile: _react.PropTypes.object.isRequired
	};
	
	function mapStateToProps(state) {
	  return { profile: state.profile };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(App);

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Dashboard = undefined;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(183);
	
	var _redux = __webpack_require__(190);
	
	var _actions = __webpack_require__(223);
	
	var Actions = _interopRequireWildcard(_actions);
	
	var _AnonymousDashboard = __webpack_require__(310);
	
	var _AnonymousDashboard2 = _interopRequireDefault(_AnonymousDashboard);
	
	var _LoggedInDashboard = __webpack_require__(311);
	
	var _LoggedInDashboard2 = _interopRequireDefault(_LoggedInDashboard);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// export unconnected Dashboard for testing
	var Dashboard = exports.Dashboard = function Dashboard(_ref) {
	  var profile = _ref.profile,
	      actions = _ref.actions;
	
	  return _react2.default.createElement(
	    'div',
	    { className: 'container' },
	    profile.isLoaded ? _react2.default.createElement(_LoggedInDashboard2.default, { profile: profile }) : _react2.default.createElement(_AnonymousDashboard2.default, { logIn: actions.logIn })
	  );
	};
	
	Dashboard.propTypes = {
	  profile: _react.PropTypes.object.isRequired,
	  actions: _react.PropTypes.object.isRequired
	};
	
	function mapStateToProps(state) {
	  return { profile: state.profile };
	}
	
	function mapDispatchToProps(dispatch) {
	  return { actions: (0, _redux.bindActionCreators)(Actions, dispatch) };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Dashboard);

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AnonymousDashboard = function AnonymousDashboard(_ref) {
	  var logIn = _ref.logIn;
	  return _react2.default.createElement(
	    'div',
	    { className: 'row' },
	    _react2.default.createElement(
	      'div',
	      { className: 'col-xs-12' },
	      _react2.default.createElement(
	        'span',
	        { className: 'center-block', style: { textAlign: 'center' } },
	        _react2.default.createElement(
	          'button',
	          { className: 'btn btn-link centered', style: { padding: '0px', verticalAlign: 'baseline' }, onClick: logIn },
	          'Log In'
	        ),
	        ' or ',
	        _react2.default.createElement(
	          'a',
	          { href: 'https://solid.github.io/solid-signup/' },
	          'Sign Up'
	        ),
	        ' to see your apps.'
	      )
	    )
	  );
	};
	
	AnonymousDashboard.propTypes = {
	  logIn: _react.PropTypes.func.isRequired
	};
	
	exports.default = AnonymousDashboard;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Card = __webpack_require__(312);
	
	var _Card2 = _interopRequireDefault(_Card);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoggedInDashboard = function LoggedInDashboard(_ref) {
	  var profile = _ref.profile;
	
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(
	      'div',
	      { className: 'row' },
	      _react2.default.createElement(
	        'div',
	        { className: 'col-sm-4' },
	        _react2.default.createElement(_Card2.default, {
	          title: 'Profile Builder',
	          url: 'https://solid.github.io/solid-profile-ui/',
	          description: 'Edit your solid profile.'
	        })
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'col-sm-4' },
	        _react2.default.createElement(_Card2.default, {
	          title: 'Connections',
	          url: 'https://solid.github.io/solid-connections-ui/',
	          description: 'Make Connections.'
	        })
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'col-sm-4' },
	        _react2.default.createElement(_Card2.default, {
	          title: 'Inbox',
	          url: 'https://solid.github.io/solid-inbox/',
	          description: 'Read your messages.'
	        })
	      )
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: 'row' },
	      profile.storage.length ? _react2.default.createElement(
	        'div',
	        { className: 'col-sm-4' },
	        _react2.default.createElement(_Card2.default, {
	          title: 'Storage',
	          url: profile.storage[0],
	          description: 'Access your files.'
	        })
	      ) : ''
	    )
	  );
	};
	
	LoggedInDashboard.propTypes = {
	  profile: _react.PropTypes.object.isRequired
	};
	
	exports.default = LoggedInDashboard;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Card = function Card(_ref) {
	  var title = _ref.title,
	      url = _ref.url,
	      description = _ref.description;
	  return _react2.default.createElement(
	    'div',
	    { className: 'card' },
	    _react2.default.createElement(
	      'div',
	      { className: 'card-block' },
	      _react2.default.createElement(
	        'h2',
	        { className: 'card-title' },
	        _react2.default.createElement(
	          'a',
	          { className: 'card-url', href: url },
	          title
	        )
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'card-text' },
	        description
	      )
	    )
	  );
	};
	
	Card.propTypes = {
	  title: _react.PropTypes.string.isRequired,
	  url: _react.PropTypes.string.isRequired,
	  description: _react.PropTypes.string.isRequired
	};
	
	exports.default = Card;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Navbar = function Navbar(_ref) {
	  var picURL = _ref.picURL;
	  return _react2.default.createElement(
	    'div',
	    { style: { paddingBottom: '1rem' } },
	    _react2.default.createElement(
	      'nav',
	      { className: 'navbar navbar-light bg-faded', role: 'navigation' },
	      _react2.default.createElement(
	        'a',
	        { className: 'navbar-brand', href: '/' },
	        'Solid'
	      ),
	      _react2.default.createElement('img', {
	        className: 'img-circle pull-xs-right',
	        src: picURL,
	        alt: 'Your profile picture',
	        width: '30'
	      })
	    )
	  );
	};
	
	Navbar.propTypes = {
	  picURL: _react.PropTypes.string.isRequired
	};
	
	exports.default = Navbar;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = configureStore;
	
	var _redux = __webpack_require__(190);
	
	var _reduxThunk = __webpack_require__(315);
	
	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
	
	var _reducers = __webpack_require__(316);
	
	var _reducers2 = _interopRequireDefault(_reducers);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function configureStore() {
	  return (0, _redux.createStore)(_reducers2.default, (0, _redux.applyMiddleware)(_reduxThunk2.default));
	}

/***/ },
/* 315 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch;
	    var getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }
	
	        return next(action);
	      };
	    };
	  };
	}
	
	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;
	
	exports['default'] = thunk;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isLoading = isLoading;
	exports.profile = profile;
	
	var _redux = __webpack_require__(190);
	
	var _actions = __webpack_require__(223);
	
	function isLoading() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _actions.LOG_IN_REQUEST:
	      return true;
	    case _actions.LOG_IN_SUCCESS:
	    case _actions.LOG_IN_FAILURE:
	      return false;
	    default:
	      return state;
	  }
	}
	
	function profile() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _actions.LOG_IN_SUCCESS:
	      return action.profile;
	    case _actions.LOG_IN_FAILURE:
	    default:
	      return state;
	  }
	}
	
	var rootReducer = (0, _redux.combineReducers)({ isLoading: isLoading, profile: profile });
	
	exports.default = rootReducer;

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map
